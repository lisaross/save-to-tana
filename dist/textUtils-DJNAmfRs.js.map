{"version":3,"file":"textUtils-DJNAmfRs.js","sources":["../src/utils/textUtils.ts"],"sourcesContent":["/**\n * Utility functions for text processing\n */\n\n/**\n * Sanitizes text for Tana API by removing newlines and extra spaces\n * @param text - The text to sanitize\n * @returns Sanitized text\n */\nexport function sanitizeText(text: string | undefined): string {\n  if (!text) return '';\n  \n  return text\n    .replace(/\\r?\\n|\\r/g, ' ')  // Replace newlines with spaces\n    .replace(/\\s+/g, ' ')       // Replace multiple spaces with a single space\n    .trim();\n}\n\n/**\n * Splits content into chunks of specified maximum size\n * @param content - The content to split\n * @param maxSize - Maximum size of each chunk\n * @returns Array of content chunks\n */\nexport function splitIntoChunks(content: string, maxSize: number): string[] {\n  const paragraphs = content.split(/\\n\\n+/);\n  const chunks: string[] = [];\n  let currentChunk = '';\n  \n  for (const paragraph of paragraphs) {\n    if ((currentChunk + paragraph).length > maxSize) {\n      if (currentChunk) {\n        chunks.push(currentChunk);\n        currentChunk = '';\n      }\n      \n      if (paragraph.length > maxSize) {\n        const sentences = paragraph.match(/[^.!?]+[.!?]+/g) || [paragraph];\n        \n        for (const sentence of sentences) {\n          if (sentence.length > maxSize) {\n            for (let i = 0; i < sentence.length; i += maxSize) {\n              chunks.push(sentence.slice(i, i + maxSize));\n            }\n          } else {\n            if ((currentChunk + sentence).length > maxSize) {\n              chunks.push(currentChunk);\n              currentChunk = sentence;\n            } else {\n              currentChunk += sentence;\n            }\n          }\n        }\n      } else {\n        currentChunk = paragraph;\n      }\n    } else {\n      currentChunk += (currentChunk ? '\\n\\n' : '') + paragraph;\n    }\n  }\n  \n  if (currentChunk) {\n    chunks.push(currentChunk);\n  }\n  \n  return chunks;\n}\n"],"names":["sanitizeText","text"],"mappings":"AASO,SAASA,EAAaC,EAAkC,CACzD,OAACA,EAEEA,EACJ,QAAQ,YAAa,GAAG,EACxB,QAAQ,OAAQ,GAAG,EACnB,KAAK,EALU,EAMpB"}