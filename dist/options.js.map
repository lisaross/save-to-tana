{"version":3,"file":"options.js","sources":["../src/options.ts"],"sourcesContent":["import type { TanaConfig, TanaFieldIds } from './types';\n\n/**\n * Options page interfaces\n */\ninterface SchemaParseResult {\n  supertagId: string;\n  fieldIds: TanaFieldIds;\n}\n\n/**\n * Options page controller\n */\nexport class OptionsController {\n  // Form elements\n  private apiKeyInput: HTMLInputElement;\n  private targetNodeIdInput: HTMLInputElement;\n  private supertagIdInput: HTMLInputElement;\n  private saveButton: HTMLButtonElement;\n  private tanaSchemaInput: HTMLTextAreaElement;\n  private extractSchemaButton: HTMLButtonElement;\n  private extractedFieldsDiv: HTMLDivElement;\n  private extractedFieldIdsPre: HTMLPreElement;\n  private fieldIdUrlInput: HTMLInputElement;\n  private fieldIdAuthorInput: HTMLInputElement;\n  private fieldIdDescriptionInput: HTMLInputElement;\n  private fieldIdContentInput: HTMLInputElement;\n  private schemaErrorDiv: HTMLDivElement;\n  private toast: HTMLDivElement | null = null;\n\n  /**\n   * Initialize the options page controller\n   */\n  constructor() {\n    // Get form elements\n    this.apiKeyInput = document.getElementById('apiKey') as HTMLInputElement;\n    this.targetNodeIdInput = document.getElementById('targetNodeId') as HTMLInputElement;\n    this.supertagIdInput = document.getElementById('supertagId') as HTMLInputElement;\n    this.saveButton = document.getElementById('saveButton') as HTMLButtonElement;\n    this.tanaSchemaInput = document.getElementById('tanaSchema') as HTMLTextAreaElement;\n    this.extractSchemaButton = document.getElementById('extractSchemaButton') as HTMLButtonElement;\n    this.extractedFieldsDiv = document.getElementById('extractedFields') as HTMLDivElement;\n    this.extractedFieldIdsPre = document.getElementById('extractedFieldIds') as HTMLPreElement;\n    this.fieldIdUrlInput = document.getElementById('fieldIdUrl') as HTMLInputElement;\n    this.fieldIdAuthorInput = document.getElementById('fieldIdAuthor') as HTMLInputElement;\n    this.fieldIdDescriptionInput = document.getElementById(\n      'fieldIdDescription',\n    ) as HTMLInputElement;\n    this.fieldIdContentInput = document.getElementById('fieldIdContent') as HTMLInputElement;\n    this.toast = document.getElementById('toast') as HTMLDivElement;\n\n    // Create schema error div\n    this.schemaErrorDiv = document.createElement('div');\n    this.schemaErrorDiv.className = 'status error';\n    this.schemaErrorDiv.style.display = 'none';\n    this.tanaSchemaInput.parentNode?.insertBefore(\n      this.schemaErrorDiv,\n      this.tanaSchemaInput.nextSibling,\n    );\n\n    // Initialize the page\n    this.initializePage();\n  }\n\n  /**\n   * Initialize the options page\n   */\n  private initializePage(): void {\n    // Load saved configuration\n    this.loadConfiguration();\n\n    // Add event listeners\n    this.saveButton.addEventListener('click', this.saveConfiguration.bind(this));\n    this.extractSchemaButton.addEventListener('click', this.extractSchemaFromTextarea.bind(this));\n\n    // Add input event listeners for validation\n    this.apiKeyInput.addEventListener('input', this.validateForm.bind(this));\n    this.targetNodeIdInput.addEventListener('input', this.validateForm.bind(this));\n    this.supertagIdInput.addEventListener('input', this.validateForm.bind(this));\n    this.fieldIdUrlInput.addEventListener('input', this.validateForm.bind(this));\n    this.fieldIdAuthorInput.addEventListener('input', this.validateForm.bind(this));\n    this.fieldIdDescriptionInput.addEventListener('input', this.validateForm.bind(this));\n    this.fieldIdContentInput.addEventListener('input', this.validateForm.bind(this));\n\n    // Initialize example JSON toggle\n    this.initializeExampleJsonToggle();\n  }\n\n  /**\n   * Initialize the example JSON toggle\n   */\n  private initializeExampleJsonToggle(): void {\n    const toggleBtn = document.getElementById('toggleExampleJson');\n    const exampleJsonBlock = document.getElementById('exampleJsonBlock');\n    const toggleLabel = document.getElementById('toggleExampleJsonLabel');\n\n    if (toggleBtn && exampleJsonBlock && toggleLabel) {\n      toggleBtn.addEventListener('click', () => {\n        const expanded = toggleBtn.getAttribute('aria-expanded') === 'true';\n        toggleBtn.setAttribute('aria-expanded', String(!expanded));\n        exampleJsonBlock.style.display = expanded ? 'none' : 'block';\n        toggleLabel.textContent = expanded ? 'Show Example JSON' : 'Hide Example JSON';\n      });\n    }\n  }\n\n  /**\n   * Load saved configuration from storage\n   */\n  private loadConfiguration(): void {\n    chrome.storage.sync.get(\n      ['apiKey', 'supertagId', 'targetNodeId', 'tanaFieldIds'],\n      (result: Partial<TanaConfig>) => {\n        console.log('Loaded configuration:', result);\n\n        if (result.apiKey) {\n          this.apiKeyInput.value = result.apiKey;\n        }\n\n        if (result.targetNodeId) {\n          this.targetNodeIdInput.value = result.targetNodeId;\n        }\n\n        if (result.supertagId) {\n          this.supertagIdInput.value = result.supertagId;\n        }\n\n        if (result.tanaFieldIds) {\n          this.fieldIdUrlInput.value = result.tanaFieldIds.URL || '';\n          this.fieldIdAuthorInput.value = result.tanaFieldIds.Author || '';\n          this.fieldIdDescriptionInput.value = result.tanaFieldIds.Description || '';\n          this.fieldIdContentInput.value = result.tanaFieldIds.Content || '';\n        }\n\n        this.validateForm();\n      },\n    );\n  }\n\n  /**\n   * Save configuration to storage\n   */\n  private saveConfiguration(): void {\n    const apiKey = this.apiKeyInput.value.trim();\n    const targetNodeId = this.targetNodeIdInput.value.trim();\n    const supertagId = this.supertagIdInput.value.trim();\n    const tanaFieldIds: TanaFieldIds = {\n      URL: this.fieldIdUrlInput.value.trim(),\n      Author: this.fieldIdAuthorInput.value.trim(),\n      Description: this.fieldIdDescriptionInput.value.trim(),\n      Content: this.fieldIdContentInput.value.trim(),\n    };\n\n    // Validate required fields\n    if (!apiKey) {\n      this.showToast('API Token is required', true);\n      return;\n    }\n\n    if (!targetNodeId) {\n      this.showToast('Target Node ID is required', true);\n      return;\n    }\n\n    if (!supertagId) {\n      this.showToast('Save to Tana Supertag ID is required. Please extract schema.', true);\n      return;\n    }\n\n    if (\n      !tanaFieldIds.URL ||\n      !tanaFieldIds.Author ||\n      !tanaFieldIds.Description ||\n      !tanaFieldIds.Content\n    ) {\n      this.showToast('All field IDs are required.', true);\n      return;\n    }\n\n    // Save configuration to storage\n    chrome.storage.sync.set(\n      {\n        apiKey,\n        targetNodeId,\n        supertagId,\n        tanaFieldIds,\n      },\n      () => {\n        this.showToast('Configuration saved successfully!');\n      },\n    );\n  }\n\n  /**\n   * Validate the form and update UI\n   */\n  private validateForm(): void {\n    const apiKey = this.apiKeyInput.value.trim();\n    const targetNodeId = this.targetNodeIdInput.value.trim();\n    const supertagId = this.supertagIdInput.value.trim();\n\n    // Enable save button if we have all required fields\n    this.saveButton.disabled = !apiKey || !targetNodeId || !supertagId;\n  }\n\n  /**\n   * Show a toast message\n   * @param message - Message to display\n   * @param isError - Whether this is an error message\n   */\n  private showToast(message: string, isError = false): void {\n    if (!this.toast) return;\n\n    this.toast.textContent = message;\n    this.toast.className = `toast${isError ? ' error' : ' success'} show`;\n\n    setTimeout(() => {\n      if (this.toast) {\n        this.toast.className = `toast${isError ? ' error' : ' success'}`;\n        this.toast.textContent = '';\n      }\n    }, 5000);\n  }\n\n  /**\n   * Extract schema from textarea\n   */\n  private extractSchemaFromTextarea(): void {\n    this.schemaErrorDiv.style.display = 'none';\n    this.schemaErrorDiv.textContent = '';\n\n    const raw = this.tanaSchemaInput.value;\n    let schema: unknown;\n\n    try {\n      schema = JSON.parse(raw);\n    } catch (e) {\n      const error = e as Error;\n      this.schemaErrorDiv.textContent =\n        'Could not parse JSON. Please paste the API payload as copied from Tana. Error: ' +\n        error.message;\n      this.schemaErrorDiv.style.display = 'block';\n      this.extractedFieldsDiv.style.display = 'none';\n      return;\n    }\n\n    try {\n      const result = this.extractSchemaInfo(schema);\n\n      // Fill the inputs\n      this.supertagIdInput.value = result.supertagId;\n      this.fieldIdUrlInput.value = result.fieldIds.URL || '';\n      this.fieldIdAuthorInput.value = result.fieldIds.Author || '';\n      this.fieldIdDescriptionInput.value = result.fieldIds.Description || '';\n      this.fieldIdContentInput.value = result.fieldIds.Content || '';\n\n      // Show extracted info as a labeled list\n      this.extractedFieldsDiv.style.display = 'block';\n      this.extractedFieldIdsPre.textContent =\n        `Supertag ID: ${result.supertagId}\\n` +\n        Object.entries(result.fieldIds)\n          .map(([k, v]) => `${k} ID: ${v}`)\n          .join('\\n');\n\n      // Store in chrome.storage, merging with existing apiKey and targetNodeId\n      chrome.storage.sync.get(['apiKey', 'targetNodeId'], (existing) => {\n        chrome.storage.sync.set(\n          {\n            apiKey: existing.apiKey || '',\n            targetNodeId: existing.targetNodeId || '',\n            supertagId: result.supertagId,\n            tanaFieldIds: result.fieldIds,\n          },\n          () => {\n            this.showToast('Schema extracted and saved!');\n          },\n        );\n      });\n    } catch (e) {\n      const error = e as Error;\n      this.schemaErrorDiv.textContent = `Failed to extract schema info: ${error.message}`;\n      this.schemaErrorDiv.style.display = 'block';\n      this.extractedFieldsDiv.style.display = 'none';\n    }\n  }\n\n  /**\n   * Extract schema information from parsed JSON\n   * @param schema - Parsed schema JSON\n   * @returns Extracted schema information\n   */\n  private extractSchemaInfo(schema: any): SchemaParseResult {\n    // Assume first node in nodes array\n    const node = Array.isArray(schema.nodes) ? schema.nodes[0] : null;\n    if (!node) throw new Error('No nodes found in schema payload.');\n\n    // Extract supertagId\n    const supertagId = node.supertags?.[0]?.id || '';\n    if (!supertagId) throw new Error('No supertag ID found in schema.');\n\n    // Extract field IDs by name from children\n    const fieldIds: Partial<TanaFieldIds> = {};\n\n    if (Array.isArray(node.children)) {\n      for (const child of node.children) {\n        if (child.type === 'field' && child.attributeId) {\n          if (child.children?.[0]?.dataType === 'url') {\n            fieldIds.URL = child.attributeId;\n          } else if (fieldIds.Author === undefined) {\n            fieldIds.Author = child.attributeId;\n          } else if (fieldIds.Description === undefined) {\n            fieldIds.Description = child.attributeId;\n          } else {\n            fieldIds.Content = child.attributeId;\n          }\n        }\n      }\n    }\n\n    return {\n      supertagId,\n      fieldIds: fieldIds as TanaFieldIds,\n    };\n  }\n\n  /**\n   * Clean and parse Tana schema from TypeScript-like format\n   * This is a utility function for testing and development\n   * @param sample - TypeScript-like schema definition\n   * @returns Cleaned JSON string\n   */\n  static cleanSchemaString(sample: string): string {\n    const lines = sample.split('\\n');\n\n    // Remove type definition line and closing line\n    if (lines[0].trim().startsWith('type')) lines.shift();\n    if (lines[lines.length - 1].trim().replace(/[;\\s]/g, '') === '}') lines.pop();\n\n    // Clean each line\n    let cleaned = lines\n      .map((line) =>\n        line\n          .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n          .replace(/\\/\\/.*$/g, '') // Remove line comments\n          .replace(/^\\s*\\w+\\??:.*;\\s*$/g, '') // Remove type definitions\n          .replace(/;/g, '') // Remove semicolons\n          .replace(/\\?/g, '') // Remove optional markers\n          .replace(/'/g, '\"') // Replace single quotes with double quotes\n          .trim(),\n      )\n      .filter((line) => line.length > 0)\n      .join('\\n');\n\n    // Fix trailing commas and property names\n    cleaned = cleaned.replace(/,\\s*([\\]}])/g, '$1');\n    cleaned = cleaned.replace(/(^|[,{\\s])(\\w+):/g, '$1\"$2\":');\n\n    // Ensure it's a valid JSON object\n    if (!cleaned.trim().startsWith('{')) cleaned = `{${cleaned}}`;\n\n    return cleaned;\n  }\n}\n\n// Initialize the options page when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new OptionsController();\n});\n"],"names":["OptionsController","toggleBtn","exampleJsonBlock","toggleLabel","expanded","result","apiKey","targetNodeId","supertagId","tanaFieldIds","message","isError","raw","schema","e","error","k","v","existing","node","fieldIds","child","sample","lines","cleaned","line"],"mappings":"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"}