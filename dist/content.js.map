{"version":3,"file":"content.js","sources":["../src/content.ts"],"sourcesContent":["/**\n * Content script interfaces\n */\ninterface ExtractOptions {\n  includeContent: boolean;\n  includeTitle: boolean;\n}\n\ninterface ExtractRequest {\n  action: 'extractContent';\n  options: ExtractOptions;\n}\n\ninterface PageData {\n  url: string;\n  title: string;\n  author: string;\n  description: string;\n  content: string;\n  error?: boolean;\n  message?: string;\n}\n\n/**\n * Content script - extracts content from the current page\n */\n\n// Listen for messages from the popup\nchrome.runtime.onMessage.addListener((\n  request: ExtractRequest,\n  sender: chrome.runtime.MessageSender,\n  sendResponse: (response: PageData) => void\n) => {\n  if (request.action === 'extractContent') {\n    const options = request.options || { includeContent: true, includeTitle: true };\n    \n    try {\n      // Extract page information\n      const pageData: PageData = {\n        url: window.location.href,\n        title: document.title,\n        author: extractAuthor(),\n        description: extractDescription(),\n        content: ''\n      };\n      \n      // Extract content if requested\n      if (options.includeContent) {\n        pageData.content = extractMainContent();\n      }\n      \n      // If title is not requested, use URL as title\n      if (!options.includeTitle || !pageData.title) {\n        pageData.title = pageData.url;\n      }\n      \n      // Pre-sanitize title to avoid API errors\n      if (pageData.title) {\n        pageData.title = pageData.title.replace(/\\r?\\n|\\r/g, ' ').trim();\n      }\n      \n      sendResponse(pageData);\n    } catch (error) {\n      console.error('Content extraction error:', error);\n      sendResponse({\n        url: window.location.href,\n        title: document.title,\n        author: '',\n        description: '',\n        content: '',\n        error: true,\n        message: error instanceof Error ? error.message : 'Unknown error occurred during content extraction'\n      });\n    }\n  }\n  \n  // Must return true for asynchronous response\n  return true;\n});\n\n/**\n * Extract the main content from the page\n * @returns The main content text\n */\nfunction extractMainContent(): string {\n  // Get main content - prioritize article content, then main, then body\n  const mainElement = document.querySelector('article') || \n                     document.querySelector('main') || \n                     document.querySelector('.main-content') || \n                     document.body;\n  \n  if (!mainElement) {\n    return '';\n  }\n  \n  // Extract content\n  let content = mainElement.innerText;\n  \n  // Cap at 100000 characters to prevent excessive data transfer\n  const MAX_CONTENT_LENGTH = 100000;\n  if (content.length > MAX_CONTENT_LENGTH) {\n    content = content.substring(0, MAX_CONTENT_LENGTH) + \n              '... (content truncated due to very large page)';\n  }\n  \n  return content;\n}\n\n/**\n * Extract author from meta tags and common page elements\n * @returns The extracted author or empty string if not found\n */\nfunction extractAuthor(): string {\n  // Try various meta tags that might contain author information\n  const authorSelectors = [\n    'meta[name=\"author\"]',\n    'meta[property=\"article:author\"]',\n    'meta[name=\"twitter:creator\"]',\n    'meta[property=\"og:site_name\"]'\n  ];\n  \n  for (const selector of authorSelectors) {\n    const metaTag = document.querySelector(selector);\n    if (metaTag && metaTag.getAttribute('content')) {\n      return metaTag.getAttribute('content') || '';\n    }\n  }\n  \n  // Try schema.org markup\n  const schemaSelectors = [\n    '[itemtype*=\"schema.org/Person\"] [itemprop=\"name\"]',\n    '[itemtype*=\"schema.org/Organization\"] [itemprop=\"name\"]'\n  ];\n  \n  for (const selector of schemaSelectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent) {\n      return element.textContent.trim();\n    }\n  }\n  \n  // Try byline classes commonly used\n  const bylineSelectors = ['.byline', '.author', '.article-author'];\n  \n  for (const selector of bylineSelectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent) {\n      return element.textContent.trim();\n    }\n  }\n  \n  return '';\n}\n\n/**\n * Extract description from meta tags\n * @returns The extracted description or empty string if not found\n */\nfunction extractDescription(): string {\n  // Try various meta tags that might contain description\n  const descriptionSelectors = [\n    'meta[name=\"description\"]',\n    'meta[property=\"og:description\"]',\n    'meta[name=\"twitter:description\"]'\n  ];\n  \n  for (const selector of descriptionSelectors) {\n    const metaTag = document.querySelector(selector);\n    if (metaTag && metaTag.getAttribute('content')) {\n      return metaTag.getAttribute('content') || '';\n    }\n  }\n  \n  return '';\n}\n"],"names":["request","sender","sendResponse","options","pageData","extractAuthor","extractDescription","extractMainContent","error","mainElement","content","MAX_CONTENT_LENGTH","authorSelectors","selector","metaTag","schemaSelectors","element","bylineSelectors","descriptionSelectors"],"mappings":"AA4BA,OAAO,QAAQ,UAAU,YAAY,CACnCA,EACAC,EACAC,IACG,CACC,GAAAF,EAAQ,SAAW,iBAAkB,CACvC,MAAMG,EAAUH,EAAQ,SAAW,CAAE,eAAgB,GAAM,aAAc,EAAK,EAE1E,GAAA,CAEF,MAAMI,EAAqB,CACzB,IAAK,OAAO,SAAS,KACrB,MAAO,SAAS,MAChB,OAAQC,EAAc,EACtB,YAAaC,EAAmB,EAChC,QAAS,EACX,EAGIH,EAAQ,iBACVC,EAAS,QAAUG,EAAmB,IAIpC,CAACJ,EAAQ,cAAgB,CAACC,EAAS,SACrCA,EAAS,MAAQA,EAAS,KAIxBA,EAAS,QACXA,EAAS,MAAQA,EAAS,MAAM,QAAQ,YAAa,GAAG,EAAE,KAAK,GAGjEF,EAAaE,CAAQ,QACdI,EAAO,CACN,QAAA,MAAM,4BAA6BA,CAAK,EACnCN,EAAA,CACX,IAAK,OAAO,SAAS,KACrB,MAAO,SAAS,MAChB,OAAQ,GACR,YAAa,GACb,QAAS,GACT,MAAO,GACP,QAASM,aAAiB,MAAQA,EAAM,QAAU,kDAAA,CACnD,CAAA,CACH,CAIK,MAAA,EACT,CAAC,EAMD,SAASD,GAA6B,CAEpC,MAAME,EAAc,SAAS,cAAc,SAAS,GACjC,SAAS,cAAc,MAAM,GAC7B,SAAS,cAAc,eAAe,GACtC,SAAS,KAE5B,GAAI,CAACA,EACI,MAAA,GAIT,IAAIC,EAAUD,EAAY,UAG1B,MAAME,EAAqB,IACvB,OAAAD,EAAQ,OAASC,IACnBD,EAAUA,EAAQ,UAAU,EAAGC,CAAkB,EACvC,kDAGLD,CACT,CAMA,SAASL,GAAwB,CAE/B,MAAMO,EAAkB,CACtB,sBACA,kCACA,+BACA,+BACF,EAEA,UAAWC,KAAYD,EAAiB,CAChC,MAAAE,EAAU,SAAS,cAAcD,CAAQ,EAC/C,GAAIC,GAAWA,EAAQ,aAAa,SAAS,EACpC,OAAAA,EAAQ,aAAa,SAAS,GAAK,EAC5C,CAIF,MAAMC,EAAkB,CACtB,oDACA,yDACF,EAEA,UAAWF,KAAYE,EAAiB,CAChC,MAAAC,EAAU,SAAS,cAAcH,CAAQ,EAC3C,GAAAG,GAAWA,EAAQ,YACd,OAAAA,EAAQ,YAAY,KAAK,CAClC,CAIF,MAAMC,EAAkB,CAAC,UAAW,UAAW,iBAAiB,EAEhE,UAAWJ,KAAYI,EAAiB,CAChC,MAAAD,EAAU,SAAS,cAAcH,CAAQ,EAC3C,GAAAG,GAAWA,EAAQ,YACd,OAAAA,EAAQ,YAAY,KAAK,CAClC,CAGK,MAAA,EACT,CAMA,SAASV,GAA6B,CAEpC,MAAMY,EAAuB,CAC3B,2BACA,kCACA,kCACF,EAEA,UAAWL,KAAYK,EAAsB,CACrC,MAAAJ,EAAU,SAAS,cAAcD,CAAQ,EAC/C,GAAIC,GAAWA,EAAQ,aAAa,SAAS,EACpC,OAAAA,EAAQ,aAAa,SAAS,GAAK,EAC5C,CAGK,MAAA,EACT"}