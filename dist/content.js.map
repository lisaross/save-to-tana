{"version":3,"file":"content.js","sources":["../src/content.ts"],"sourcesContent":["/**\n * Content script interfaces\n */\ninterface ExtractOptions {\n  includeContent: boolean;\n  includeTitle: boolean;\n}\n\ninterface ExtractRequest {\n  action: 'extractContent';\n  options: ExtractOptions;\n}\n\ninterface ShowNotesDialogRequest {\n  action: 'showNotesDialog';\n}\n\n\ninterface PageData {\n  url: string;\n  title: string;\n  author: string;\n  description: string;\n  content: string;\n  error?: boolean;\n  message?: string;\n}\n\ntype ContentScriptRequest = ExtractRequest | ShowNotesDialogRequest;\n\n/**\n * Content script - extracts content from the current page\n */\n\n/**\n * Global state for overlay management\n */\nlet overlayElement: HTMLElement | null = null;\nlet currentPageData: PageData | null = null;\n\n// Listen for messages from the popup and background script\nchrome.runtime.onMessage.addListener((\n  request: ContentScriptRequest,\n  sender: chrome.runtime.MessageSender,\n  sendResponse: (response: any) => void\n) => {\n\n  if (request.action === 'extractContent') {\n    const options = request.options || { includeContent: true, includeTitle: true };\n    \n    try {\n      // Extract page information\n      const pageData: PageData = {\n        url: window.location.href,\n        title: document.title,\n        author: extractAuthor(),\n        description: extractDescription(),\n        content: ''\n      };\n      \n      // Extract content if requested\n      if (options.includeContent) {\n        pageData.content = extractMainContent();\n      }\n      \n      // If title is not requested, use URL as title\n      if (!options.includeTitle || !pageData.title) {\n        pageData.title = pageData.url;\n      }\n      \n      // Pre-sanitize title to avoid API errors\n      if (pageData.title) {\n        pageData.title = pageData.title.replace(/\\r?\\n|\\r/g, ' ').trim();\n      }\n      \n      sendResponse(pageData);\n    } catch (error) {\n      console.error('Content extraction error:', error);\n      sendResponse({\n        url: window.location.href,\n        title: document.title,\n        author: '',\n        description: '',\n        content: '',\n        error: true,\n        message: error instanceof Error ? error.message : 'Unknown error occurred during content extraction'\n      });\n    }\n  }\n\n  if (request.action === 'showNotesDialog') {\n    try {\n      // Extract current page data\n      const pageData: PageData = {\n        url: window.location.href,\n        title: document.title,\n        author: extractAuthor(),\n        description: extractDescription(),\n        content: extractMainContent()\n      };\n      \n      currentPageData = pageData;\n      showOverlay(pageData);\n      sendResponse({ success: true });\n    } catch (error) {\n      console.error('Error showing notes dialog:', error);\n      sendResponse({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Failed to show notes dialog' \n      });\n    }\n  }\n\n  \n  // Must return true for asynchronous response\n  return true;\n});\n\n/**\n * Extract the main content from the page\n * @returns The main content text\n */\nfunction extractMainContent(): string {\n  // Get main content - prioritize article content, then main, then body\n  const mainElement = document.querySelector('article') || \n                     document.querySelector('main') || \n                     document.querySelector('.main-content') || \n                     document.body;\n  \n  if (!mainElement) {\n    return '';\n  }\n  \n  // Extract content\n  let content = mainElement.innerText;\n  \n  // Cap at 100000 characters to prevent excessive data transfer\n  const MAX_CONTENT_LENGTH = 100000;\n  if (content.length > MAX_CONTENT_LENGTH) {\n    content = content.substring(0, MAX_CONTENT_LENGTH) + \n              '... (content truncated due to very large page)';\n  }\n  \n  return content;\n}\n\n/**\n * Extract author from meta tags and common page elements\n * @returns The extracted author or empty string if not found\n */\nfunction extractAuthor(): string {\n  // Try various meta tags that might contain author information\n  const authorSelectors = [\n    'meta[name=\"author\"]',\n    'meta[property=\"article:author\"]',\n    'meta[name=\"twitter:creator\"]',\n    'meta[property=\"og:site_name\"]'\n  ];\n  \n  for (const selector of authorSelectors) {\n    const metaTag = document.querySelector(selector);\n    if (metaTag && metaTag.getAttribute('content')) {\n      return metaTag.getAttribute('content') || '';\n    }\n  }\n  \n  // Try schema.org markup\n  const schemaSelectors = [\n    '[itemtype*=\"schema.org/Person\"] [itemprop=\"name\"]',\n    '[itemtype*=\"schema.org/Organization\"] [itemprop=\"name\"]'\n  ];\n  \n  for (const selector of schemaSelectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent) {\n      return element.textContent.trim();\n    }\n  }\n  \n  // Try byline classes commonly used\n  const bylineSelectors = ['.byline', '.author', '.article-author'];\n  \n  for (const selector of bylineSelectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent) {\n      return element.textContent.trim();\n    }\n  }\n  \n  return '';\n}\n\n/**\n * Extract description from meta tags\n * @returns The extracted description or empty string if not found\n */\nfunction extractDescription(): string {\n  // Try various meta tags that might contain description\n  const descriptionSelectors = [\n    'meta[name=\"description\"]',\n    'meta[property=\"og:description\"]',\n    'meta[name=\"twitter:description\"]'\n  ];\n  \n  for (const selector of descriptionSelectors) {\n    const metaTag = document.querySelector(selector);\n    if (metaTag && metaTag.getAttribute('content')) {\n      return metaTag.getAttribute('content') || '';\n    }\n  }\n  \n  return '';\n}\n\n/**\n * Show the quick capture overlay\n */\nfunction showOverlay(pageData: PageData): void {\n  try {\n    // Remove existing overlay if present\n    hideOverlay();\n\n    // Create overlay container\n    overlayElement = document.createElement('div');\n    overlayElement.id = 'tana-save-overlay';\n    \n    // Apply overlay styles and HTML safely\n    createOverlayStructure(overlayElement, pageData);\n    \n    // Inject overlay styles\n    injectOverlayStyles();\n    \n    // Add to DOM - ensure we have a body element\n    if (!document.body) {\n      console.error('Cannot show overlay: document.body is not available');\n      return;\n    }\n    \n    document.body.appendChild(overlayElement);\n    \n    // Set up event listeners\n    setupOverlayEventListeners();\n    \n    // Focus on the notes textarea\n    setTimeout(() => {\n      const notesTextarea = overlayElement?.querySelector('#tana-notes-input') as HTMLTextAreaElement;\n      if (notesTextarea) {\n        notesTextarea.focus();\n      }\n    }, 100);\n    \n  } catch (error) {\n    console.error('Error showing overlay:', error);\n    // Clean up on error\n    hideOverlay();\n  }\n}\n\n/**\n * Hide the quick capture overlay\n */\nfunction hideOverlay(): void {\n  if (overlayElement) {\n    // Clean up event listeners\n    document.removeEventListener('keydown', handleOverlayKeydown, true);\n    \n    overlayElement.remove();\n    overlayElement = null;\n    currentPageData = null;\n  }\n  \n  // Also remove the styles element\n  const styleElement = document.getElementById('tana-overlay-styles');\n  if (styleElement) {\n    styleElement.remove();\n  }\n}\n\n/**\n * Create overlay structure safely using DOM methods\n */\nfunction createOverlayStructure(container: HTMLElement, pageData: PageData): void {\n  const truncatedTitle = pageData.title.length > 60 \n    ? pageData.title.substring(0, 60) + '...' \n    : pageData.title;\n    \n  const truncatedUrl = pageData.url.length > 50 \n    ? pageData.url.substring(0, 50) + '...' \n    : pageData.url;\n\n  // Create backdrop\n  const backdrop = document.createElement('div');\n  backdrop.className = 'tana-overlay-backdrop';\n  \n  // Create dialog\n  const dialog = document.createElement('div');\n  dialog.className = 'tana-overlay-dialog';\n  \n  // Create header\n  const header = document.createElement('div');\n  header.className = 'tana-overlay-header';\n  \n  const title = document.createElement('h2');\n  title.textContent = 'Save to Tana';\n  \n  const closeButton = document.createElement('button');\n  closeButton.type = 'button';\n  closeButton.className = 'tana-overlay-close';\n  closeButton.id = 'tana-close-overlay';\n  // Create SVG element safely using DOM methods\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.setAttribute('width', '18');\n  svg.setAttribute('height', '18');\n  svg.setAttribute('viewBox', '0 0 18 18');\n  svg.setAttribute('fill', 'none');\n  \n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  path.setAttribute('d', 'M13.5 4.5l-9 9M4.5 4.5l9 9');\n  path.setAttribute('stroke', 'currentColor');\n  path.setAttribute('stroke-width', '2');\n  path.setAttribute('stroke-linecap', 'round');\n  \n  svg.appendChild(path);\n  closeButton.appendChild(svg);\n  \n  header.appendChild(title);\n  header.appendChild(closeButton);\n  \n  // Create content\n  const content = document.createElement('div');\n  content.className = 'tana-overlay-content';\n  \n  // Create preview section\n  const preview = document.createElement('div');\n  preview.className = 'tana-overlay-preview';\n  \n  const pageInfo = document.createElement('div');\n  pageInfo.className = 'tana-overlay-page-info';\n  \n  const pageTitle = document.createElement('div');\n  pageTitle.className = 'tana-overlay-page-title';\n  pageTitle.textContent = truncatedTitle;\n  \n  const pageUrl = document.createElement('div');\n  pageUrl.className = 'tana-overlay-page-url';\n  pageUrl.textContent = truncatedUrl;\n  \n  pageInfo.appendChild(pageTitle);\n  pageInfo.appendChild(pageUrl);\n  preview.appendChild(pageInfo);\n  \n  // Create notes section\n  const notesSection = document.createElement('div');\n  notesSection.className = 'tana-overlay-notes-section';\n  \n  const label = document.createElement('label');\n  label.setAttribute('for', 'tana-notes-input');\n  label.className = 'tana-overlay-label';\n  label.textContent = 'Add notes (optional)';\n  \n  const textarea = document.createElement('textarea');\n  textarea.id = 'tana-notes-input';\n  textarea.className = 'tana-overlay-notes-input';\n  textarea.placeholder = 'Add your notes here...';\n  textarea.rows = 4;\n  \n  notesSection.appendChild(label);\n  notesSection.appendChild(textarea);\n  \n  // Create actions section\n  const actions = document.createElement('div');\n  actions.className = 'tana-overlay-actions';\n  \n  const cancelButton = document.createElement('button');\n  cancelButton.type = 'button';\n  cancelButton.className = 'tana-overlay-button tana-overlay-button-secondary';\n  cancelButton.id = 'tana-cancel-save';\n  cancelButton.textContent = 'Cancel';\n  \n  const saveButton = document.createElement('button');\n  saveButton.type = 'button';\n  saveButton.className = 'tana-overlay-button tana-overlay-button-primary';\n  saveButton.id = 'tana-confirm-save';\n  saveButton.textContent = 'Save to Tana';\n  \n  actions.appendChild(cancelButton);\n  actions.appendChild(saveButton);\n  \n  // Assemble everything\n  content.appendChild(preview);\n  content.appendChild(notesSection);\n  content.appendChild(actions);\n  \n  dialog.appendChild(header);\n  dialog.appendChild(content);\n  \n  backdrop.appendChild(dialog);\n  container.appendChild(backdrop);\n}\n\n\n/**\n * Inject CSS styles for the overlay\n */\nfunction injectOverlayStyles(): void {\n  // Check if styles are already injected\n  if (document.getElementById('tana-overlay-styles')) {\n    return;\n  }\n\n  const styleElement = document.createElement('style');\n  styleElement.id = 'tana-overlay-styles';\n  styleElement.textContent = `\n    #tana-save-overlay {\n      position: fixed !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100% !important;\n      height: 100% !important;\n      z-index: 2147483647 !important;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Liberation Sans\", Arial, sans-serif !important;\n      font-size: 14px !important;\n      line-height: 1.5 !important;\n      color: #c9d1d9 !important;\n      box-sizing: border-box !important;\n      pointer-events: auto !important;\n    }\n    \n    #tana-save-overlay * {\n      box-sizing: border-box !important;\n    }\n    \n    .tana-overlay-backdrop {\n      position: absolute !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100% !important;\n      height: 100% !important;\n      background: rgba(0, 0, 0, 0.8) !important;\n      display: flex !important;\n      align-items: center !important;\n      justify-content: center !important;\n      padding: 20px !important;\n      box-sizing: border-box !important;\n    }\n    \n    .tana-overlay-dialog {\n      background: #161b22 !important;\n      border: 1px solid #30363d !important;\n      border-radius: 12px !important;\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5) !important;\n      width: 100% !important;\n      max-width: 540px !important;\n      max-height: 90vh !important;\n      overflow: hidden !important;\n      display: flex !important;\n      flex-direction: column !important;\n      position: relative !important;\n    }\n    \n    .tana-overlay-header {\n      display: flex !important;\n      align-items: center !important;\n      justify-content: space-between !important;\n      padding: 20px 24px 16px 24px !important;\n      border-bottom: 1px solid #30363d !important;\n      background: #0d1117 !important;\n    }\n    \n    .tana-overlay-header h2 {\n      margin: 0 !important;\n      font-size: 18px !important;\n      font-weight: 600 !important;\n      color: #f0f6fc !important;\n    }\n    \n    .tana-overlay-close {\n      background: transparent !important;\n      border: none !important;\n      color: #8b949e !important;\n      cursor: pointer !important;\n      padding: 8px !important;\n      border-radius: 6px !important;\n      display: flex !important;\n      align-items: center !important;\n      justify-content: center !important;\n      transition: all 0.2s !important;\n      margin: 0 !important;\n    }\n    \n    .tana-overlay-close:hover {\n      background: #21262d !important;\n      color: #f0f6fc !important;\n    }\n    \n    .tana-overlay-content {\n      flex: 1 !important;\n      overflow-y: auto !important;\n      padding: 24px !important;\n    }\n    \n    .tana-overlay-preview {\n      margin-bottom: 20px !important;\n      padding: 16px !important;\n      background: #0d1117 !important;\n      border: 1px solid #30363d !important;\n      border-radius: 8px !important;\n    }\n    \n    .tana-overlay-page-info {\n      display: flex !important;\n      flex-direction: column !important;\n      gap: 6px !important;\n    }\n    \n    .tana-overlay-page-title {\n      font-weight: 600 !important;\n      color: #f0f6fc !important;\n      font-size: 15px !important;\n      line-height: 1.4 !important;\n    }\n    \n    .tana-overlay-page-url {\n      color: #8b949e !important;\n      font-size: 13px !important;\n      word-break: break-all !important;\n    }\n    \n    .tana-overlay-notes-section {\n      margin-bottom: 24px !important;\n    }\n    \n    .tana-overlay-label {\n      display: block !important;\n      margin-bottom: 8px !important;\n      font-weight: 500 !important;\n      color: #c9d1d9 !important;\n      font-size: 14px !important;\n    }\n    \n    .tana-overlay-notes-input {\n      width: 100% !important;\n      background: #0d1117 !important;\n      color: #c9d1d9 !important;\n      border: 1px solid #30363d !important;\n      border-radius: 6px !important;\n      padding: 12px !important;\n      font-size: 14px !important;\n      line-height: 1.5 !important;\n      font-family: inherit !important;\n      resize: vertical !important;\n      min-height: 100px !important;\n      box-sizing: border-box !important;\n      transition: border-color 0.2s !important;\n    }\n    \n    .tana-overlay-notes-input:focus {\n      outline: none !important;\n      border-color: #8b949e !important;\n      box-shadow: 0 0 0 2px rgba(139, 148, 158, 0.3) !important;\n    }\n    \n    .tana-overlay-notes-input::placeholder {\n      color: #6e7681 !important;\n    }\n    \n    .tana-overlay-actions {\n      display: flex !important;\n      gap: 12px !important;\n      justify-content: flex-end !important;\n    }\n    \n    .tana-overlay-button {\n      border: none !important;\n      border-radius: 6px !important;\n      padding: 8px 16px !important;\n      font-size: 14px !important;\n      font-weight: 500 !important;\n      cursor: pointer !important;\n      transition: all 0.2s !important;\n      display: inline-flex !important;\n      align-items: center !important;\n      justify-content: center !important;\n      gap: 8px !important;\n      font-family: inherit !important;\n      line-height: 1.5 !important;\n      margin: 0 !important;\n    }\n    \n    .tana-overlay-button-secondary {\n      background: #21262d !important;\n      color: #f0f6fc !important;\n      border: 1px solid #30363d !important;\n    }\n    \n    .tana-overlay-button-secondary:hover {\n      background: #30363d !important;\n      border-color: #8b949e !important;\n    }\n    \n    .tana-overlay-button-primary {\n      background: #238636 !important;\n      color: #ffffff !important;\n      border: 1px solid #238636 !important;\n    }\n    \n    .tana-overlay-button-primary:hover {\n      background: #2ea043 !important;\n      border-color: #2ea043 !important;\n    }\n    \n    .tana-overlay-button-primary:disabled {\n      background: #21262d !important;\n      color: #6e7681 !important;\n      border-color: #30363d !important;\n      cursor: not-allowed !important;\n    }\n    \n    /* Toast notifications */\n    .tana-overlay-toast {\n      position: fixed !important;\n      top: 24px !important;\n      right: 24px !important;\n      background: #21262d !important;\n      color: #f0f6fc !important;\n      border: 1px solid #30363d !important;\n      border-radius: 8px !important;\n      padding: 12px 16px !important;\n      font-size: 14px !important;\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3) !important;\n      z-index: 2147483648 !important;\n      opacity: 0 !important;\n      transform: translateY(-8px) !important;\n      transition: all 0.3s ease !important;\n      pointer-events: none !important;\n      font-family: inherit !important;\n      max-width: 320px !important;\n    }\n    \n    .tana-overlay-toast.show {\n      opacity: 1 !important;\n      transform: translateY(0) !important;\n      pointer-events: auto !important;\n    }\n    \n    .tana-overlay-toast.success {\n      background: #1a7f37 !important;\n      color: #ffffff !important;\n      border-color: #238636 !important;\n    }\n    \n    .tana-overlay-toast.error {\n      background: #b62324 !important;\n      color: #ffffff !important;\n      border-color: #da3633 !important;\n    }\n    \n    /* Responsive adjustments */\n    @media (max-width: 600px) {\n      .tana-overlay-backdrop {\n        padding: 12px !important;\n      }\n      \n      .tana-overlay-dialog {\n        max-width: 100% !important;\n        margin: 0 !important;\n      }\n      \n      .tana-overlay-content {\n        padding: 20px !important;\n      }\n      \n      .tana-overlay-actions {\n        flex-direction: column !important;\n        gap: 8px !important;\n      }\n      \n      .tana-overlay-button {\n        width: 100% !important;\n      }\n    }\n  `;\n  \n  document.head.appendChild(styleElement);\n}\n\n/**\n * Set up event listeners for overlay interactions\n */\nfunction setupOverlayEventListeners(): void {\n  if (!overlayElement) return;\n\n  try {\n    // Close overlay handlers\n    const closeButton = overlayElement.querySelector('#tana-close-overlay');\n    const cancelButton = overlayElement.querySelector('#tana-cancel-save');\n    const backdrop = overlayElement.querySelector('.tana-overlay-backdrop');\n\n    if (closeButton) {\n      closeButton.addEventListener('click', hideOverlay);\n    }\n    \n    if (cancelButton) {\n      cancelButton.addEventListener('click', hideOverlay);\n    }\n    \n    if (backdrop) {\n      backdrop.addEventListener('click', (e) => {\n        if (e.target === backdrop) {\n          hideOverlay();\n        }\n      });\n    }\n\n    // Save button handler\n    const saveButton = overlayElement.querySelector('#tana-confirm-save');\n    if (saveButton) {\n      saveButton.addEventListener('click', handleSaveFromOverlay);\n    }\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', handleOverlayKeydown, true);\n  } catch (error) {\n    console.error('Error setting up overlay event listeners:', error);\n  }\n}\n\n/**\n * Handle save action from overlay\n */\nfunction handleSaveFromOverlay(): void {\n  if (!currentPageData || !overlayElement) return;\n\n  const notesInput = overlayElement.querySelector('#tana-notes-input') as HTMLTextAreaElement;\n  const notes = notesInput ? notesInput.value.trim() : '';\n\n  // Keep content separate from notes - notes will be added as direct child node\n  const saveData = {\n    ...currentPageData,\n    notes: notes || undefined  // Only include notes if they exist\n  };\n\n  // Disable save button\n  const saveButton = overlayElement.querySelector('#tana-confirm-save') as HTMLButtonElement;\n  if (saveButton) {\n    saveButton.disabled = true;\n    saveButton.textContent = 'Saving...';\n  }\n\n  // Send save request\n  chrome.runtime.sendMessage({\n    action: 'saveToTana',\n    data: saveData\n  }, (response) => {\n    if (response && response.success) {\n      hideOverlay();\n      showToast('Page saved to Tana successfully!', 'success');\n    } else {\n      // Re-enable save button on error\n      if (saveButton) {\n        saveButton.disabled = false;\n        saveButton.textContent = 'Save to Tana';\n      }\n      showToast(response?.error || 'Save failed', 'error');\n    }\n  });\n}\n\n/**\n * Handle keyboard shortcuts in overlay\n */\nfunction handleOverlayKeydown(e: KeyboardEvent): void {\n  if (!overlayElement) return;\n\n  // Escape key closes overlay\n  if (e.key === 'Escape') {\n    e.preventDefault();\n    e.stopPropagation();\n    hideOverlay();\n  }\n\n  // Ctrl/Cmd + Enter saves\n  if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\n    e.preventDefault();\n    e.stopPropagation();\n    handleSaveFromOverlay();\n  }\n}\n\n/**\n * Show a toast notification\n */\nfunction showToast(message: string, type: 'success' | 'error' = 'success'): void {\n  // Remove existing toast\n  const existingToast = document.querySelector('.tana-overlay-toast');\n  if (existingToast) {\n    existingToast.remove();\n  }\n\n  const toast = document.createElement('div');\n  toast.className = `tana-overlay-toast ${type}`;\n  toast.textContent = message;\n  \n  document.body.appendChild(toast);\n  \n  // Show toast\n  setTimeout(() => {\n    toast.classList.add('show');\n  }, 10);\n  \n  // Hide toast after 3 seconds\n  setTimeout(() => {\n    toast.classList.remove('show');\n    setTimeout(() => {\n      if (toast.parentNode) {\n        toast.remove();\n      }\n    }, 300);\n  }, 3000);\n}\n\n\n/**\n * Clean up overlay when page unloads\n */\nwindow.addEventListener('beforeunload', () => {\n  hideOverlay();\n  document.removeEventListener('keydown', handleOverlayKeydown, true);\n});\n"],"names":["overlayElement","currentPageData","request","sender","sendResponse","options","pageData","extractAuthor","extractDescription","extractMainContent","error","showOverlay","mainElement","content","MAX_CONTENT_LENGTH","authorSelectors","selector","metaTag","schemaSelectors","element","bylineSelectors","descriptionSelectors","hideOverlay","createOverlayStructure","injectOverlayStyles","setupOverlayEventListeners","notesTextarea","handleOverlayKeydown","styleElement","container","truncatedTitle","truncatedUrl","backdrop","dialog","header","title","closeButton","svg","path","preview","pageInfo","pageTitle","pageUrl","notesSection","label","textarea","actions","cancelButton","saveButton","e","handleSaveFromOverlay","notesInput","notes","saveData","response","showToast","message","type","existingToast","toast"],"mappings":"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"}