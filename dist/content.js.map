{"version":3,"file":"content.js","sources":["../node_modules/@mozilla/readability/Readability.js","../node_modules/@mozilla/readability/Readability-readerable.js","../node_modules/@mozilla/readability/index.js","../src/utils/extractContentForTana.ts","../src/content.ts"],"sourcesContent":["/*\n * Copyright (c) 2010 Arc90 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This code is heavily based on Arc90's readability.js (1.7.1) script\n * available at: http://code.google.com/p/arc90labs-readability\n */\n\n/**\n * Public constructor.\n * @param {HTMLDocument} doc     The document to parse.\n * @param {Object}       options The options object.\n */\nfunction Readability(doc, options) {\n  // In some older versions, people passed a URI as the first argument. Cope:\n  if (options && options.documentElement) {\n    doc = options;\n    options = arguments[2];\n  } else if (!doc || !doc.documentElement) {\n    throw new Error(\n      \"First argument to Readability constructor should be a document object.\"\n    );\n  }\n  options = options || {};\n\n  this._doc = doc;\n  this._docJSDOMParser = this._doc.firstChild.__JSDOMParser__;\n  this._articleTitle = null;\n  this._articleByline = null;\n  this._articleDir = null;\n  this._articleSiteName = null;\n  this._attempts = [];\n  this._metadata = {};\n\n  // Configurable options\n  this._debug = !!options.debug;\n  this._maxElemsToParse =\n    options.maxElemsToParse || this.DEFAULT_MAX_ELEMS_TO_PARSE;\n  this._nbTopCandidates =\n    options.nbTopCandidates || this.DEFAULT_N_TOP_CANDIDATES;\n  this._charThreshold = options.charThreshold || this.DEFAULT_CHAR_THRESHOLD;\n  this._classesToPreserve = this.CLASSES_TO_PRESERVE.concat(\n    options.classesToPreserve || []\n  );\n  this._keepClasses = !!options.keepClasses;\n  this._serializer =\n    options.serializer ||\n    function (el) {\n      return el.innerHTML;\n    };\n  this._disableJSONLD = !!options.disableJSONLD;\n  this._allowedVideoRegex = options.allowedVideoRegex || this.REGEXPS.videos;\n  this._linkDensityModifier = options.linkDensityModifier || 0;\n\n  // Start with all flags set\n  this._flags =\n    this.FLAG_STRIP_UNLIKELYS |\n    this.FLAG_WEIGHT_CLASSES |\n    this.FLAG_CLEAN_CONDITIONALLY;\n\n  // Control whether log messages are sent to the console\n  if (this._debug) {\n    let logNode = function (node) {\n      if (node.nodeType == node.TEXT_NODE) {\n        return `${node.nodeName} (\"${node.textContent}\")`;\n      }\n      let attrPairs = Array.from(node.attributes || [], function (attr) {\n        return `${attr.name}=\"${attr.value}\"`;\n      }).join(\" \");\n      return `<${node.localName} ${attrPairs}>`;\n    };\n    this.log = function () {\n      if (typeof console !== \"undefined\") {\n        let args = Array.from(arguments, arg => {\n          if (arg && arg.nodeType == this.ELEMENT_NODE) {\n            return logNode(arg);\n          }\n          return arg;\n        });\n        args.unshift(\"Reader: (Readability)\");\n        // eslint-disable-next-line no-console\n        console.log(...args);\n      } else if (typeof dump !== \"undefined\") {\n        /* global dump */\n        var msg = Array.prototype.map\n          .call(arguments, function (x) {\n            return x && x.nodeName ? logNode(x) : x;\n          })\n          .join(\" \");\n        dump(\"Reader: (Readability) \" + msg + \"\\n\");\n      }\n    };\n  } else {\n    this.log = function () {};\n  }\n}\n\nReadability.prototype = {\n  FLAG_STRIP_UNLIKELYS: 0x1,\n  FLAG_WEIGHT_CLASSES: 0x2,\n  FLAG_CLEAN_CONDITIONALLY: 0x4,\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n  ELEMENT_NODE: 1,\n  TEXT_NODE: 3,\n\n  // Max number of nodes supported by this parser. Default: 0 (no limit)\n  DEFAULT_MAX_ELEMS_TO_PARSE: 0,\n\n  // The number of top candidates to consider when analysing how\n  // tight the competition is among candidates.\n  DEFAULT_N_TOP_CANDIDATES: 5,\n\n  // Element tags to score by default.\n  DEFAULT_TAGS_TO_SCORE: \"section,h2,h3,h4,h5,h6,p,td,pre\"\n    .toUpperCase()\n    .split(\",\"),\n\n  // The default number of chars an article must have in order to return a result\n  DEFAULT_CHAR_THRESHOLD: 500,\n\n  // All of the regular expressions in use within readability.\n  // Defined up here so we don't instantiate them repeatedly in loops.\n  REGEXPS: {\n    // NOTE: These two regular expressions are duplicated in\n    // Readability-readerable.js. Please keep both copies in sync.\n    unlikelyCandidates:\n      /-ad-|ai2html|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|footer|gdpr|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,\n    okMaybeItsACandidate: /and|article|body|column|content|main|shadow/i,\n\n    positive:\n      /article|body|content|entry|hentry|h-entry|main|page|pagination|post|text|blog|story/i,\n    negative:\n      /-ad-|hidden|^hid$| hid$| hid |^hid |banner|combx|comment|com-|contact|footer|gdpr|masthead|media|meta|outbrain|promo|related|scroll|share|shoutbox|sidebar|skyscraper|sponsor|shopping|tags|widget/i,\n    extraneous:\n      /print|archive|comment|discuss|e[\\-]?mail|share|reply|all|login|sign|single|utility/i,\n    byline: /byline|author|dateline|writtenby|p-author/i,\n    replaceFonts: /<(\\/?)font[^>]*>/gi,\n    normalize: /\\s{2,}/g,\n    videos:\n      /\\/\\/(www\\.)?((dailymotion|youtube|youtube-nocookie|player\\.vimeo|v\\.qq)\\.com|(archive|upload\\.wikimedia)\\.org|player\\.twitch\\.tv)/i,\n    shareElements: /(\\b|_)(share|sharedaddy)(\\b|_)/i,\n    nextLink: /(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))/i,\n    prevLink: /(prev|earl|old|new|<|«)/i,\n    tokenize: /\\W+/g,\n    whitespace: /^\\s*$/,\n    hasContent: /\\S$/,\n    hashUrl: /^#.+/,\n    srcsetUrl: /(\\S+)(\\s+[\\d.]+[xw])?(\\s*(?:,|$))/g,\n    b64DataUrl: /^data:\\s*([^\\s;,]+)\\s*;\\s*base64\\s*,/i,\n    // Commas as used in Latin, Sindhi, Chinese and various other scripts.\n    // see: https://en.wikipedia.org/wiki/Comma#Comma_variants\n    commas: /\\u002C|\\u060C|\\uFE50|\\uFE10|\\uFE11|\\u2E41|\\u2E34|\\u2E32|\\uFF0C/g,\n    // See: https://schema.org/Article\n    jsonLdArticleTypes:\n      /^Article|AdvertiserContentArticle|NewsArticle|AnalysisNewsArticle|AskPublicNewsArticle|BackgroundNewsArticle|OpinionNewsArticle|ReportageNewsArticle|ReviewNewsArticle|Report|SatiricalArticle|ScholarlyArticle|MedicalScholarlyArticle|SocialMediaPosting|BlogPosting|LiveBlogPosting|DiscussionForumPosting|TechArticle|APIReference$/,\n    // used to see if a node's content matches words commonly used for ad blocks or loading indicators\n    adWords:\n      /^(ad(vertising|vertisement)?|pub(licité)?|werb(ung)?|广告|Реклама|Anuncio)$/iu,\n    loadingWords:\n      /^((loading|正在加载|Загрузка|chargement|cargando)(…|\\.\\.\\.)?)$/iu,\n  },\n\n  UNLIKELY_ROLES: [\n    \"menu\",\n    \"menubar\",\n    \"complementary\",\n    \"navigation\",\n    \"alert\",\n    \"alertdialog\",\n    \"dialog\",\n  ],\n\n  DIV_TO_P_ELEMS: new Set([\n    \"BLOCKQUOTE\",\n    \"DL\",\n    \"DIV\",\n    \"IMG\",\n    \"OL\",\n    \"P\",\n    \"PRE\",\n    \"TABLE\",\n    \"UL\",\n  ]),\n\n  ALTER_TO_DIV_EXCEPTIONS: [\"DIV\", \"ARTICLE\", \"SECTION\", \"P\", \"OL\", \"UL\"],\n\n  PRESENTATIONAL_ATTRIBUTES: [\n    \"align\",\n    \"background\",\n    \"bgcolor\",\n    \"border\",\n    \"cellpadding\",\n    \"cellspacing\",\n    \"frame\",\n    \"hspace\",\n    \"rules\",\n    \"style\",\n    \"valign\",\n    \"vspace\",\n  ],\n\n  DEPRECATED_SIZE_ATTRIBUTE_ELEMS: [\"TABLE\", \"TH\", \"TD\", \"HR\", \"PRE\"],\n\n  // The commented out elements qualify as phrasing content but tend to be\n  // removed by readability when put into paragraphs, so we ignore them here.\n  PHRASING_ELEMS: [\n    // \"CANVAS\", \"IFRAME\", \"SVG\", \"VIDEO\",\n    \"ABBR\",\n    \"AUDIO\",\n    \"B\",\n    \"BDO\",\n    \"BR\",\n    \"BUTTON\",\n    \"CITE\",\n    \"CODE\",\n    \"DATA\",\n    \"DATALIST\",\n    \"DFN\",\n    \"EM\",\n    \"EMBED\",\n    \"I\",\n    \"IMG\",\n    \"INPUT\",\n    \"KBD\",\n    \"LABEL\",\n    \"MARK\",\n    \"MATH\",\n    \"METER\",\n    \"NOSCRIPT\",\n    \"OBJECT\",\n    \"OUTPUT\",\n    \"PROGRESS\",\n    \"Q\",\n    \"RUBY\",\n    \"SAMP\",\n    \"SCRIPT\",\n    \"SELECT\",\n    \"SMALL\",\n    \"SPAN\",\n    \"STRONG\",\n    \"SUB\",\n    \"SUP\",\n    \"TEXTAREA\",\n    \"TIME\",\n    \"VAR\",\n    \"WBR\",\n  ],\n\n  // These are the classes that readability sets itself.\n  CLASSES_TO_PRESERVE: [\"page\"],\n\n  // These are the list of HTML entities that need to be escaped.\n  HTML_ESCAPE_MAP: {\n    lt: \"<\",\n    gt: \">\",\n    amp: \"&\",\n    quot: '\"',\n    apos: \"'\",\n  },\n\n  /**\n   * Run any post-process modifications to article content as necessary.\n   *\n   * @param Element\n   * @return void\n   **/\n  _postProcessContent(articleContent) {\n    // Readability cannot open relative uris so we convert them to absolute uris.\n    this._fixRelativeUris(articleContent);\n\n    this._simplifyNestedElements(articleContent);\n\n    if (!this._keepClasses) {\n      // Remove classes.\n      this._cleanClasses(articleContent);\n    }\n  },\n\n  /**\n   * Iterates over a NodeList, calls `filterFn` for each node and removes node\n   * if function returned `true`.\n   *\n   * If function is not passed, removes all the nodes in node list.\n   *\n   * @param NodeList nodeList The nodes to operate on\n   * @param Function filterFn the function to use as a filter\n   * @return void\n   */\n  _removeNodes(nodeList, filterFn) {\n    // Avoid ever operating on live node lists.\n    if (this._docJSDOMParser && nodeList._isLiveNodeList) {\n      throw new Error(\"Do not pass live node lists to _removeNodes\");\n    }\n    for (var i = nodeList.length - 1; i >= 0; i--) {\n      var node = nodeList[i];\n      var parentNode = node.parentNode;\n      if (parentNode) {\n        if (!filterFn || filterFn.call(this, node, i, nodeList)) {\n          parentNode.removeChild(node);\n        }\n      }\n    }\n  },\n\n  /**\n   * Iterates over a NodeList, and calls _setNodeTag for each node.\n   *\n   * @param NodeList nodeList The nodes to operate on\n   * @param String newTagName the new tag name to use\n   * @return void\n   */\n  _replaceNodeTags(nodeList, newTagName) {\n    // Avoid ever operating on live node lists.\n    if (this._docJSDOMParser && nodeList._isLiveNodeList) {\n      throw new Error(\"Do not pass live node lists to _replaceNodeTags\");\n    }\n    for (const node of nodeList) {\n      this._setNodeTag(node, newTagName);\n    }\n  },\n\n  /**\n   * Iterate over a NodeList, which doesn't natively fully implement the Array\n   * interface.\n   *\n   * For convenience, the current object context is applied to the provided\n   * iterate function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The iterate function.\n   * @return void\n   */\n  _forEachNode(nodeList, fn) {\n    Array.prototype.forEach.call(nodeList, fn, this);\n  },\n\n  /**\n   * Iterate over a NodeList, and return the first node that passes\n   * the supplied test function\n   *\n   * For convenience, the current object context is applied to the provided\n   * test function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The test function.\n   * @return void\n   */\n  _findNode(nodeList, fn) {\n    return Array.prototype.find.call(nodeList, fn, this);\n  },\n\n  /**\n   * Iterate over a NodeList, return true if any of the provided iterate\n   * function calls returns true, false otherwise.\n   *\n   * For convenience, the current object context is applied to the\n   * provided iterate function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The iterate function.\n   * @return Boolean\n   */\n  _someNode(nodeList, fn) {\n    return Array.prototype.some.call(nodeList, fn, this);\n  },\n\n  /**\n   * Iterate over a NodeList, return true if all of the provided iterate\n   * function calls return true, false otherwise.\n   *\n   * For convenience, the current object context is applied to the\n   * provided iterate function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The iterate function.\n   * @return Boolean\n   */\n  _everyNode(nodeList, fn) {\n    return Array.prototype.every.call(nodeList, fn, this);\n  },\n\n  _getAllNodesWithTag(node, tagNames) {\n    if (node.querySelectorAll) {\n      return node.querySelectorAll(tagNames.join(\",\"));\n    }\n    return [].concat.apply(\n      [],\n      tagNames.map(function (tag) {\n        var collection = node.getElementsByTagName(tag);\n        return Array.isArray(collection) ? collection : Array.from(collection);\n      })\n    );\n  },\n\n  /**\n   * Removes the class=\"\" attribute from every element in the given\n   * subtree, except those that match CLASSES_TO_PRESERVE and\n   * the classesToPreserve array from the options object.\n   *\n   * @param Element\n   * @return void\n   */\n  _cleanClasses(node) {\n    var classesToPreserve = this._classesToPreserve;\n    var className = (node.getAttribute(\"class\") || \"\")\n      .split(/\\s+/)\n      .filter(cls => classesToPreserve.includes(cls))\n      .join(\" \");\n\n    if (className) {\n      node.setAttribute(\"class\", className);\n    } else {\n      node.removeAttribute(\"class\");\n    }\n\n    for (node = node.firstElementChild; node; node = node.nextElementSibling) {\n      this._cleanClasses(node);\n    }\n  },\n\n  /**\n   * Tests whether a string is a URL or not.\n   *\n   * @param {string} str The string to test\n   * @return {boolean} true if str is a URL, false if not\n   */\n  _isUrl(str) {\n    try {\n      new URL(str);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  /**\n   * Converts each <a> and <img> uri in the given element to an absolute URI,\n   * ignoring #ref URIs.\n   *\n   * @param Element\n   * @return void\n   */\n  _fixRelativeUris(articleContent) {\n    var baseURI = this._doc.baseURI;\n    var documentURI = this._doc.documentURI;\n    function toAbsoluteURI(uri) {\n      // Leave hash links alone if the base URI matches the document URI:\n      if (baseURI == documentURI && uri.charAt(0) == \"#\") {\n        return uri;\n      }\n\n      // Otherwise, resolve against base URI:\n      try {\n        return new URL(uri, baseURI).href;\n      } catch (ex) {\n        // Something went wrong, just return the original:\n      }\n      return uri;\n    }\n\n    var links = this._getAllNodesWithTag(articleContent, [\"a\"]);\n    this._forEachNode(links, function (link) {\n      var href = link.getAttribute(\"href\");\n      if (href) {\n        // Remove links with javascript: URIs, since\n        // they won't work after scripts have been removed from the page.\n        if (href.indexOf(\"javascript:\") === 0) {\n          // if the link only contains simple text content, it can be converted to a text node\n          if (\n            link.childNodes.length === 1 &&\n            link.childNodes[0].nodeType === this.TEXT_NODE\n          ) {\n            var text = this._doc.createTextNode(link.textContent);\n            link.parentNode.replaceChild(text, link);\n          } else {\n            // if the link has multiple children, they should all be preserved\n            var container = this._doc.createElement(\"span\");\n            while (link.firstChild) {\n              container.appendChild(link.firstChild);\n            }\n            link.parentNode.replaceChild(container, link);\n          }\n        } else {\n          link.setAttribute(\"href\", toAbsoluteURI(href));\n        }\n      }\n    });\n\n    var medias = this._getAllNodesWithTag(articleContent, [\n      \"img\",\n      \"picture\",\n      \"figure\",\n      \"video\",\n      \"audio\",\n      \"source\",\n    ]);\n\n    this._forEachNode(medias, function (media) {\n      var src = media.getAttribute(\"src\");\n      var poster = media.getAttribute(\"poster\");\n      var srcset = media.getAttribute(\"srcset\");\n\n      if (src) {\n        media.setAttribute(\"src\", toAbsoluteURI(src));\n      }\n\n      if (poster) {\n        media.setAttribute(\"poster\", toAbsoluteURI(poster));\n      }\n\n      if (srcset) {\n        var newSrcset = srcset.replace(\n          this.REGEXPS.srcsetUrl,\n          function (_, p1, p2, p3) {\n            return toAbsoluteURI(p1) + (p2 || \"\") + p3;\n          }\n        );\n\n        media.setAttribute(\"srcset\", newSrcset);\n      }\n    });\n  },\n\n  _simplifyNestedElements(articleContent) {\n    var node = articleContent;\n\n    while (node) {\n      if (\n        node.parentNode &&\n        [\"DIV\", \"SECTION\"].includes(node.tagName) &&\n        !(node.id && node.id.startsWith(\"readability\"))\n      ) {\n        if (this._isElementWithoutContent(node)) {\n          node = this._removeAndGetNext(node);\n          continue;\n        } else if (\n          this._hasSingleTagInsideElement(node, \"DIV\") ||\n          this._hasSingleTagInsideElement(node, \"SECTION\")\n        ) {\n          var child = node.children[0];\n          for (var i = 0; i < node.attributes.length; i++) {\n            child.setAttributeNode(node.attributes[i].cloneNode());\n          }\n          node.parentNode.replaceChild(child, node);\n          node = child;\n          continue;\n        }\n      }\n\n      node = this._getNextNode(node);\n    }\n  },\n\n  /**\n   * Get the article title as an H1.\n   *\n   * @return string\n   **/\n  _getArticleTitle() {\n    var doc = this._doc;\n    var curTitle = \"\";\n    var origTitle = \"\";\n\n    try {\n      curTitle = origTitle = doc.title.trim();\n\n      // If they had an element with id \"title\" in their HTML\n      if (typeof curTitle !== \"string\") {\n        curTitle = origTitle = this._getInnerText(\n          doc.getElementsByTagName(\"title\")[0]\n        );\n      }\n    } catch (e) {\n      /* ignore exceptions setting the title. */\n    }\n\n    var titleHadHierarchicalSeparators = false;\n    function wordCount(str) {\n      return str.split(/\\s+/).length;\n    }\n\n    // If there's a separator in the title, first remove the final part\n    if (/ [\\|\\-\\\\\\/>»] /.test(curTitle)) {\n      titleHadHierarchicalSeparators = / [\\\\\\/>»] /.test(curTitle);\n      let allSeparators = Array.from(origTitle.matchAll(/ [\\|\\-\\\\\\/>»] /gi));\n      curTitle = origTitle.substring(0, allSeparators.pop().index);\n\n      // If the resulting title is too short, remove the first part instead:\n      if (wordCount(curTitle) < 3) {\n        curTitle = origTitle.replace(/^[^\\|\\-\\\\\\/>»]*[\\|\\-\\\\\\/>»]/gi, \"\");\n      }\n    } else if (curTitle.includes(\": \")) {\n      // Check if we have an heading containing this exact string, so we\n      // could assume it's the full title.\n      var headings = this._getAllNodesWithTag(doc, [\"h1\", \"h2\"]);\n      var trimmedTitle = curTitle.trim();\n      var match = this._someNode(headings, function (heading) {\n        return heading.textContent.trim() === trimmedTitle;\n      });\n\n      // If we don't, let's extract the title out of the original title string.\n      if (!match) {\n        curTitle = origTitle.substring(origTitle.lastIndexOf(\":\") + 1);\n\n        // If the title is now too short, try the first colon instead:\n        if (wordCount(curTitle) < 3) {\n          curTitle = origTitle.substring(origTitle.indexOf(\":\") + 1);\n          // But if we have too many words before the colon there's something weird\n          // with the titles and the H tags so let's just use the original title instead\n        } else if (wordCount(origTitle.substr(0, origTitle.indexOf(\":\"))) > 5) {\n          curTitle = origTitle;\n        }\n      }\n    } else if (curTitle.length > 150 || curTitle.length < 15) {\n      var hOnes = doc.getElementsByTagName(\"h1\");\n\n      if (hOnes.length === 1) {\n        curTitle = this._getInnerText(hOnes[0]);\n      }\n    }\n\n    curTitle = curTitle.trim().replace(this.REGEXPS.normalize, \" \");\n    // If we now have 4 words or fewer as our title, and either no\n    // 'hierarchical' separators (\\, /, > or ») were found in the original\n    // title or we decreased the number of words by more than 1 word, use\n    // the original title.\n    var curTitleWordCount = wordCount(curTitle);\n    if (\n      curTitleWordCount <= 4 &&\n      (!titleHadHierarchicalSeparators ||\n        curTitleWordCount !=\n          wordCount(origTitle.replace(/[\\|\\-\\\\\\/>»]+/g, \"\")) - 1)\n    ) {\n      curTitle = origTitle;\n    }\n\n    return curTitle;\n  },\n\n  /**\n   * Prepare the HTML document for readability to scrape it.\n   * This includes things like stripping javascript, CSS, and handling terrible markup.\n   *\n   * @return void\n   **/\n  _prepDocument() {\n    var doc = this._doc;\n\n    // Remove all style tags in head\n    this._removeNodes(this._getAllNodesWithTag(doc, [\"style\"]));\n\n    if (doc.body) {\n      this._replaceBrs(doc.body);\n    }\n\n    this._replaceNodeTags(this._getAllNodesWithTag(doc, [\"font\"]), \"SPAN\");\n  },\n\n  /**\n   * Finds the next node, starting from the given node, and ignoring\n   * whitespace in between. If the given node is an element, the same node is\n   * returned.\n   */\n  _nextNode(node) {\n    var next = node;\n    while (\n      next &&\n      next.nodeType != this.ELEMENT_NODE &&\n      this.REGEXPS.whitespace.test(next.textContent)\n    ) {\n      next = next.nextSibling;\n    }\n    return next;\n  },\n\n  /**\n   * Replaces 2 or more successive <br> elements with a single <p>.\n   * Whitespace between <br> elements are ignored. For example:\n   *   <div>foo<br>bar<br> <br><br>abc</div>\n   * will become:\n   *   <div>foo<br>bar<p>abc</p></div>\n   */\n  _replaceBrs(elem) {\n    this._forEachNode(this._getAllNodesWithTag(elem, [\"br\"]), function (br) {\n      var next = br.nextSibling;\n\n      // Whether 2 or more <br> elements have been found and replaced with a\n      // <p> block.\n      var replaced = false;\n\n      // If we find a <br> chain, remove the <br>s until we hit another node\n      // or non-whitespace. This leaves behind the first <br> in the chain\n      // (which will be replaced with a <p> later).\n      while ((next = this._nextNode(next)) && next.tagName == \"BR\") {\n        replaced = true;\n        var brSibling = next.nextSibling;\n        next.remove();\n        next = brSibling;\n      }\n\n      // If we removed a <br> chain, replace the remaining <br> with a <p>. Add\n      // all sibling nodes as children of the <p> until we hit another <br>\n      // chain.\n      if (replaced) {\n        var p = this._doc.createElement(\"p\");\n        br.parentNode.replaceChild(p, br);\n\n        next = p.nextSibling;\n        while (next) {\n          // If we've hit another <br><br>, we're done adding children to this <p>.\n          if (next.tagName == \"BR\") {\n            var nextElem = this._nextNode(next.nextSibling);\n            if (nextElem && nextElem.tagName == \"BR\") {\n              break;\n            }\n          }\n\n          if (!this._isPhrasingContent(next)) {\n            break;\n          }\n\n          // Otherwise, make this node a child of the new <p>.\n          var sibling = next.nextSibling;\n          p.appendChild(next);\n          next = sibling;\n        }\n\n        while (p.lastChild && this._isWhitespace(p.lastChild)) {\n          p.lastChild.remove();\n        }\n\n        if (p.parentNode.tagName === \"P\") {\n          this._setNodeTag(p.parentNode, \"DIV\");\n        }\n      }\n    });\n  },\n\n  _setNodeTag(node, tag) {\n    this.log(\"_setNodeTag\", node, tag);\n    if (this._docJSDOMParser) {\n      node.localName = tag.toLowerCase();\n      node.tagName = tag.toUpperCase();\n      return node;\n    }\n\n    var replacement = node.ownerDocument.createElement(tag);\n    while (node.firstChild) {\n      replacement.appendChild(node.firstChild);\n    }\n    node.parentNode.replaceChild(replacement, node);\n    if (node.readability) {\n      replacement.readability = node.readability;\n    }\n\n    for (var i = 0; i < node.attributes.length; i++) {\n      replacement.setAttributeNode(node.attributes[i].cloneNode());\n    }\n    return replacement;\n  },\n\n  /**\n   * Prepare the article node for display. Clean out any inline styles,\n   * iframes, forms, strip extraneous <p> tags, etc.\n   *\n   * @param Element\n   * @return void\n   **/\n  _prepArticle(articleContent) {\n    this._cleanStyles(articleContent);\n\n    // Check for data tables before we continue, to avoid removing items in\n    // those tables, which will often be isolated even though they're\n    // visually linked to other content-ful elements (text, images, etc.).\n    this._markDataTables(articleContent);\n\n    this._fixLazyImages(articleContent);\n\n    // Clean out junk from the article content\n    this._cleanConditionally(articleContent, \"form\");\n    this._cleanConditionally(articleContent, \"fieldset\");\n    this._clean(articleContent, \"object\");\n    this._clean(articleContent, \"embed\");\n    this._clean(articleContent, \"footer\");\n    this._clean(articleContent, \"link\");\n    this._clean(articleContent, \"aside\");\n\n    // Clean out elements with little content that have \"share\" in their id/class combinations from final top candidates,\n    // which means we don't remove the top candidates even they have \"share\".\n\n    var shareElementThreshold = this.DEFAULT_CHAR_THRESHOLD;\n\n    this._forEachNode(articleContent.children, function (topCandidate) {\n      this._cleanMatchedNodes(topCandidate, function (node, matchString) {\n        return (\n          this.REGEXPS.shareElements.test(matchString) &&\n          node.textContent.length < shareElementThreshold\n        );\n      });\n    });\n\n    this._clean(articleContent, \"iframe\");\n    this._clean(articleContent, \"input\");\n    this._clean(articleContent, \"textarea\");\n    this._clean(articleContent, \"select\");\n    this._clean(articleContent, \"button\");\n    this._cleanHeaders(articleContent);\n\n    // Do these last as the previous stuff may have removed junk\n    // that will affect these\n    this._cleanConditionally(articleContent, \"table\");\n    this._cleanConditionally(articleContent, \"ul\");\n    this._cleanConditionally(articleContent, \"div\");\n\n    // replace H1 with H2 as H1 should be only title that is displayed separately\n    this._replaceNodeTags(\n      this._getAllNodesWithTag(articleContent, [\"h1\"]),\n      \"h2\"\n    );\n\n    // Remove extra paragraphs\n    this._removeNodes(\n      this._getAllNodesWithTag(articleContent, [\"p\"]),\n      function (paragraph) {\n        // At this point, nasty iframes have been removed; only embedded video\n        // ones remain.\n        var contentElementCount = this._getAllNodesWithTag(paragraph, [\n          \"img\",\n          \"embed\",\n          \"object\",\n          \"iframe\",\n        ]).length;\n        return (\n          contentElementCount === 0 && !this._getInnerText(paragraph, false)\n        );\n      }\n    );\n\n    this._forEachNode(\n      this._getAllNodesWithTag(articleContent, [\"br\"]),\n      function (br) {\n        var next = this._nextNode(br.nextSibling);\n        if (next && next.tagName == \"P\") {\n          br.remove();\n        }\n      }\n    );\n\n    // Remove single-cell tables\n    this._forEachNode(\n      this._getAllNodesWithTag(articleContent, [\"table\"]),\n      function (table) {\n        var tbody = this._hasSingleTagInsideElement(table, \"TBODY\")\n          ? table.firstElementChild\n          : table;\n        if (this._hasSingleTagInsideElement(tbody, \"TR\")) {\n          var row = tbody.firstElementChild;\n          if (this._hasSingleTagInsideElement(row, \"TD\")) {\n            var cell = row.firstElementChild;\n            cell = this._setNodeTag(\n              cell,\n              this._everyNode(cell.childNodes, this._isPhrasingContent)\n                ? \"P\"\n                : \"DIV\"\n            );\n            table.parentNode.replaceChild(cell, table);\n          }\n        }\n      }\n    );\n  },\n\n  /**\n   * Initialize a node with the readability object. Also checks the\n   * className/id for special names to add to its score.\n   *\n   * @param Element\n   * @return void\n   **/\n  _initializeNode(node) {\n    node.readability = { contentScore: 0 };\n\n    switch (node.tagName) {\n      case \"DIV\":\n        node.readability.contentScore += 5;\n        break;\n\n      case \"PRE\":\n      case \"TD\":\n      case \"BLOCKQUOTE\":\n        node.readability.contentScore += 3;\n        break;\n\n      case \"ADDRESS\":\n      case \"OL\":\n      case \"UL\":\n      case \"DL\":\n      case \"DD\":\n      case \"DT\":\n      case \"LI\":\n      case \"FORM\":\n        node.readability.contentScore -= 3;\n        break;\n\n      case \"H1\":\n      case \"H2\":\n      case \"H3\":\n      case \"H4\":\n      case \"H5\":\n      case \"H6\":\n      case \"TH\":\n        node.readability.contentScore -= 5;\n        break;\n    }\n\n    node.readability.contentScore += this._getClassWeight(node);\n  },\n\n  _removeAndGetNext(node) {\n    var nextNode = this._getNextNode(node, true);\n    node.remove();\n    return nextNode;\n  },\n\n  /**\n   * Traverse the DOM from node to node, starting at the node passed in.\n   * Pass true for the second parameter to indicate this node itself\n   * (and its kids) are going away, and we want the next node over.\n   *\n   * Calling this in a loop will traverse the DOM depth-first.\n   *\n   * @param {Element} node\n   * @param {boolean} ignoreSelfAndKids\n   * @return {Element}\n   */\n  _getNextNode(node, ignoreSelfAndKids) {\n    // First check for kids if those aren't being ignored\n    if (!ignoreSelfAndKids && node.firstElementChild) {\n      return node.firstElementChild;\n    }\n    // Then for siblings...\n    if (node.nextElementSibling) {\n      return node.nextElementSibling;\n    }\n    // And finally, move up the parent chain *and* find a sibling\n    // (because this is depth-first traversal, we will have already\n    // seen the parent nodes themselves).\n    do {\n      node = node.parentNode;\n    } while (node && !node.nextElementSibling);\n    return node && node.nextElementSibling;\n  },\n\n  // compares second text to first one\n  // 1 = same text, 0 = completely different text\n  // works the way that it splits both texts into words and then finds words that are unique in second text\n  // the result is given by the lower length of unique parts\n  _textSimilarity(textA, textB) {\n    var tokensA = textA\n      .toLowerCase()\n      .split(this.REGEXPS.tokenize)\n      .filter(Boolean);\n    var tokensB = textB\n      .toLowerCase()\n      .split(this.REGEXPS.tokenize)\n      .filter(Boolean);\n    if (!tokensA.length || !tokensB.length) {\n      return 0;\n    }\n    var uniqTokensB = tokensB.filter(token => !tokensA.includes(token));\n    var distanceB = uniqTokensB.join(\" \").length / tokensB.join(\" \").length;\n    return 1 - distanceB;\n  },\n\n  /**\n   * Checks whether an element node contains a valid byline\n   *\n   * @param node {Element}\n   * @param matchString {string}\n   * @return boolean\n   */\n  _isValidByline(node, matchString) {\n    var rel = node.getAttribute(\"rel\");\n    var itemprop = node.getAttribute(\"itemprop\");\n    var bylineLength = node.textContent.trim().length;\n\n    return (\n      (rel === \"author\" ||\n        (itemprop && itemprop.includes(\"author\")) ||\n        this.REGEXPS.byline.test(matchString)) &&\n      !!bylineLength &&\n      bylineLength < 100\n    );\n  },\n\n  _getNodeAncestors(node, maxDepth) {\n    maxDepth = maxDepth || 0;\n    var i = 0,\n      ancestors = [];\n    while (node.parentNode) {\n      ancestors.push(node.parentNode);\n      if (maxDepth && ++i === maxDepth) {\n        break;\n      }\n      node = node.parentNode;\n    }\n    return ancestors;\n  },\n\n  /***\n   * grabArticle - Using a variety of metrics (content score, classname, element types), find the content that is\n   *         most likely to be the stuff a user wants to read. Then return it wrapped up in a div.\n   *\n   * @param page a document to run upon. Needs to be a full document, complete with body.\n   * @return Element\n   **/\n  /* eslint-disable-next-line complexity */\n  _grabArticle(page) {\n    this.log(\"**** grabArticle ****\");\n    var doc = this._doc;\n    var isPaging = page !== null;\n    page = page ? page : this._doc.body;\n\n    // We can't grab an article if we don't have a page!\n    if (!page) {\n      this.log(\"No body found in document. Abort.\");\n      return null;\n    }\n\n    var pageCacheHtml = page.innerHTML;\n\n    while (true) {\n      this.log(\"Starting grabArticle loop\");\n      var stripUnlikelyCandidates = this._flagIsActive(\n        this.FLAG_STRIP_UNLIKELYS\n      );\n\n      // First, node prepping. Trash nodes that look cruddy (like ones with the\n      // class name \"comment\", etc), and turn divs into P tags where they have been\n      // used inappropriately (as in, where they contain no other block level elements.)\n      var elementsToScore = [];\n      var node = this._doc.documentElement;\n\n      let shouldRemoveTitleHeader = true;\n\n      while (node) {\n        if (node.tagName === \"HTML\") {\n          this._articleLang = node.getAttribute(\"lang\");\n        }\n\n        var matchString = node.className + \" \" + node.id;\n\n        if (!this._isProbablyVisible(node)) {\n          this.log(\"Removing hidden node - \" + matchString);\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        // User is not able to see elements applied with both \"aria-modal = true\" and \"role = dialog\"\n        if (\n          node.getAttribute(\"aria-modal\") == \"true\" &&\n          node.getAttribute(\"role\") == \"dialog\"\n        ) {\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        // If we don't have a byline yet check to see if this node is a byline; if it is store the byline and remove the node.\n        if (\n          !this._articleByline &&\n          !this._metadata.byline &&\n          this._isValidByline(node, matchString)\n        ) {\n          // Find child node matching [itemprop=\"name\"] and use that if it exists for a more accurate author name byline\n          var endOfSearchMarkerNode = this._getNextNode(node, true);\n          var next = this._getNextNode(node);\n          var itemPropNameNode = null;\n          while (next && next != endOfSearchMarkerNode) {\n            var itemprop = next.getAttribute(\"itemprop\");\n            if (itemprop && itemprop.includes(\"name\")) {\n              itemPropNameNode = next;\n              break;\n            } else {\n              next = this._getNextNode(next);\n            }\n          }\n          this._articleByline = (itemPropNameNode ?? node).textContent.trim();\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        if (shouldRemoveTitleHeader && this._headerDuplicatesTitle(node)) {\n          this.log(\n            \"Removing header: \",\n            node.textContent.trim(),\n            this._articleTitle.trim()\n          );\n          shouldRemoveTitleHeader = false;\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        // Remove unlikely candidates\n        if (stripUnlikelyCandidates) {\n          if (\n            this.REGEXPS.unlikelyCandidates.test(matchString) &&\n            !this.REGEXPS.okMaybeItsACandidate.test(matchString) &&\n            !this._hasAncestorTag(node, \"table\") &&\n            !this._hasAncestorTag(node, \"code\") &&\n            node.tagName !== \"BODY\" &&\n            node.tagName !== \"A\"\n          ) {\n            this.log(\"Removing unlikely candidate - \" + matchString);\n            node = this._removeAndGetNext(node);\n            continue;\n          }\n\n          if (this.UNLIKELY_ROLES.includes(node.getAttribute(\"role\"))) {\n            this.log(\n              \"Removing content with role \" +\n                node.getAttribute(\"role\") +\n                \" - \" +\n                matchString\n            );\n            node = this._removeAndGetNext(node);\n            continue;\n          }\n        }\n\n        // Remove DIV, SECTION, and HEADER nodes without any content(e.g. text, image, video, or iframe).\n        if (\n          (node.tagName === \"DIV\" ||\n            node.tagName === \"SECTION\" ||\n            node.tagName === \"HEADER\" ||\n            node.tagName === \"H1\" ||\n            node.tagName === \"H2\" ||\n            node.tagName === \"H3\" ||\n            node.tagName === \"H4\" ||\n            node.tagName === \"H5\" ||\n            node.tagName === \"H6\") &&\n          this._isElementWithoutContent(node)\n        ) {\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        if (this.DEFAULT_TAGS_TO_SCORE.includes(node.tagName)) {\n          elementsToScore.push(node);\n        }\n\n        // Turn all divs that don't have children block level elements into p's\n        if (node.tagName === \"DIV\") {\n          // Put phrasing content into paragraphs.\n          var p = null;\n          var childNode = node.firstChild;\n          while (childNode) {\n            var nextSibling = childNode.nextSibling;\n            if (this._isPhrasingContent(childNode)) {\n              if (p !== null) {\n                p.appendChild(childNode);\n              } else if (!this._isWhitespace(childNode)) {\n                p = doc.createElement(\"p\");\n                node.replaceChild(p, childNode);\n                p.appendChild(childNode);\n              }\n            } else if (p !== null) {\n              while (p.lastChild && this._isWhitespace(p.lastChild)) {\n                p.lastChild.remove();\n              }\n              p = null;\n            }\n            childNode = nextSibling;\n          }\n\n          // Sites like http://mobile.slate.com encloses each paragraph with a DIV\n          // element. DIVs with only a P element inside and no text content can be\n          // safely converted into plain P elements to avoid confusing the scoring\n          // algorithm with DIVs with are, in practice, paragraphs.\n          if (\n            this._hasSingleTagInsideElement(node, \"P\") &&\n            this._getLinkDensity(node) < 0.25\n          ) {\n            var newNode = node.children[0];\n            node.parentNode.replaceChild(newNode, node);\n            node = newNode;\n            elementsToScore.push(node);\n          } else if (!this._hasChildBlockElement(node)) {\n            node = this._setNodeTag(node, \"P\");\n            elementsToScore.push(node);\n          }\n        }\n        node = this._getNextNode(node);\n      }\n\n      /**\n       * Loop through all paragraphs, and assign a score to them based on how content-y they look.\n       * Then add their score to their parent node.\n       *\n       * A score is determined by things like number of commas, class names, etc. Maybe eventually link density.\n       **/\n      var candidates = [];\n      this._forEachNode(elementsToScore, function (elementToScore) {\n        if (\n          !elementToScore.parentNode ||\n          typeof elementToScore.parentNode.tagName === \"undefined\"\n        ) {\n          return;\n        }\n\n        // If this paragraph is less than 25 characters, don't even count it.\n        var innerText = this._getInnerText(elementToScore);\n        if (innerText.length < 25) {\n          return;\n        }\n\n        // Exclude nodes with no ancestor.\n        var ancestors = this._getNodeAncestors(elementToScore, 5);\n        if (ancestors.length === 0) {\n          return;\n        }\n\n        var contentScore = 0;\n\n        // Add a point for the paragraph itself as a base.\n        contentScore += 1;\n\n        // Add points for any commas within this paragraph.\n        contentScore += innerText.split(this.REGEXPS.commas).length;\n\n        // For every 100 characters in this paragraph, add another point. Up to 3 points.\n        contentScore += Math.min(Math.floor(innerText.length / 100), 3);\n\n        // Initialize and score ancestors.\n        this._forEachNode(ancestors, function (ancestor, level) {\n          if (\n            !ancestor.tagName ||\n            !ancestor.parentNode ||\n            typeof ancestor.parentNode.tagName === \"undefined\"\n          ) {\n            return;\n          }\n\n          if (typeof ancestor.readability === \"undefined\") {\n            this._initializeNode(ancestor);\n            candidates.push(ancestor);\n          }\n\n          // Node score divider:\n          // - parent:             1 (no division)\n          // - grandparent:        2\n          // - great grandparent+: ancestor level * 3\n          if (level === 0) {\n            var scoreDivider = 1;\n          } else if (level === 1) {\n            scoreDivider = 2;\n          } else {\n            scoreDivider = level * 3;\n          }\n          ancestor.readability.contentScore += contentScore / scoreDivider;\n        });\n      });\n\n      // After we've calculated scores, loop through all of the possible\n      // candidate nodes we found and find the one with the highest score.\n      var topCandidates = [];\n      for (var c = 0, cl = candidates.length; c < cl; c += 1) {\n        var candidate = candidates[c];\n\n        // Scale the final candidates score based on link density. Good content\n        // should have a relatively small link density (5% or less) and be mostly\n        // unaffected by this operation.\n        var candidateScore =\n          candidate.readability.contentScore *\n          (1 - this._getLinkDensity(candidate));\n        candidate.readability.contentScore = candidateScore;\n\n        this.log(\"Candidate:\", candidate, \"with score \" + candidateScore);\n\n        for (var t = 0; t < this._nbTopCandidates; t++) {\n          var aTopCandidate = topCandidates[t];\n\n          if (\n            !aTopCandidate ||\n            candidateScore > aTopCandidate.readability.contentScore\n          ) {\n            topCandidates.splice(t, 0, candidate);\n            if (topCandidates.length > this._nbTopCandidates) {\n              topCandidates.pop();\n            }\n            break;\n          }\n        }\n      }\n\n      var topCandidate = topCandidates[0] || null;\n      var neededToCreateTopCandidate = false;\n      var parentOfTopCandidate;\n\n      // If we still have no top candidate, just use the body as a last resort.\n      // We also have to copy the body node so it is something we can modify.\n      if (topCandidate === null || topCandidate.tagName === \"BODY\") {\n        // Move all of the page's children into topCandidate\n        topCandidate = doc.createElement(\"DIV\");\n        neededToCreateTopCandidate = true;\n        // Move everything (not just elements, also text nodes etc.) into the container\n        // so we even include text directly in the body:\n        while (page.firstChild) {\n          this.log(\"Moving child out:\", page.firstChild);\n          topCandidate.appendChild(page.firstChild);\n        }\n\n        page.appendChild(topCandidate);\n\n        this._initializeNode(topCandidate);\n      } else if (topCandidate) {\n        // Find a better top candidate node if it contains (at least three) nodes which belong to `topCandidates` array\n        // and whose scores are quite closed with current `topCandidate` node.\n        var alternativeCandidateAncestors = [];\n        for (var i = 1; i < topCandidates.length; i++) {\n          if (\n            topCandidates[i].readability.contentScore /\n              topCandidate.readability.contentScore >=\n            0.75\n          ) {\n            alternativeCandidateAncestors.push(\n              this._getNodeAncestors(topCandidates[i])\n            );\n          }\n        }\n        var MINIMUM_TOPCANDIDATES = 3;\n        if (alternativeCandidateAncestors.length >= MINIMUM_TOPCANDIDATES) {\n          parentOfTopCandidate = topCandidate.parentNode;\n          while (parentOfTopCandidate.tagName !== \"BODY\") {\n            var listsContainingThisAncestor = 0;\n            for (\n              var ancestorIndex = 0;\n              ancestorIndex < alternativeCandidateAncestors.length &&\n              listsContainingThisAncestor < MINIMUM_TOPCANDIDATES;\n              ancestorIndex++\n            ) {\n              listsContainingThisAncestor += Number(\n                alternativeCandidateAncestors[ancestorIndex].includes(\n                  parentOfTopCandidate\n                )\n              );\n            }\n            if (listsContainingThisAncestor >= MINIMUM_TOPCANDIDATES) {\n              topCandidate = parentOfTopCandidate;\n              break;\n            }\n            parentOfTopCandidate = parentOfTopCandidate.parentNode;\n          }\n        }\n        if (!topCandidate.readability) {\n          this._initializeNode(topCandidate);\n        }\n\n        // Because of our bonus system, parents of candidates might have scores\n        // themselves. They get half of the node. There won't be nodes with higher\n        // scores than our topCandidate, but if we see the score going *up* in the first\n        // few steps up the tree, that's a decent sign that there might be more content\n        // lurking in other places that we want to unify in. The sibling stuff\n        // below does some of that - but only if we've looked high enough up the DOM\n        // tree.\n        parentOfTopCandidate = topCandidate.parentNode;\n        var lastScore = topCandidate.readability.contentScore;\n        // The scores shouldn't get too low.\n        var scoreThreshold = lastScore / 3;\n        while (parentOfTopCandidate.tagName !== \"BODY\") {\n          if (!parentOfTopCandidate.readability) {\n            parentOfTopCandidate = parentOfTopCandidate.parentNode;\n            continue;\n          }\n          var parentScore = parentOfTopCandidate.readability.contentScore;\n          if (parentScore < scoreThreshold) {\n            break;\n          }\n          if (parentScore > lastScore) {\n            // Alright! We found a better parent to use.\n            topCandidate = parentOfTopCandidate;\n            break;\n          }\n          lastScore = parentOfTopCandidate.readability.contentScore;\n          parentOfTopCandidate = parentOfTopCandidate.parentNode;\n        }\n\n        // If the top candidate is the only child, use parent instead. This will help sibling\n        // joining logic when adjacent content is actually located in parent's sibling node.\n        parentOfTopCandidate = topCandidate.parentNode;\n        while (\n          parentOfTopCandidate.tagName != \"BODY\" &&\n          parentOfTopCandidate.children.length == 1\n        ) {\n          topCandidate = parentOfTopCandidate;\n          parentOfTopCandidate = topCandidate.parentNode;\n        }\n        if (!topCandidate.readability) {\n          this._initializeNode(topCandidate);\n        }\n      }\n\n      // Now that we have the top candidate, look through its siblings for content\n      // that might also be related. Things like preambles, content split by ads\n      // that we removed, etc.\n      var articleContent = doc.createElement(\"DIV\");\n      if (isPaging) {\n        articleContent.id = \"readability-content\";\n      }\n\n      var siblingScoreThreshold = Math.max(\n        10,\n        topCandidate.readability.contentScore * 0.2\n      );\n      // Keep potential top candidate's parent node to try to get text direction of it later.\n      parentOfTopCandidate = topCandidate.parentNode;\n      var siblings = parentOfTopCandidate.children;\n\n      for (var s = 0, sl = siblings.length; s < sl; s++) {\n        var sibling = siblings[s];\n        var append = false;\n\n        this.log(\n          \"Looking at sibling node:\",\n          sibling,\n          sibling.readability\n            ? \"with score \" + sibling.readability.contentScore\n            : \"\"\n        );\n        this.log(\n          \"Sibling has score\",\n          sibling.readability ? sibling.readability.contentScore : \"Unknown\"\n        );\n\n        if (sibling === topCandidate) {\n          append = true;\n        } else {\n          var contentBonus = 0;\n\n          // Give a bonus if sibling nodes and top candidates have the example same classname\n          if (\n            sibling.className === topCandidate.className &&\n            topCandidate.className !== \"\"\n          ) {\n            contentBonus += topCandidate.readability.contentScore * 0.2;\n          }\n\n          if (\n            sibling.readability &&\n            sibling.readability.contentScore + contentBonus >=\n              siblingScoreThreshold\n          ) {\n            append = true;\n          } else if (sibling.nodeName === \"P\") {\n            var linkDensity = this._getLinkDensity(sibling);\n            var nodeContent = this._getInnerText(sibling);\n            var nodeLength = nodeContent.length;\n\n            if (nodeLength > 80 && linkDensity < 0.25) {\n              append = true;\n            } else if (\n              nodeLength < 80 &&\n              nodeLength > 0 &&\n              linkDensity === 0 &&\n              nodeContent.search(/\\.( |$)/) !== -1\n            ) {\n              append = true;\n            }\n          }\n        }\n\n        if (append) {\n          this.log(\"Appending node:\", sibling);\n\n          if (!this.ALTER_TO_DIV_EXCEPTIONS.includes(sibling.nodeName)) {\n            // We have a node that isn't a common block level element, like a form or td tag.\n            // Turn it into a div so it doesn't get filtered out later by accident.\n            this.log(\"Altering sibling:\", sibling, \"to div.\");\n\n            sibling = this._setNodeTag(sibling, \"DIV\");\n          }\n\n          articleContent.appendChild(sibling);\n          // Fetch children again to make it compatible\n          // with DOM parsers without live collection support.\n          siblings = parentOfTopCandidate.children;\n          // siblings is a reference to the children array, and\n          // sibling is removed from the array when we call appendChild().\n          // As a result, we must revisit this index since the nodes\n          // have been shifted.\n          s -= 1;\n          sl -= 1;\n        }\n      }\n\n      if (this._debug) {\n        this.log(\"Article content pre-prep: \" + articleContent.innerHTML);\n      }\n      // So we have all of the content that we need. Now we clean it up for presentation.\n      this._prepArticle(articleContent);\n      if (this._debug) {\n        this.log(\"Article content post-prep: \" + articleContent.innerHTML);\n      }\n\n      if (neededToCreateTopCandidate) {\n        // We already created a fake div thing, and there wouldn't have been any siblings left\n        // for the previous loop, so there's no point trying to create a new div, and then\n        // move all the children over. Just assign IDs and class names here. No need to append\n        // because that already happened anyway.\n        topCandidate.id = \"readability-page-1\";\n        topCandidate.className = \"page\";\n      } else {\n        var div = doc.createElement(\"DIV\");\n        div.id = \"readability-page-1\";\n        div.className = \"page\";\n        while (articleContent.firstChild) {\n          div.appendChild(articleContent.firstChild);\n        }\n        articleContent.appendChild(div);\n      }\n\n      if (this._debug) {\n        this.log(\"Article content after paging: \" + articleContent.innerHTML);\n      }\n\n      var parseSuccessful = true;\n\n      // Now that we've gone through the full algorithm, check to see if\n      // we got any meaningful content. If we didn't, we may need to re-run\n      // grabArticle with different flags set. This gives us a higher likelihood of\n      // finding the content, and the sieve approach gives us a higher likelihood of\n      // finding the -right- content.\n      var textLength = this._getInnerText(articleContent, true).length;\n      if (textLength < this._charThreshold) {\n        parseSuccessful = false;\n        // eslint-disable-next-line no-unsanitized/property\n        page.innerHTML = pageCacheHtml;\n\n        this._attempts.push({\n          articleContent,\n          textLength,\n        });\n\n        if (this._flagIsActive(this.FLAG_STRIP_UNLIKELYS)) {\n          this._removeFlag(this.FLAG_STRIP_UNLIKELYS);\n        } else if (this._flagIsActive(this.FLAG_WEIGHT_CLASSES)) {\n          this._removeFlag(this.FLAG_WEIGHT_CLASSES);\n        } else if (this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY)) {\n          this._removeFlag(this.FLAG_CLEAN_CONDITIONALLY);\n        } else {\n          // No luck after removing flags, just return the longest text we found during the different loops\n          this._attempts.sort(function (a, b) {\n            return b.textLength - a.textLength;\n          });\n\n          // But first check if we actually have something\n          if (!this._attempts[0].textLength) {\n            return null;\n          }\n\n          articleContent = this._attempts[0].articleContent;\n          parseSuccessful = true;\n        }\n      }\n\n      if (parseSuccessful) {\n        // Find out text direction from ancestors of final top candidate.\n        var ancestors = [parentOfTopCandidate, topCandidate].concat(\n          this._getNodeAncestors(parentOfTopCandidate)\n        );\n        this._someNode(ancestors, function (ancestor) {\n          if (!ancestor.tagName) {\n            return false;\n          }\n          var articleDir = ancestor.getAttribute(\"dir\");\n          if (articleDir) {\n            this._articleDir = articleDir;\n            return true;\n          }\n          return false;\n        });\n        return articleContent;\n      }\n    }\n  },\n\n  /**\n   * Converts some of the common HTML entities in string to their corresponding characters.\n   *\n   * @param str {string} - a string to unescape.\n   * @return string without HTML entity.\n   */\n  _unescapeHtmlEntities(str) {\n    if (!str) {\n      return str;\n    }\n\n    var htmlEscapeMap = this.HTML_ESCAPE_MAP;\n    return str\n      .replace(/&(quot|amp|apos|lt|gt);/g, function (_, tag) {\n        return htmlEscapeMap[tag];\n      })\n      .replace(/&#(?:x([0-9a-f]+)|([0-9]+));/gi, function (_, hex, numStr) {\n        var num = parseInt(hex || numStr, hex ? 16 : 10);\n\n        // these character references are replaced by a conforming HTML parser\n        if (num == 0 || num > 0x10ffff || (num >= 0xd800 && num <= 0xdfff)) {\n          num = 0xfffd;\n        }\n\n        return String.fromCodePoint(num);\n      });\n  },\n\n  /**\n   * Try to extract metadata from JSON-LD object.\n   * For now, only Schema.org objects of type Article or its subtypes are supported.\n   * @return Object with any metadata that could be extracted (possibly none)\n   */\n  _getJSONLD(doc) {\n    var scripts = this._getAllNodesWithTag(doc, [\"script\"]);\n\n    var metadata;\n\n    this._forEachNode(scripts, function (jsonLdElement) {\n      if (\n        !metadata &&\n        jsonLdElement.getAttribute(\"type\") === \"application/ld+json\"\n      ) {\n        try {\n          // Strip CDATA markers if present\n          var content = jsonLdElement.textContent.replace(\n            /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g,\n            \"\"\n          );\n          var parsed = JSON.parse(content);\n\n          if (Array.isArray(parsed)) {\n            parsed = parsed.find(it => {\n              return (\n                it[\"@type\"] &&\n                it[\"@type\"].match(this.REGEXPS.jsonLdArticleTypes)\n              );\n            });\n            if (!parsed) {\n              return;\n            }\n          }\n\n          var schemaDotOrgRegex = /^https?\\:\\/\\/schema\\.org\\/?$/;\n          var matches =\n            (typeof parsed[\"@context\"] === \"string\" &&\n              parsed[\"@context\"].match(schemaDotOrgRegex)) ||\n            (typeof parsed[\"@context\"] === \"object\" &&\n              typeof parsed[\"@context\"][\"@vocab\"] == \"string\" &&\n              parsed[\"@context\"][\"@vocab\"].match(schemaDotOrgRegex));\n\n          if (!matches) {\n            return;\n          }\n\n          if (!parsed[\"@type\"] && Array.isArray(parsed[\"@graph\"])) {\n            parsed = parsed[\"@graph\"].find(it => {\n              return (it[\"@type\"] || \"\").match(this.REGEXPS.jsonLdArticleTypes);\n            });\n          }\n\n          if (\n            !parsed ||\n            !parsed[\"@type\"] ||\n            !parsed[\"@type\"].match(this.REGEXPS.jsonLdArticleTypes)\n          ) {\n            return;\n          }\n\n          metadata = {};\n\n          if (\n            typeof parsed.name === \"string\" &&\n            typeof parsed.headline === \"string\" &&\n            parsed.name !== parsed.headline\n          ) {\n            // we have both name and headline element in the JSON-LD. They should both be the same but some websites like aktualne.cz\n            // put their own name into \"name\" and the article title to \"headline\" which confuses Readability. So we try to check if either\n            // \"name\" or \"headline\" closely matches the html title, and if so, use that one. If not, then we use \"name\" by default.\n\n            var title = this._getArticleTitle();\n            var nameMatches = this._textSimilarity(parsed.name, title) > 0.75;\n            var headlineMatches =\n              this._textSimilarity(parsed.headline, title) > 0.75;\n\n            if (headlineMatches && !nameMatches) {\n              metadata.title = parsed.headline;\n            } else {\n              metadata.title = parsed.name;\n            }\n          } else if (typeof parsed.name === \"string\") {\n            metadata.title = parsed.name.trim();\n          } else if (typeof parsed.headline === \"string\") {\n            metadata.title = parsed.headline.trim();\n          }\n          if (parsed.author) {\n            if (typeof parsed.author.name === \"string\") {\n              metadata.byline = parsed.author.name.trim();\n            } else if (\n              Array.isArray(parsed.author) &&\n              parsed.author[0] &&\n              typeof parsed.author[0].name === \"string\"\n            ) {\n              metadata.byline = parsed.author\n                .filter(function (author) {\n                  return author && typeof author.name === \"string\";\n                })\n                .map(function (author) {\n                  return author.name.trim();\n                })\n                .join(\", \");\n            }\n          }\n          if (typeof parsed.description === \"string\") {\n            metadata.excerpt = parsed.description.trim();\n          }\n          if (parsed.publisher && typeof parsed.publisher.name === \"string\") {\n            metadata.siteName = parsed.publisher.name.trim();\n          }\n          if (typeof parsed.datePublished === \"string\") {\n            metadata.datePublished = parsed.datePublished.trim();\n          }\n        } catch (err) {\n          this.log(err.message);\n        }\n      }\n    });\n    return metadata ? metadata : {};\n  },\n\n  /**\n   * Attempts to get excerpt and byline metadata for the article.\n   *\n   * @param {Object} jsonld — object containing any metadata that\n   * could be extracted from JSON-LD object.\n   *\n   * @return Object with optional \"excerpt\" and \"byline\" properties\n   */\n  _getArticleMetadata(jsonld) {\n    var metadata = {};\n    var values = {};\n    var metaElements = this._doc.getElementsByTagName(\"meta\");\n\n    // property is a space-separated list of values\n    var propertyPattern =\n      /\\s*(article|dc|dcterm|og|twitter)\\s*:\\s*(author|creator|description|published_time|title|site_name)\\s*/gi;\n\n    // name is a single value\n    var namePattern =\n      /^\\s*(?:(dc|dcterm|og|twitter|parsely|weibo:(article|webpage))\\s*[-\\.:]\\s*)?(author|creator|pub-date|description|title|site_name)\\s*$/i;\n\n    // Find description tags.\n    this._forEachNode(metaElements, function (element) {\n      var elementName = element.getAttribute(\"name\");\n      var elementProperty = element.getAttribute(\"property\");\n      var content = element.getAttribute(\"content\");\n      if (!content) {\n        return;\n      }\n      var matches = null;\n      var name = null;\n\n      if (elementProperty) {\n        matches = elementProperty.match(propertyPattern);\n        if (matches) {\n          // Convert to lowercase, and remove any whitespace\n          // so we can match below.\n          name = matches[0].toLowerCase().replace(/\\s/g, \"\");\n          // multiple authors\n          values[name] = content.trim();\n        }\n      }\n      if (!matches && elementName && namePattern.test(elementName)) {\n        name = elementName;\n        if (content) {\n          // Convert to lowercase, remove any whitespace, and convert dots\n          // to colons so we can match below.\n          name = name.toLowerCase().replace(/\\s/g, \"\").replace(/\\./g, \":\");\n          values[name] = content.trim();\n        }\n      }\n    });\n\n    // get title\n    metadata.title =\n      jsonld.title ||\n      values[\"dc:title\"] ||\n      values[\"dcterm:title\"] ||\n      values[\"og:title\"] ||\n      values[\"weibo:article:title\"] ||\n      values[\"weibo:webpage:title\"] ||\n      values.title ||\n      values[\"twitter:title\"] ||\n      values[\"parsely-title\"];\n\n    if (!metadata.title) {\n      metadata.title = this._getArticleTitle();\n    }\n\n    const articleAuthor =\n      typeof values[\"article:author\"] === \"string\" &&\n      !this._isUrl(values[\"article:author\"])\n        ? values[\"article:author\"]\n        : undefined;\n\n    // get author\n    metadata.byline =\n      jsonld.byline ||\n      values[\"dc:creator\"] ||\n      values[\"dcterm:creator\"] ||\n      values.author ||\n      values[\"parsely-author\"] ||\n      articleAuthor;\n\n    // get description\n    metadata.excerpt =\n      jsonld.excerpt ||\n      values[\"dc:description\"] ||\n      values[\"dcterm:description\"] ||\n      values[\"og:description\"] ||\n      values[\"weibo:article:description\"] ||\n      values[\"weibo:webpage:description\"] ||\n      values.description ||\n      values[\"twitter:description\"];\n\n    // get site name\n    metadata.siteName = jsonld.siteName || values[\"og:site_name\"];\n\n    // get article published time\n    metadata.publishedTime =\n      jsonld.datePublished ||\n      values[\"article:published_time\"] ||\n      values[\"parsely-pub-date\"] ||\n      null;\n\n    // in many sites the meta value is escaped with HTML entities,\n    // so here we need to unescape it\n    metadata.title = this._unescapeHtmlEntities(metadata.title);\n    metadata.byline = this._unescapeHtmlEntities(metadata.byline);\n    metadata.excerpt = this._unescapeHtmlEntities(metadata.excerpt);\n    metadata.siteName = this._unescapeHtmlEntities(metadata.siteName);\n    metadata.publishedTime = this._unescapeHtmlEntities(metadata.publishedTime);\n\n    return metadata;\n  },\n\n  /**\n   * Check if node is image, or if node contains exactly only one image\n   * whether as a direct child or as its descendants.\n   *\n   * @param Element\n   **/\n  _isSingleImage(node) {\n    while (node) {\n      if (node.tagName === \"IMG\") {\n        return true;\n      }\n      if (node.children.length !== 1 || node.textContent.trim() !== \"\") {\n        return false;\n      }\n      node = node.children[0];\n    }\n    return false;\n  },\n\n  /**\n   * Find all <noscript> that are located after <img> nodes, and which contain only one\n   * <img> element. Replace the first image with the image from inside the <noscript> tag,\n   * and remove the <noscript> tag. This improves the quality of the images we use on\n   * some sites (e.g. Medium).\n   *\n   * @param Element\n   **/\n  _unwrapNoscriptImages(doc) {\n    // Find img without source or attributes that might contains image, and remove it.\n    // This is done to prevent a placeholder img is replaced by img from noscript in next step.\n    var imgs = Array.from(doc.getElementsByTagName(\"img\"));\n    this._forEachNode(imgs, function (img) {\n      for (var i = 0; i < img.attributes.length; i++) {\n        var attr = img.attributes[i];\n        switch (attr.name) {\n          case \"src\":\n          case \"srcset\":\n          case \"data-src\":\n          case \"data-srcset\":\n            return;\n        }\n\n        if (/\\.(jpg|jpeg|png|webp)/i.test(attr.value)) {\n          return;\n        }\n      }\n\n      img.remove();\n    });\n\n    // Next find noscript and try to extract its image\n    var noscripts = Array.from(doc.getElementsByTagName(\"noscript\"));\n    this._forEachNode(noscripts, function (noscript) {\n      // Parse content of noscript and make sure it only contains image\n      if (!this._isSingleImage(noscript)) {\n        return;\n      }\n      var tmp = doc.createElement(\"div\");\n      // We're running in the document context, and using unmodified\n      // document contents, so doing this should be safe.\n      // (Also we heavily discourage people from allowing script to\n      // run at all in this document...)\n      // eslint-disable-next-line no-unsanitized/property\n      tmp.innerHTML = noscript.innerHTML;\n\n      // If noscript has previous sibling and it only contains image,\n      // replace it with noscript content. However we also keep old\n      // attributes that might contains image.\n      var prevElement = noscript.previousElementSibling;\n      if (prevElement && this._isSingleImage(prevElement)) {\n        var prevImg = prevElement;\n        if (prevImg.tagName !== \"IMG\") {\n          prevImg = prevElement.getElementsByTagName(\"img\")[0];\n        }\n\n        var newImg = tmp.getElementsByTagName(\"img\")[0];\n        for (var i = 0; i < prevImg.attributes.length; i++) {\n          var attr = prevImg.attributes[i];\n          if (attr.value === \"\") {\n            continue;\n          }\n\n          if (\n            attr.name === \"src\" ||\n            attr.name === \"srcset\" ||\n            /\\.(jpg|jpeg|png|webp)/i.test(attr.value)\n          ) {\n            if (newImg.getAttribute(attr.name) === attr.value) {\n              continue;\n            }\n\n            var attrName = attr.name;\n            if (newImg.hasAttribute(attrName)) {\n              attrName = \"data-old-\" + attrName;\n            }\n\n            newImg.setAttribute(attrName, attr.value);\n          }\n        }\n\n        noscript.parentNode.replaceChild(tmp.firstElementChild, prevElement);\n      }\n    });\n  },\n\n  /**\n   * Removes script tags from the document.\n   *\n   * @param Element\n   **/\n  _removeScripts(doc) {\n    this._removeNodes(this._getAllNodesWithTag(doc, [\"script\", \"noscript\"]));\n  },\n\n  /**\n   * Check if this node has only whitespace and a single element with given tag\n   * Returns false if the DIV node contains non-empty text nodes\n   * or if it contains no element with given tag or more than 1 element.\n   *\n   * @param Element\n   * @param string tag of child element\n   **/\n  _hasSingleTagInsideElement(element, tag) {\n    // There should be exactly 1 element child with given tag\n    if (element.children.length != 1 || element.children[0].tagName !== tag) {\n      return false;\n    }\n\n    // And there should be no text nodes with real content\n    return !this._someNode(element.childNodes, function (node) {\n      return (\n        node.nodeType === this.TEXT_NODE &&\n        this.REGEXPS.hasContent.test(node.textContent)\n      );\n    });\n  },\n\n  _isElementWithoutContent(node) {\n    return (\n      node.nodeType === this.ELEMENT_NODE &&\n      !node.textContent.trim().length &&\n      (!node.children.length ||\n        node.children.length ==\n          node.getElementsByTagName(\"br\").length +\n            node.getElementsByTagName(\"hr\").length)\n    );\n  },\n\n  /**\n   * Determine whether element has any children block level elements.\n   *\n   * @param Element\n   */\n  _hasChildBlockElement(element) {\n    return this._someNode(element.childNodes, function (node) {\n      return (\n        this.DIV_TO_P_ELEMS.has(node.tagName) ||\n        this._hasChildBlockElement(node)\n      );\n    });\n  },\n\n  /***\n   * Determine if a node qualifies as phrasing content.\n   * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content\n   **/\n  _isPhrasingContent(node) {\n    return (\n      node.nodeType === this.TEXT_NODE ||\n      this.PHRASING_ELEMS.includes(node.tagName) ||\n      ((node.tagName === \"A\" ||\n        node.tagName === \"DEL\" ||\n        node.tagName === \"INS\") &&\n        this._everyNode(node.childNodes, this._isPhrasingContent))\n    );\n  },\n\n  _isWhitespace(node) {\n    return (\n      (node.nodeType === this.TEXT_NODE &&\n        node.textContent.trim().length === 0) ||\n      (node.nodeType === this.ELEMENT_NODE && node.tagName === \"BR\")\n    );\n  },\n\n  /**\n   * Get the inner text of a node - cross browser compatibly.\n   * This also strips out any excess whitespace to be found.\n   *\n   * @param Element\n   * @param Boolean normalizeSpaces (default: true)\n   * @return string\n   **/\n  _getInnerText(e, normalizeSpaces) {\n    normalizeSpaces =\n      typeof normalizeSpaces === \"undefined\" ? true : normalizeSpaces;\n    var textContent = e.textContent.trim();\n\n    if (normalizeSpaces) {\n      return textContent.replace(this.REGEXPS.normalize, \" \");\n    }\n    return textContent;\n  },\n\n  /**\n   * Get the number of times a string s appears in the node e.\n   *\n   * @param Element\n   * @param string - what to split on. Default is \",\"\n   * @return number (integer)\n   **/\n  _getCharCount(e, s) {\n    s = s || \",\";\n    return this._getInnerText(e).split(s).length - 1;\n  },\n\n  /**\n   * Remove the style attribute on every e and under.\n   * TODO: Test if getElementsByTagName(*) is faster.\n   *\n   * @param Element\n   * @return void\n   **/\n  _cleanStyles(e) {\n    if (!e || e.tagName.toLowerCase() === \"svg\") {\n      return;\n    }\n\n    // Remove `style` and deprecated presentational attributes\n    for (var i = 0; i < this.PRESENTATIONAL_ATTRIBUTES.length; i++) {\n      e.removeAttribute(this.PRESENTATIONAL_ATTRIBUTES[i]);\n    }\n\n    if (this.DEPRECATED_SIZE_ATTRIBUTE_ELEMS.includes(e.tagName)) {\n      e.removeAttribute(\"width\");\n      e.removeAttribute(\"height\");\n    }\n\n    var cur = e.firstElementChild;\n    while (cur !== null) {\n      this._cleanStyles(cur);\n      cur = cur.nextElementSibling;\n    }\n  },\n\n  /**\n   * Get the density of links as a percentage of the content\n   * This is the amount of text that is inside a link divided by the total text in the node.\n   *\n   * @param Element\n   * @return number (float)\n   **/\n  _getLinkDensity(element) {\n    var textLength = this._getInnerText(element).length;\n    if (textLength === 0) {\n      return 0;\n    }\n\n    var linkLength = 0;\n\n    // XXX implement _reduceNodeList?\n    this._forEachNode(element.getElementsByTagName(\"a\"), function (linkNode) {\n      var href = linkNode.getAttribute(\"href\");\n      var coefficient = href && this.REGEXPS.hashUrl.test(href) ? 0.3 : 1;\n      linkLength += this._getInnerText(linkNode).length * coefficient;\n    });\n\n    return linkLength / textLength;\n  },\n\n  /**\n   * Get an elements class/id weight. Uses regular expressions to tell if this\n   * element looks good or bad.\n   *\n   * @param Element\n   * @return number (Integer)\n   **/\n  _getClassWeight(e) {\n    if (!this._flagIsActive(this.FLAG_WEIGHT_CLASSES)) {\n      return 0;\n    }\n\n    var weight = 0;\n\n    // Look for a special classname\n    if (typeof e.className === \"string\" && e.className !== \"\") {\n      if (this.REGEXPS.negative.test(e.className)) {\n        weight -= 25;\n      }\n\n      if (this.REGEXPS.positive.test(e.className)) {\n        weight += 25;\n      }\n    }\n\n    // Look for a special ID\n    if (typeof e.id === \"string\" && e.id !== \"\") {\n      if (this.REGEXPS.negative.test(e.id)) {\n        weight -= 25;\n      }\n\n      if (this.REGEXPS.positive.test(e.id)) {\n        weight += 25;\n      }\n    }\n\n    return weight;\n  },\n\n  /**\n   * Clean a node of all elements of type \"tag\".\n   * (Unless it's a youtube/vimeo video. People love movies.)\n   *\n   * @param Element\n   * @param string tag to clean\n   * @return void\n   **/\n  _clean(e, tag) {\n    var isEmbed = [\"object\", \"embed\", \"iframe\"].includes(tag);\n\n    this._removeNodes(this._getAllNodesWithTag(e, [tag]), function (element) {\n      // Allow youtube and vimeo videos through as people usually want to see those.\n      if (isEmbed) {\n        // First, check the elements attributes to see if any of them contain youtube or vimeo\n        for (var i = 0; i < element.attributes.length; i++) {\n          if (this._allowedVideoRegex.test(element.attributes[i].value)) {\n            return false;\n          }\n        }\n\n        // For embed with <object> tag, check inner HTML as well.\n        if (\n          element.tagName === \"object\" &&\n          this._allowedVideoRegex.test(element.innerHTML)\n        ) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  },\n\n  /**\n   * Check if a given node has one of its ancestor tag name matching the\n   * provided one.\n   * @param  HTMLElement node\n   * @param  String      tagName\n   * @param  Number      maxDepth\n   * @param  Function    filterFn a filter to invoke to determine whether this node 'counts'\n   * @return Boolean\n   */\n  _hasAncestorTag(node, tagName, maxDepth, filterFn) {\n    maxDepth = maxDepth || 3;\n    tagName = tagName.toUpperCase();\n    var depth = 0;\n    while (node.parentNode) {\n      if (maxDepth > 0 && depth > maxDepth) {\n        return false;\n      }\n      if (\n        node.parentNode.tagName === tagName &&\n        (!filterFn || filterFn(node.parentNode))\n      ) {\n        return true;\n      }\n      node = node.parentNode;\n      depth++;\n    }\n    return false;\n  },\n\n  /**\n   * Return an object indicating how many rows and columns this table has.\n   */\n  _getRowAndColumnCount(table) {\n    var rows = 0;\n    var columns = 0;\n    var trs = table.getElementsByTagName(\"tr\");\n    for (var i = 0; i < trs.length; i++) {\n      var rowspan = trs[i].getAttribute(\"rowspan\") || 0;\n      if (rowspan) {\n        rowspan = parseInt(rowspan, 10);\n      }\n      rows += rowspan || 1;\n\n      // Now look for column-related info\n      var columnsInThisRow = 0;\n      var cells = trs[i].getElementsByTagName(\"td\");\n      for (var j = 0; j < cells.length; j++) {\n        var colspan = cells[j].getAttribute(\"colspan\") || 0;\n        if (colspan) {\n          colspan = parseInt(colspan, 10);\n        }\n        columnsInThisRow += colspan || 1;\n      }\n      columns = Math.max(columns, columnsInThisRow);\n    }\n    return { rows, columns };\n  },\n\n  /**\n   * Look for 'data' (as opposed to 'layout') tables, for which we use\n   * similar checks as\n   * https://searchfox.org/mozilla-central/rev/f82d5c549f046cb64ce5602bfd894b7ae807c8f8/accessible/generic/TableAccessible.cpp#19\n   */\n  _markDataTables(root) {\n    var tables = root.getElementsByTagName(\"table\");\n    for (var i = 0; i < tables.length; i++) {\n      var table = tables[i];\n      var role = table.getAttribute(\"role\");\n      if (role == \"presentation\") {\n        table._readabilityDataTable = false;\n        continue;\n      }\n      var datatable = table.getAttribute(\"datatable\");\n      if (datatable == \"0\") {\n        table._readabilityDataTable = false;\n        continue;\n      }\n      var summary = table.getAttribute(\"summary\");\n      if (summary) {\n        table._readabilityDataTable = true;\n        continue;\n      }\n\n      var caption = table.getElementsByTagName(\"caption\")[0];\n      if (caption && caption.childNodes.length) {\n        table._readabilityDataTable = true;\n        continue;\n      }\n\n      // If the table has a descendant with any of these tags, consider a data table:\n      var dataTableDescendants = [\"col\", \"colgroup\", \"tfoot\", \"thead\", \"th\"];\n      var descendantExists = function (tag) {\n        return !!table.getElementsByTagName(tag)[0];\n      };\n      if (dataTableDescendants.some(descendantExists)) {\n        this.log(\"Data table because found data-y descendant\");\n        table._readabilityDataTable = true;\n        continue;\n      }\n\n      // Nested tables indicate a layout table:\n      if (table.getElementsByTagName(\"table\")[0]) {\n        table._readabilityDataTable = false;\n        continue;\n      }\n\n      var sizeInfo = this._getRowAndColumnCount(table);\n\n      if (sizeInfo.columns == 1 || sizeInfo.rows == 1) {\n        // single colum/row tables are commonly used for page layout purposes.\n        table._readabilityDataTable = false;\n        continue;\n      }\n\n      if (sizeInfo.rows >= 10 || sizeInfo.columns > 4) {\n        table._readabilityDataTable = true;\n        continue;\n      }\n      // Now just go by size entirely:\n      table._readabilityDataTable = sizeInfo.rows * sizeInfo.columns > 10;\n    }\n  },\n\n  /* convert images and figures that have properties like data-src into images that can be loaded without JS */\n  _fixLazyImages(root) {\n    this._forEachNode(\n      this._getAllNodesWithTag(root, [\"img\", \"picture\", \"figure\"]),\n      function (elem) {\n        // In some sites (e.g. Kotaku), they put 1px square image as base64 data uri in the src attribute.\n        // So, here we check if the data uri is too short, just might as well remove it.\n        if (elem.src && this.REGEXPS.b64DataUrl.test(elem.src)) {\n          // Make sure it's not SVG, because SVG can have a meaningful image in under 133 bytes.\n          var parts = this.REGEXPS.b64DataUrl.exec(elem.src);\n          if (parts[1] === \"image/svg+xml\") {\n            return;\n          }\n\n          // Make sure this element has other attributes which contains image.\n          // If it doesn't, then this src is important and shouldn't be removed.\n          var srcCouldBeRemoved = false;\n          for (var i = 0; i < elem.attributes.length; i++) {\n            var attr = elem.attributes[i];\n            if (attr.name === \"src\") {\n              continue;\n            }\n\n            if (/\\.(jpg|jpeg|png|webp)/i.test(attr.value)) {\n              srcCouldBeRemoved = true;\n              break;\n            }\n          }\n\n          // Here we assume if image is less than 100 bytes (or 133 after encoded to base64)\n          // it will be too small, therefore it might be placeholder image.\n          if (srcCouldBeRemoved) {\n            var b64starts = parts[0].length;\n            var b64length = elem.src.length - b64starts;\n            if (b64length < 133) {\n              elem.removeAttribute(\"src\");\n            }\n          }\n        }\n\n        // also check for \"null\" to work around https://github.com/jsdom/jsdom/issues/2580\n        if (\n          (elem.src || (elem.srcset && elem.srcset != \"null\")) &&\n          !elem.className.toLowerCase().includes(\"lazy\")\n        ) {\n          return;\n        }\n\n        for (var j = 0; j < elem.attributes.length; j++) {\n          attr = elem.attributes[j];\n          if (\n            attr.name === \"src\" ||\n            attr.name === \"srcset\" ||\n            attr.name === \"alt\"\n          ) {\n            continue;\n          }\n          var copyTo = null;\n          if (/\\.(jpg|jpeg|png|webp)\\s+\\d/.test(attr.value)) {\n            copyTo = \"srcset\";\n          } else if (/^\\s*\\S+\\.(jpg|jpeg|png|webp)\\S*\\s*$/.test(attr.value)) {\n            copyTo = \"src\";\n          }\n          if (copyTo) {\n            //if this is an img or picture, set the attribute directly\n            if (elem.tagName === \"IMG\" || elem.tagName === \"PICTURE\") {\n              elem.setAttribute(copyTo, attr.value);\n            } else if (\n              elem.tagName === \"FIGURE\" &&\n              !this._getAllNodesWithTag(elem, [\"img\", \"picture\"]).length\n            ) {\n              //if the item is a <figure> that does not contain an image or picture, create one and place it inside the figure\n              //see the nytimes-3 testcase for an example\n              var img = this._doc.createElement(\"img\");\n              img.setAttribute(copyTo, attr.value);\n              elem.appendChild(img);\n            }\n          }\n        }\n      }\n    );\n  },\n\n  _getTextDensity(e, tags) {\n    var textLength = this._getInnerText(e, true).length;\n    if (textLength === 0) {\n      return 0;\n    }\n    var childrenLength = 0;\n    var children = this._getAllNodesWithTag(e, tags);\n    this._forEachNode(\n      children,\n      child => (childrenLength += this._getInnerText(child, true).length)\n    );\n    return childrenLength / textLength;\n  },\n\n  /**\n   * Clean an element of all tags of type \"tag\" if they look fishy.\n   * \"Fishy\" is an algorithm based on content length, classnames, link density, number of images & embeds, etc.\n   *\n   * @return void\n   **/\n  _cleanConditionally(e, tag) {\n    if (!this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY)) {\n      return;\n    }\n\n    // Gather counts for other typical elements embedded within.\n    // Traverse backwards so we can remove nodes at the same time\n    // without effecting the traversal.\n    //\n    // TODO: Consider taking into account original contentScore here.\n    this._removeNodes(this._getAllNodesWithTag(e, [tag]), function (node) {\n      // First check if this node IS data table, in which case don't remove it.\n      var isDataTable = function (t) {\n        return t._readabilityDataTable;\n      };\n\n      var isList = tag === \"ul\" || tag === \"ol\";\n      if (!isList) {\n        var listLength = 0;\n        var listNodes = this._getAllNodesWithTag(node, [\"ul\", \"ol\"]);\n        this._forEachNode(\n          listNodes,\n          list => (listLength += this._getInnerText(list).length)\n        );\n        isList = listLength / this._getInnerText(node).length > 0.9;\n      }\n\n      if (tag === \"table\" && isDataTable(node)) {\n        return false;\n      }\n\n      // Next check if we're inside a data table, in which case don't remove it as well.\n      if (this._hasAncestorTag(node, \"table\", -1, isDataTable)) {\n        return false;\n      }\n\n      if (this._hasAncestorTag(node, \"code\")) {\n        return false;\n      }\n\n      // keep element if it has a data tables\n      if (\n        [...node.getElementsByTagName(\"table\")].some(\n          tbl => tbl._readabilityDataTable\n        )\n      ) {\n        return false;\n      }\n\n      var weight = this._getClassWeight(node);\n\n      this.log(\"Cleaning Conditionally\", node);\n\n      var contentScore = 0;\n\n      if (weight + contentScore < 0) {\n        return true;\n      }\n\n      if (this._getCharCount(node, \",\") < 10) {\n        // If there are not very many commas, and the number of\n        // non-paragraph elements is more than paragraphs or other\n        // ominous signs, remove the element.\n        var p = node.getElementsByTagName(\"p\").length;\n        var img = node.getElementsByTagName(\"img\").length;\n        var li = node.getElementsByTagName(\"li\").length - 100;\n        var input = node.getElementsByTagName(\"input\").length;\n        var headingDensity = this._getTextDensity(node, [\n          \"h1\",\n          \"h2\",\n          \"h3\",\n          \"h4\",\n          \"h5\",\n          \"h6\",\n        ]);\n\n        var embedCount = 0;\n        var embeds = this._getAllNodesWithTag(node, [\n          \"object\",\n          \"embed\",\n          \"iframe\",\n        ]);\n\n        for (var i = 0; i < embeds.length; i++) {\n          // If this embed has attribute that matches video regex, don't delete it.\n          for (var j = 0; j < embeds[i].attributes.length; j++) {\n            if (this._allowedVideoRegex.test(embeds[i].attributes[j].value)) {\n              return false;\n            }\n          }\n\n          // For embed with <object> tag, check inner HTML as well.\n          if (\n            embeds[i].tagName === \"object\" &&\n            this._allowedVideoRegex.test(embeds[i].innerHTML)\n          ) {\n            return false;\n          }\n\n          embedCount++;\n        }\n\n        var innerText = this._getInnerText(node);\n\n        // toss any node whose inner text contains nothing but suspicious words\n        if (\n          this.REGEXPS.adWords.test(innerText) ||\n          this.REGEXPS.loadingWords.test(innerText)\n        ) {\n          return true;\n        }\n\n        var contentLength = innerText.length;\n        var linkDensity = this._getLinkDensity(node);\n        var textishTags = [\"SPAN\", \"LI\", \"TD\"].concat(\n          Array.from(this.DIV_TO_P_ELEMS)\n        );\n        var textDensity = this._getTextDensity(node, textishTags);\n        var isFigureChild = this._hasAncestorTag(node, \"figure\");\n\n        // apply shadiness checks, then check for exceptions\n        const shouldRemoveNode = () => {\n          const errs = [];\n          if (!isFigureChild && img > 1 && p / img < 0.5) {\n            errs.push(`Bad p to img ratio (img=${img}, p=${p})`);\n          }\n          if (!isList && li > p) {\n            errs.push(`Too many li's outside of a list. (li=${li} > p=${p})`);\n          }\n          if (input > Math.floor(p / 3)) {\n            errs.push(`Too many inputs per p. (input=${input}, p=${p})`);\n          }\n          if (\n            !isList &&\n            !isFigureChild &&\n            headingDensity < 0.9 &&\n            contentLength < 25 &&\n            (img === 0 || img > 2) &&\n            linkDensity > 0\n          ) {\n            errs.push(\n              `Suspiciously short. (headingDensity=${headingDensity}, img=${img}, linkDensity=${linkDensity})`\n            );\n          }\n          if (\n            !isList &&\n            weight < 25 &&\n            linkDensity > 0.2 + this._linkDensityModifier\n          ) {\n            errs.push(\n              `Low weight and a little linky. (linkDensity=${linkDensity})`\n            );\n          }\n          if (weight >= 25 && linkDensity > 0.5 + this._linkDensityModifier) {\n            errs.push(\n              `High weight and mostly links. (linkDensity=${linkDensity})`\n            );\n          }\n          if ((embedCount === 1 && contentLength < 75) || embedCount > 1) {\n            errs.push(\n              `Suspicious embed. (embedCount=${embedCount}, contentLength=${contentLength})`\n            );\n          }\n          if (img === 0 && textDensity === 0) {\n            errs.push(\n              `No useful content. (img=${img}, textDensity=${textDensity})`\n            );\n          }\n\n          if (errs.length) {\n            this.log(\"Checks failed\", errs);\n            return true;\n          }\n\n          return false;\n        };\n\n        var haveToRemove = shouldRemoveNode();\n\n        // Allow simple lists of images to remain in pages\n        if (isList && haveToRemove) {\n          for (var x = 0; x < node.children.length; x++) {\n            let child = node.children[x];\n            // Don't filter in lists with li's that contain more than one child\n            if (child.children.length > 1) {\n              return haveToRemove;\n            }\n          }\n          let li_count = node.getElementsByTagName(\"li\").length;\n          // Only allow the list to remain if every li contains an image\n          if (img == li_count) {\n            return false;\n          }\n        }\n        return haveToRemove;\n      }\n      return false;\n    });\n  },\n\n  /**\n   * Clean out elements that match the specified conditions\n   *\n   * @param Element\n   * @param Function determines whether a node should be removed\n   * @return void\n   **/\n  _cleanMatchedNodes(e, filter) {\n    var endOfSearchMarkerNode = this._getNextNode(e, true);\n    var next = this._getNextNode(e);\n    while (next && next != endOfSearchMarkerNode) {\n      if (filter.call(this, next, next.className + \" \" + next.id)) {\n        next = this._removeAndGetNext(next);\n      } else {\n        next = this._getNextNode(next);\n      }\n    }\n  },\n\n  /**\n   * Clean out spurious headers from an Element.\n   *\n   * @param Element\n   * @return void\n   **/\n  _cleanHeaders(e) {\n    let headingNodes = this._getAllNodesWithTag(e, [\"h1\", \"h2\"]);\n    this._removeNodes(headingNodes, function (node) {\n      let shouldRemove = this._getClassWeight(node) < 0;\n      if (shouldRemove) {\n        this.log(\"Removing header with low class weight:\", node);\n      }\n      return shouldRemove;\n    });\n  },\n\n  /**\n   * Check if this node is an H1 or H2 element whose content is mostly\n   * the same as the article title.\n   *\n   * @param Element  the node to check.\n   * @return boolean indicating whether this is a title-like header.\n   */\n  _headerDuplicatesTitle(node) {\n    if (node.tagName != \"H1\" && node.tagName != \"H2\") {\n      return false;\n    }\n    var heading = this._getInnerText(node, false);\n    this.log(\"Evaluating similarity of header:\", heading, this._articleTitle);\n    return this._textSimilarity(this._articleTitle, heading) > 0.75;\n  },\n\n  _flagIsActive(flag) {\n    return (this._flags & flag) > 0;\n  },\n\n  _removeFlag(flag) {\n    this._flags = this._flags & ~flag;\n  },\n\n  _isProbablyVisible(node) {\n    // Have to null-check node.style and node.className.includes to deal with SVG and MathML nodes.\n    return (\n      (!node.style || node.style.display != \"none\") &&\n      (!node.style || node.style.visibility != \"hidden\") &&\n      !node.hasAttribute(\"hidden\") &&\n      //check for \"fallback-image\" so that wikimedia math images are displayed\n      (!node.hasAttribute(\"aria-hidden\") ||\n        node.getAttribute(\"aria-hidden\") != \"true\" ||\n        (node.className &&\n          node.className.includes &&\n          node.className.includes(\"fallback-image\")))\n    );\n  },\n\n  /**\n   * Runs readability.\n   *\n   * Workflow:\n   *  1. Prep the document by removing script tags, css, etc.\n   *  2. Build readability's DOM tree.\n   *  3. Grab the article content from the current dom tree.\n   *  4. Replace the current DOM tree with the new one.\n   *  5. Read peacefully.\n   *\n   * @return void\n   **/\n  parse() {\n    // Avoid parsing too large documents, as per configuration option\n    if (this._maxElemsToParse > 0) {\n      var numTags = this._doc.getElementsByTagName(\"*\").length;\n      if (numTags > this._maxElemsToParse) {\n        throw new Error(\n          \"Aborting parsing document; \" + numTags + \" elements found\"\n        );\n      }\n    }\n\n    // Unwrap image from noscript\n    this._unwrapNoscriptImages(this._doc);\n\n    // Extract JSON-LD metadata before removing scripts\n    var jsonLd = this._disableJSONLD ? {} : this._getJSONLD(this._doc);\n\n    // Remove script tags from the document.\n    this._removeScripts(this._doc);\n\n    this._prepDocument();\n\n    var metadata = this._getArticleMetadata(jsonLd);\n    this._metadata = metadata;\n    this._articleTitle = metadata.title;\n\n    var articleContent = this._grabArticle();\n    if (!articleContent) {\n      return null;\n    }\n\n    this.log(\"Grabbed: \" + articleContent.innerHTML);\n\n    this._postProcessContent(articleContent);\n\n    // If we haven't found an excerpt in the article's metadata, use the article's\n    // first paragraph as the excerpt. This is used for displaying a preview of\n    // the article's content.\n    if (!metadata.excerpt) {\n      var paragraphs = articleContent.getElementsByTagName(\"p\");\n      if (paragraphs.length) {\n        metadata.excerpt = paragraphs[0].textContent.trim();\n      }\n    }\n\n    var textContent = articleContent.textContent;\n    return {\n      title: this._articleTitle,\n      byline: metadata.byline || this._articleByline,\n      dir: this._articleDir,\n      lang: this._articleLang,\n      content: this._serializer(articleContent),\n      textContent,\n      length: textContent.length,\n      excerpt: metadata.excerpt,\n      siteName: metadata.siteName || this._articleSiteName,\n      publishedTime: metadata.publishedTime,\n    };\n  },\n};\n\nif (typeof module === \"object\") {\n  /* eslint-disable-next-line no-redeclare */\n  /* global module */\n  module.exports = Readability;\n}\n","/*\n * Copyright (c) 2010 Arc90 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This code is heavily based on Arc90's readability.js (1.7.1) script\n * available at: http://code.google.com/p/arc90labs-readability\n */\n\nvar REGEXPS = {\n  // NOTE: These two regular expressions are duplicated in\n  // Readability.js. Please keep both copies in sync.\n  unlikelyCandidates:\n    /-ad-|ai2html|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|footer|gdpr|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,\n  okMaybeItsACandidate: /and|article|body|column|content|main|shadow/i,\n};\n\nfunction isNodeVisible(node) {\n  // Have to null-check node.style and node.className.includes to deal with SVG and MathML nodes.\n  return (\n    (!node.style || node.style.display != \"none\") &&\n    !node.hasAttribute(\"hidden\") &&\n    //check for \"fallback-image\" so that wikimedia math images are displayed\n    (!node.hasAttribute(\"aria-hidden\") ||\n      node.getAttribute(\"aria-hidden\") != \"true\" ||\n      (node.className &&\n        node.className.includes &&\n        node.className.includes(\"fallback-image\")))\n  );\n}\n\n/**\n * Decides whether or not the document is reader-able without parsing the whole thing.\n * @param {Object} options Configuration object.\n * @param {number} [options.minContentLength=140] The minimum node content length used to decide if the document is readerable.\n * @param {number} [options.minScore=20] The minumum cumulated 'score' used to determine if the document is readerable.\n * @param {Function} [options.visibilityChecker=isNodeVisible] The function used to determine if a node is visible.\n * @return {boolean} Whether or not we suspect Readability.parse() will suceeed at returning an article object.\n */\nfunction isProbablyReaderable(doc, options = {}) {\n  // For backward compatibility reasons 'options' can either be a configuration object or the function used\n  // to determine if a node is visible.\n  if (typeof options == \"function\") {\n    options = { visibilityChecker: options };\n  }\n\n  var defaultOptions = {\n    minScore: 20,\n    minContentLength: 140,\n    visibilityChecker: isNodeVisible,\n  };\n  options = Object.assign(defaultOptions, options);\n\n  var nodes = doc.querySelectorAll(\"p, pre, article\");\n\n  // Get <div> nodes which have <br> node(s) and append them into the `nodes` variable.\n  // Some articles' DOM structures might look like\n  // <div>\n  //   Sentences<br>\n  //   <br>\n  //   Sentences<br>\n  // </div>\n  var brNodes = doc.querySelectorAll(\"div > br\");\n  if (brNodes.length) {\n    var set = new Set(nodes);\n    [].forEach.call(brNodes, function (node) {\n      set.add(node.parentNode);\n    });\n    nodes = Array.from(set);\n  }\n\n  var score = 0;\n  // This is a little cheeky, we use the accumulator 'score' to decide what to return from\n  // this callback:\n  return [].some.call(nodes, function (node) {\n    if (!options.visibilityChecker(node)) {\n      return false;\n    }\n\n    var matchString = node.className + \" \" + node.id;\n    if (\n      REGEXPS.unlikelyCandidates.test(matchString) &&\n      !REGEXPS.okMaybeItsACandidate.test(matchString)\n    ) {\n      return false;\n    }\n\n    if (node.matches(\"li p\")) {\n      return false;\n    }\n\n    var textContentLength = node.textContent.trim().length;\n    if (textContentLength < options.minContentLength) {\n      return false;\n    }\n\n    score += Math.sqrt(textContentLength - options.minContentLength);\n\n    if (score > options.minScore) {\n      return true;\n    }\n    return false;\n  });\n}\n\nif (typeof module === \"object\") {\n  /* eslint-disable-next-line no-redeclare */\n  /* global module */\n  module.exports = isProbablyReaderable;\n}\n","/* eslint-env node */\nvar Readability = require(\"./Readability\");\nvar isProbablyReaderable = require(\"./Readability-readerable\");\n\nmodule.exports = {\n  Readability,\n  isProbablyReaderable,\n};\n","import type { TanaNode, TanaNodeChild, TanaNodeChildContent } from '../types/index';\nimport { Readability } from '@mozilla/readability';\n\n/**\n * Extracts the main content from a DOM Document and structures it for the Tana input API.\n * Handles headers, links, lists, and inline formatting, and builds a hierarchy based on heading levels.\n * @param doc - The DOM Document to extract content from\n * @returns Array of TanaNode objects ready for the Tana input API\n */\n\nexport function extractContentForTana(doc: Document): TanaNode[] {\n  // Use the correct Node/Element constructors for the environment\n  const NodeCtor = doc.defaultView?.Node;\n  const ElementCtor = doc.defaultView?.Element;\n\n  // Helper to get formatted text with inline formatting\n  function getFormattedText(node: any): string {\n    if (NodeCtor && node instanceof NodeCtor && node.nodeType === NodeCtor.TEXT_NODE) {\n      return node.textContent || '';\n    }\n    if (!(ElementCtor && node instanceof ElementCtor)) {\n      return '';\n    }\n    switch (node.tagName) {\n      case 'A': {\n        const href = (node as HTMLAnchorElement).href;\n        const text = Array.from(node.childNodes).map(getFormattedText).join('');\n        return `[${text}](${href})`;\n      }\n      case 'STRONG':\n      case 'B': {\n        const text = Array.from(node.childNodes).map(getFormattedText).join('');\n        return `**${text}**`;\n      }\n      case 'EM':\n      case 'I': {\n        const text = Array.from(node.childNodes).map(getFormattedText).join('');\n        return `*${text}*`;\n      }\n      default: {\n        return Array.from(node.childNodes).map(getFormattedText).join('');\n      }\n    }\n  }\n\n  // Helper to sanitize node names (remove newlines, collapse whitespace)\n  function sanitizeNodeName(name: string): string {\n    return name.replace(/[\\r\\n]+/g, ' ').replace(/\\s+/g, ' ').trim();\n  }\n\n  // Use Readability to get the main article content\n  let main: HTMLElement | null = null;\n  try {\n    // IMPORTANT: Clone the document to prevent Readability from modifying the original page\n    const docClone = doc.cloneNode(true) as Document;\n    const article = new Readability(docClone).parse();\n    if (article && article.content) {\n      // Create a temporary DOM to parse the Readability HTML\n      const tempDiv = doc.createElement('div');\n      tempDiv.innerHTML = article.content;\n      main = tempDiv;\n    }\n  } catch (e) {\n    // Fallback to doc.body if Readability fails\n    main = doc.body;\n  }\n  if (!main) main = doc.body;\n  if (!main) return [];\n\n  // Helper to determine heading level (returns 1-6 for h1-h6, or 0 for non-heading)\n  function getHeadingLevel(node: Element): number {\n    const match = node.tagName.match(/^H([1-6])$/);\n    return match ? parseInt(match[1], 10) : 0;\n  }\n\n  // Helper to process a node and return a flat list of { node, level }\n  function flattenNodes(element: Element): Array<{ node: Element, level: number }> {\n    const result: Array<{ node: Element, level: number }> = [];\n    for (const child of Array.from(element.children)) {\n      const level = getHeadingLevel(child);\n      if (level > 0) {\n        // Heading: add it and continue (headings are structural)\n        result.push({ node: child, level });\n      } else if (child.tagName === 'UL' || child.tagName === 'OL') {\n        // List: flatten list items\n        for (const li of Array.from(child.children)) {\n          result.push({ node: li, level: 0 });\n        }\n      } else if (child.tagName === 'P' || child.tagName === 'LI' || \n                 child.tagName === 'BLOCKQUOTE' || child.tagName === 'PRE') {\n        // Content elements: add them directly (don't recurse into their children)\n        result.push({ node: child, level: 0 });\n      } else {\n        // Container elements (DIV, SECTION, etc.): recurse into children without adding the container itself\n        result.push(...flattenNodes(child));\n      }\n    }\n    return result;\n  }\n\n  // Build a hierarchy from the flat list\n  function buildHierarchy(flat: Array<{ node: Element, level: number }>): TanaNodeChildContent[] {\n    const stack: Array<{ level: number, node: TanaNodeChildContent }> = [];\n    const root: TanaNodeChildContent = { name: 'Root', children: [] };\n    stack.push({ level: 0, node: root });\n\n    for (const { node, level } of flat) {\n      if (level > 0) {\n        // Heading: create a new node\n        const headingNode: TanaNodeChildContent = { name: sanitizeNodeName(node.textContent || ''), children: [] };\n        // Find the parent (nearest lower level)\n        while (stack.length > 0 && stack[stack.length - 1].level >= level) {\n          stack.pop();\n        }\n        stack[stack.length - 1].node.children!.push(headingNode);\n        stack.push({ level, node: headingNode });\n      } else {\n        // Non-heading: add as child to the most recent heading\n        const content = getFormattedText(node);\n        if (content && content.trim()) {\n          stack[stack.length - 1].node.children!.push({ name: sanitizeNodeName(content) });\n        }\n      }\n    }\n    return root.children || [];\n  }\n\n  // Flatten the main content and build the hierarchy\n  const flat = flattenNodes(main);\n  const hierarchy = buildHierarchy(flat);\n\n  // Only include the hierarchical children as children of the main node\n  const rootNode: TanaNode = {\n    name: 'Extracted Content',\n    supertags: [],\n    children: hierarchy as (TanaNodeChild | TanaNodeChildContent)[],\n  };\n\n  // Debug: print the hierarchy structure\n  console.dir(hierarchy, { depth: null });\n\n  return [rootNode];\n} ","/**\n * Content script interfaces\n */\nimport { extractContentForTana } from './utils/extractContentForTana';\nimport type { TanaNode } from './types/index';\n\ninterface ExtractOptions {\n  includeContent: boolean;\n  includeTitle: boolean;\n}\n\ninterface ExtractRequest {\n  action: 'extractContent';\n  options: ExtractOptions;\n}\n\ninterface PageData {\n  url: string;\n  title: string;\n  author: string;\n  description: string;\n  content: string;\n  hierarchicalNodes?: TanaNode[];\n  error?: boolean;\n  message?: string;\n}\n\n/**\n * Content script - extracts content from the current page\n */\n\n// Listen for messages from the popup\nchrome.runtime.onMessage.addListener((\n  request: ExtractRequest,\n  sender: chrome.runtime.MessageSender,\n  sendResponse: (response: PageData) => void\n) => {\n  if (request.action === 'extractContent') {\n    const options = request.options || { includeContent: true, includeTitle: true };\n    \n    try {\n      // Extract page information\n      const pageData: PageData = {\n        url: window.location.href,\n        title: document.title,\n        author: extractAuthor(),\n        description: extractDescription(),\n        content: '' // Keeping this for now but not populating - using hierarchical content instead\n      };\n      \n      // Extract hierarchical content structure if requested\n      if (options.includeContent) {\n        try {\n          pageData.hierarchicalNodes = extractContentForTana(document);\n        } catch (error) {\n          console.warn('Could not extract hierarchical content:', error);\n        }\n      }\n      \n      // If title is not requested, use URL as title\n      if (!options.includeTitle || !pageData.title) {\n        pageData.title = pageData.url;\n      }\n      \n      // Pre-sanitize title to avoid API errors\n      if (pageData.title) {\n        pageData.title = pageData.title.replace(/\\r?\\n|\\r/g, ' ').trim();\n      }\n      \n      sendResponse(pageData);\n    } catch (error) {\n      console.error('Content extraction error:', error);\n      sendResponse({\n        url: window.location.href,\n        title: document.title,\n        author: '',\n        description: '',\n        content: '',\n        error: true,\n        message: error instanceof Error ? error.message : 'Unknown error occurred during content extraction'\n      });\n    }\n  }\n  \n  // Must return true for asynchronous response\n  return true;\n});\n\n\n\n/**\n * Extract author from meta tags and common page elements\n * @returns The extracted author or empty string if not found\n */\nfunction extractAuthor(): string {\n  // Try various meta tags that might contain author information\n  const authorSelectors = [\n    'meta[name=\"author\"]',\n    'meta[property=\"article:author\"]',\n    'meta[name=\"twitter:creator\"]',\n    'meta[property=\"og:site_name\"]'\n  ];\n  \n  for (const selector of authorSelectors) {\n    const metaTag = document.querySelector(selector);\n    if (metaTag && metaTag.getAttribute('content')) {\n      return metaTag.getAttribute('content') || '';\n    }\n  }\n  \n  // Try schema.org markup\n  const schemaSelectors = [\n    '[itemtype*=\"schema.org/Person\"] [itemprop=\"name\"]',\n    '[itemtype*=\"schema.org/Organization\"] [itemprop=\"name\"]'\n  ];\n  \n  for (const selector of schemaSelectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent) {\n      return element.textContent.trim();\n    }\n  }\n  \n  // Try byline classes commonly used\n  const bylineSelectors = ['.byline', '.author', '.article-author'];\n  \n  for (const selector of bylineSelectors) {\n    const element = document.querySelector(selector);\n    if (element && element.textContent) {\n      return element.textContent.trim();\n    }\n  }\n  \n  return '';\n}\n\n/**\n * Extract description from meta tags\n * @returns The extracted description or empty string if not found\n */\nfunction extractDescription(): string {\n  // Try various meta tags that might contain description\n  const descriptionSelectors = [\n    'meta[name=\"description\"]',\n    'meta[property=\"og:description\"]',\n    'meta[name=\"twitter:description\"]'\n  ];\n  \n  for (const selector of descriptionSelectors) {\n    const metaTag = document.querySelector(selector);\n    if (metaTag && metaTag.getAttribute('content')) {\n      return metaTag.getAttribute('content') || '';\n    }\n  }\n  \n  return '';\n}\n"],"names":["Readability","doc","options","el","logNode","node","attrPairs","attr","args","arg","msg","x","articleContent","nodeList","filterFn","i","parentNode","newTagName","fn","tagNames","tag","collection","classesToPreserve","className","cls","str","baseURI","documentURI","toAbsoluteURI","uri","links","link","href","text","container","medias","media","src","poster","srcset","newSrcset","_","p1","p2","p3","child","curTitle","origTitle","titleHadHierarchicalSeparators","wordCount","allSeparators","headings","trimmedTitle","match","heading","hOnes","curTitleWordCount","next","elem","br","replaced","brSibling","p","nextElem","sibling","replacement","shareElementThreshold","topCandidate","matchString","paragraph","contentElementCount","table","tbody","row","cell","nextNode","ignoreSelfAndKids","textA","textB","tokensA","tokensB","uniqTokensB","token","distanceB","rel","itemprop","bylineLength","maxDepth","ancestors","page","isPaging","pageCacheHtml","stripUnlikelyCandidates","elementsToScore","shouldRemoveTitleHeader","endOfSearchMarkerNode","itemPropNameNode","childNode","nextSibling","newNode","candidates","elementToScore","innerText","contentScore","ancestor","level","scoreDivider","topCandidates","c","cl","candidate","candidateScore","t","aTopCandidate","neededToCreateTopCandidate","parentOfTopCandidate","alternativeCandidateAncestors","MINIMUM_TOPCANDIDATES","listsContainingThisAncestor","ancestorIndex","lastScore","scoreThreshold","parentScore","siblingScoreThreshold","siblings","s","sl","append","contentBonus","linkDensity","nodeContent","nodeLength","div","parseSuccessful","textLength","a","b","articleDir","htmlEscapeMap","hex","numStr","num","scripts","metadata","jsonLdElement","content","parsed","it","schemaDotOrgRegex","matches","title","nameMatches","headlineMatches","author","err","jsonld","values","metaElements","propertyPattern","namePattern","element","elementName","elementProperty","name","articleAuthor","imgs","img","noscripts","noscript","tmp","prevElement","prevImg","newImg","attrName","normalizeSpaces","textContent","cur","linkLength","linkNode","coefficient","weight","isEmbed","tagName","depth","rows","columns","trs","rowspan","columnsInThisRow","cells","j","colspan","root","tables","role","datatable","summary","caption","dataTableDescendants","descendantExists","sizeInfo","parts","srcCouldBeRemoved","b64starts","b64length","copyTo","tags","childrenLength","children","isDataTable","isList","listLength","listNodes","list","tbl","li","input","headingDensity","embedCount","embeds","contentLength","textishTags","textDensity","isFigureChild","haveToRemove","errs","li_count","filter","headingNodes","shouldRemove","flag","numTags","jsonLd","paragraphs","module","REGEXPS","isNodeVisible","isProbablyReaderable","defaultOptions","nodes","brNodes","set","score","textContentLength","require$$0","require$$1","readability","extractContentForTana","NodeCtor","ElementCtor","getFormattedText","sanitizeNodeName","main","docClone","article","tempDiv","getHeadingLevel","flattenNodes","result","buildHierarchy","flat","stack","headingNode","hierarchy","rootNode","request","sender","sendResponse","pageData","extractAuthor","extractDescription","error","authorSelectors","selector","metaTag","schemaSelectors","bylineSelectors","descriptionSelectors"],"mappings":"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","x_google_ignoreList":[0,1,2]}