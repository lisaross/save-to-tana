import{s as w}from"./textUtils-DJNAmfRs.js";import{v as x}from"./validators-DAziD8Az.js";function N(e,o,t,n){if(!e)throw new Error("SaveData is required");if(!o||!o.trim())throw new Error("Valid targetNodeId is required");if(!t||!t.trim())throw new Error("Valid supertagId is required");if(!n)throw new Error("TanaFieldIds is required");const r={name:w(e.title||e.url),supertags:[{id:t}],children:[]};return e.url&&n.URL&&r.children.push({type:"field",attributeId:n.URL,children:[{dataType:"url",name:e.url}]}),e.author&&n.Author&&r.children.push({type:"field",attributeId:n.Author,children:[{name:w(e.author)}]}),e.description&&n.Description&&r.children.push({type:"field",attributeId:n.Description,children:[{name:w(e.description)}]}),{targetNodeId:o,nodes:[r]}}const C={maxPayloadSize:4500,maxNodesPerChunk:90,maxChildrenPerNode:50};function I(e){return JSON.stringify(e).length}function k(e){function o(t){let n=1;if("children"in t&&Array.isArray(t.children))for(const r of t.children)n+=o(r);return n}return e.nodes.reduce((t,n)=>t+o(n),0)}function P(e,o){const t=[];let n=[];for(const r of e){const s={targetNodeId:"test",nodes:[{name:"Test",supertags:[],children:[...n,r]}]},i=JSON.stringify(s).length>o.maxPayloadSize,u=n.length>=o.maxChildrenPerNode;if((i||u)&&n.length>0&&(t.push([...n]),n=[]),"children"in r&&Array.isArray(r.children)&&r.children.length>0)if(JSON.stringify(r).length>o.maxPayloadSize*.8){const d=P(r.children,o);for(let g=0;g<d.length;g++){const c={...r,name:"name"in r?r.name:"Content",children:d[g]},m={targetNodeId:"test",nodes:[{name:"Test",supertags:[],children:[...n,c]}]};JSON.stringify(m).length>o.maxPayloadSize&&n.length>0&&(t.push([...n]),n=[]),n.push(c)}}else n.push(r);else n.push(r)}return n.length>0&&t.push(n),t.length>0?t:[[]]}function E(e,o=C){const t=I(e),n=k(e);if(t<=o.maxPayloadSize&&n<=o.maxNodesPerChunk)return[e];const r=[];for(const s of e.nodes){if(!s.children||s.children.length===0){const a={targetNodeId:e.targetNodeId,nodes:[{...s}]};r.push(a);continue}const h=[],i=[];for(const a of s.children)"type"in a&&a.type==="field"?h.push(a):i.push(a);if(i.length===0){const a={targetNodeId:e.targetNodeId,nodes:[{...s,children:h}]};r.push(a);continue}const u=P(i,o);for(let a=0;a<u.length;a++){const d={...s,name:s.name,children:u[a]},g={targetNodeId:e.targetNodeId,nodes:[d]},c=I(g),m=k(g);(c>o.maxPayloadSize||m>o.maxNodesPerChunk)&&console.warn(`Chunk ${a+1} still exceeds limits: ${c} chars, ${m} nodes`),r.push(g)}}return r.length>0?r:[e]}chrome.runtime.onInstalled.addListener(()=>{console.log("Save to Tana extension installed")});chrome.commands.onCommand.addListener(e=>{switch(console.log("Command received:",e),e){case"reload":$();break;case"open-popup":D();break;default:console.log("Unknown command:",e)}});async function $(){try{console.log("Reloading extension...");const e=await chrome.tabs.query({url:chrome.runtime.getURL("*")});for(const o of e)o.id&&await chrome.tabs.remove(o.id);chrome.runtime.reload()}catch(e){console.error("Error reloading extension:",e)}}async function D(){try{console.log("Opening popup...");const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!e?.id){console.error("No active tab found");return}chrome.action.openPopup()}catch(e){console.error("Error opening popup:",e);try{await chrome.tabs.create({url:chrome.runtime.getURL("popup.html")})}catch(o){console.error("Fallback popup opening failed:",o)}}}chrome.runtime.onMessage.addListener((e,o,t)=>e.action==="saveToTana"?(b(e.data).then(n=>{t(n)}).catch(n=>{t({success:!1,error:n instanceof Error?n.message:"Unknown error occurred"})}),!0):!1);async function b(e){try{console.log("Starting saveToTana with data:",e);const o=await v();console.log("Retrieved configuration from storage:",o),T(o);const t=o.targetNodeId;console.log("Using target node ID:",t);const n=N(e,t,o.supertagId,o.tanaFieldIds);if(console.log("Formatted Tana payload:",n),e.hierarchicalNodes&&e.hierarchicalNodes.length>0&&n.nodes.length>0){const d=e.hierarchicalNodes[0].children||[];n.nodes[0].children.push(...d),console.log("Added content nodes:",d.length)}const r=JSON.stringify(n).length;if(!(r>4500))return console.log(`Payload size: ${r} chars - sending as single request`),{success:!0,data:await f(n,o.apiKey)};console.log(`Large content detected (${r} chars). Using hierarchical chunking strategy.`);const h=N(e,t,o.supertagId,o.tanaFieldIds);console.log("Sending main node with metadata...");const i=await f(h,o.apiKey),u=i.children?.[0]?.nodeId;if(!u)throw new Error("Could not get node ID from main node creation response");if(console.log(`Main node created with ID: ${u}`),await new Promise(d=>setTimeout(d,1e3)),e.hierarchicalNodes&&e.hierarchicalNodes.length>0){const d=e.hierarchicalNodes[0].children||[],g={targetNodeId:u,nodes:d.map(l=>({name:("name"in l?l.name:"Content")||"Content",supertags:[],children:l.children||[]}))},c=E(g);console.log(`Chunked content into ${c.length} parts`);const m=[];for(let l=0;l<c.length;l++){const y=c[l];console.log(`Sending content chunk ${l+1}/${c.length} (${JSON.stringify(y).length} chars)`);try{const p=await f(y,o.apiKey);m.push(p),l<c.length-1&&await new Promise(S=>setTimeout(S,1500))}catch(p){throw console.error(`Error sending content chunk ${l+1}:`,p),p instanceof Error&&p.message.includes("429")?new Error(`Rate limit exceeded while sending chunk ${l+1}/${c.length}. Please wait a moment and try again.`):new Error(`Failed to send content chunk ${l+1}/${c.length}: ${p}`)}}return{success:!0,data:{mainNode:i,contentChunks:m.length,responses:[i,...m]}}}return{success:!0,data:{mainNode:i,contentChunks:0,responses:[i]}}}catch(o){throw console.error("Error saving to Tana:",o),o}}async function v(){return new Promise((e,o)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],t=>{try{T(t);const n=x(t.targetNodeId);if(!n.success){o(new Error(`Invalid target node ID: ${n.error}`));return}const r={...t,targetNodeId:n.nodeId};e(r)}catch(n){o(n)}})})}function T(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function f(e,o,t=0){console.log(`Sending request to Tana API (attempt ${t+1})...`);try{const s=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify(e)});if(console.log("API response status:",s.status),!s.ok){const i=await s.text();if(console.error("API error response:",i),s.status===429&&t<3){const u=2e3*Math.pow(2,t);return console.log(`Rate limited. Retrying in ${u}ms...`),await new Promise(a=>setTimeout(a,u)),f(e,o,t+1)}throw new Error(`API error (${s.status}): ${i}`)}const h=await s.json();return console.log("API success response:",h),h}catch(s){if(t<3&&!(s instanceof Error&&s.message.includes("API error"))){const h=2e3*Math.pow(2,t);return console.log(`Network error. Retrying in ${h}ms...`),await new Promise(i=>setTimeout(i,h)),f(e,o,t+1)}throw s}}
//# sourceMappingURL=background.js.map
