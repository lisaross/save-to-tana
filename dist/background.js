function l(e){return e?e.replace(/\r?\n|\r/g," ").replace(/\s+/g," ").trim():""}function v(e,t){const r=e.split(/\n\n+/),o=[];let n="";for(const s of r)if((n+s).length>t)if(n&&(o.push(n),n=""),s.length>t){const u=s.match(/[^.!?]+[.!?]+/g)||[s];for(const i of u)if(i.length>t)for(let c=0;c<i.length;c+=t)o.push(i.slice(c,c+t));else(n+i).length>t?(o.push(n),n=i):n+=i}else n=s;else n+=(n?`

`:"")+s;return n&&o.push(n),o}function y(e,t,r,o){if(!e)throw new Error("SaveData is required");if(!t||!t.trim())throw new Error("Valid targetNodeId is required");if(!r||!r.trim())throw new Error("Valid supertagId is required");if(!o)throw new Error("TanaFieldIds is required");const n={name:l(e.title||e.url),supertags:[{id:r}],children:[]};if(e.url&&o.URL&&n.children.push({type:"field",attributeId:o.URL,children:[{dataType:"url",name:e.url}]}),e.author&&o.Author&&n.children.push({type:"field",attributeId:o.Author,children:[{name:l(e.author)}]}),e.description&&o.Description&&n.children.push({type:"field",attributeId:o.Description,children:[{name:l(e.description)}]}),e.notes&&e.notes.trim()&&n.children.push({name:l(e.notes)}),e.content&&o.Content){const s=l(e.content),u=4e3;let i=[];s.length>u?i=v(s,u).map(c=>({name:c})):i=[{name:s}],n.children.push({type:"field",attributeId:o.Content,children:i})}return{targetNodeId:t,nodes:[n]}}chrome.runtime.onInstalled.addListener(async()=>{console.log("Save to Tana extension installed"),await I()});chrome.omnibox.onInputStarted.addListener(()=>{console.log("Omnibox input started for Save to Tana")});chrome.omnibox.onInputChanged.addListener((e,t)=>{const r=[];e.trim()===""?(r.push({content:"quick",description:"Quick save current page"}),r.push({content:"notes",description:"Save with notes dialog"})):(r.push({content:e,description:`Save current page with title: "${e}"`}),r.push({content:"quick",description:"Quick save current page (original title)"})),t(r)});chrome.omnibox.onInputEntered.addListener(async(e,t)=>{const[r]=await chrome.tabs.query({active:!0,currentWindow:!0});r?.id&&(e==="quick"?await f(r.id):e==="notes"?await g(r.id):await C(r.id,e.trim()))});chrome.commands.onCommand.addListener(async e=>{console.log(`Command received: ${e}`);const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(t?.id)switch(e){case"quick-save":await f(t.id);break;case"save-with-notes":await g(t.id);break;default:console.log(`Unknown command: ${e}`)}});chrome.contextMenus.onClicked.addListener(async(e,t)=>{if(t?.id)switch(e.menuItemId){case"save-page":await f(t.id);break;case"save-with-notes":await g(t.id);break;case"save-selection":e.selectionText&&await E(t.id,e.selectionText);break;default:console.log(`Unknown context menu item: ${e.menuItemId}`)}});chrome.runtime.onMessage.addListener((e,t,r)=>{switch(console.log(`Message received: ${e.action}`,e),e.action){case"saveToTana":return k(e,r),!0;case"extractContent":return console.log("Extract content request forwarded to content script"),!1;case"injectOverlay":return h(e,r),!0;case"quickSave":return x(e,r),!0;case"saveWithNotes":return b(e,r),!0;default:return console.log(`Unknown message action: ${e.action}`),r({success:!1,error:"Unknown action"}),!1}});async function d(e){try{console.log("Starting saveToTana with data:",e);const t=await T();console.log("Retrieved configuration from storage:",t),w(t);const r=t.targetNodeId;console.log("Using target node ID:",r);const o=y(e,r,t.supertagId,t.tanaFieldIds);return console.log("Formatted Tana payload:",o),{success:!0,data:await S(o,t.apiKey)}}catch(t){throw console.error("Error saving to Tana:",t),t}}async function T(){return new Promise((e,t)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],r=>{try{w(r),e(r)}catch(o){t(o)}})})}function w(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function S(e,t){console.log("Sending request to Tana API...");const r=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(e)});if(console.log("API response status:",r.status),!r.ok){const n=await r.text();throw console.error("API error response:",n),new Error(`API error (${r.status}): ${n}`)}const o=await r.json();return console.log("API success response:",o),o}async function I(){try{await chrome.contextMenus.removeAll(),chrome.contextMenus.create({id:"save-page",title:"Save page to Tana",contexts:["page"]}),chrome.contextMenus.create({id:"save-with-notes",title:"Save page to Tana with notes",contexts:["page"]}),chrome.contextMenus.create({id:"save-selection",title:"Save selection to Tana",contexts:["selection"]}),console.log("Context menus created successfully")}catch(e){console.error("Error setting up context menus:",e)}}async function k(e,t){try{const r=await d(e.data);t(r)}catch(r){t({success:!1,error:r instanceof Error?r.message:"Unknown error occurred"})}}async function h(e,t){try{await chrome.scripting.executeScript({target:{tabId:e.tabId},files:["content.js"]}),t({success:!0})}catch(r){console.error("Error injecting overlay:",r),t({success:!1,error:r instanceof Error?r.message:"Failed to inject overlay"})}}async function x(e,t){try{const r=await m(e.tabId);t(r)}catch(r){t({success:!1,error:r instanceof Error?r.message:"Quick save failed"})}}async function b(e,t){try{await h({action:"injectOverlay",tabId:e.tabId},r=>{r.success&&chrome.tabs.sendMessage(e.tabId,{action:"showNotesDialog"})}),t({success:!0})}catch(r){t({success:!1,error:r instanceof Error?r.message:"Save with notes failed"})}}async function f(e){try{const t=await m(e);t.success?a("Page saved to Tana successfully!","success"):a(t.error||"Save failed","error")}catch(t){console.error("Quick save error:",t),a("Quick save failed","error")}}async function g(e){try{await h({action:"injectOverlay",tabId:e},t=>{t.success?chrome.tabs.sendMessage(e,{action:"showNotesDialog"}):a("Failed to open notes dialog","error")})}catch(t){console.error("Save with notes error:",t),a("Failed to open notes dialog","error")}}async function C(e,t){try{const r=await p(e);if(r){t.trim()&&(r.notes=t);const o=await d(r);o.success?a(`Page saved to Tana with notes: "${t}"`,"success"):a(o.error||"Save failed","error")}else a("Failed to extract page content","error")}catch(r){console.error("Save with custom notes error:",r),a("Save with custom notes failed","error")}}async function E(e,t){try{const r=await p(e,{includeContent:!1});if(r){r.content=t,r.title=`Selection from ${r.title}`;const o=await d(r);o.success?a("Selection saved to Tana successfully!","success"):a(o.error||"Save failed","error")}}catch(r){console.error("Save selection error:",r),a("Save selection failed","error")}}async function m(e){try{const t=await p(e);if(!t)throw new Error("Failed to extract page content");return await d(t)}catch(t){return{success:!1,error:t instanceof Error?t.message:"Quick save failed"}}}async function p(e,t={}){return new Promise(r=>{const o={includeContent:t.includeContent??!0,includeTitle:t.includeTitle??!0};chrome.tabs.sendMessage(e,{action:"extractContent",options:o},n=>{if(chrome.runtime.lastError){console.error("Content extraction error:",chrome.runtime.lastError),r(null);return}n&&!n.error?r({url:n.url,title:n.title,author:n.author,description:n.description,content:n.content}):(console.error("Content extraction failed:",n?.message),r(null))})})}function a(e,t="success"){const r=`tana-${Date.now()}`;chrome.notifications.create(r,{type:"basic",title:"Save to Tana",message:e}),setTimeout(()=>{chrome.notifications.clear(r)},3e3)}
//# sourceMappingURL=background.js.map
