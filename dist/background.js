function i(e){return e?e.replace(/\r?\n|\r/g," ").replace(/\s+/g," ").trim():""}function l(e,o,n,r){if(!e)throw new Error("SaveData is required");if(!o||!o.trim())throw new Error("Valid targetNodeId is required");if(!n||!n.trim())throw new Error("Valid supertagId is required");if(!r)throw new Error("TanaFieldIds is required");const t={name:i(e.title||e.url),supertags:[{id:n}],children:[]};return e.url&&r.URL&&t.children.push({type:"field",attributeId:r.URL,children:[{dataType:"url",name:e.url}]}),e.author&&r.Author&&t.children.push({type:"field",attributeId:r.Author,children:[{name:i(e.author)}]}),e.description&&r.Description&&t.children.push({type:"field",attributeId:r.Description,children:[{name:i(e.description)}]}),{targetNodeId:o,nodes:[t]}}chrome.runtime.onInstalled.addListener(()=>{console.log("Save to Tana extension installed")});chrome.runtime.onMessage.addListener((e,o,n)=>e.action==="saveToTana"?(d(e.data).then(r=>{n(r)}).catch(r=>{n({success:!1,error:r instanceof Error?r.message:"Unknown error occurred"})}),!0):!1);async function d(e){try{console.log("Starting saveToTana with data:",e);const o=await u();console.log("Retrieved configuration from storage:",o),c(o);const n=o.targetNodeId;console.log("Using target node ID:",n);const r=l(e,n,o.supertagId,o.tanaFieldIds);if(console.log("Formatted Tana payload:",r),e.hierarchicalNodes&&e.hierarchicalNodes.length>0&&r.nodes.length>0){const s=e.hierarchicalNodes[0].children.filter(a=>a.children&&Array.isArray(a.children)&&a.children.length>0);r.nodes[0].children.push(...s),console.log("Added hierarchical content nodes:",s.length)}return{success:!0,data:await h(r,o.apiKey)}}catch(o){throw console.error("Error saving to Tana:",o),o}}async function u(){return new Promise((e,o)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],n=>{try{c(n),e(n)}catch(r){o(r)}})})}function c(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function h(e,o){console.log("Sending request to Tana API...");const n=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`},body:JSON.stringify(e)});if(console.log("API response status:",n.status),!n.ok){const t=await n.text();throw console.error("API error response:",t),new Error(`API error (${n.status}): ${t}`)}const r=await n.json();return console.log("API success response:",r),r}
//# sourceMappingURL=background.js.map
