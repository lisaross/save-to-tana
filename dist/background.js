function w(e){return e?e.replace(/\r?\n|\r/g," ").replace(/\s+/g," ").trim():""}function N(e,t,r,n){if(!e)throw new Error("SaveData is required");if(!t||!t.trim())throw new Error("Valid targetNodeId is required");if(!r||!r.trim())throw new Error("Valid supertagId is required");if(!n)throw new Error("TanaFieldIds is required");const o={name:w(e.title||e.url),supertags:[{id:r}],children:[]};return e.url&&n.URL&&o.children.push({type:"field",attributeId:n.URL,children:[{dataType:"url",name:e.url}]}),e.author&&n.Author&&o.children.push({type:"field",attributeId:n.Author,children:[{name:w(e.author)}]}),e.description&&n.Description&&o.children.push({type:"field",attributeId:n.Description,children:[{name:w(e.description)}]}),{targetNodeId:t,nodes:[o]}}const x={maxPayloadSize:4500,maxNodesPerChunk:90,maxChildrenPerNode:50};function I(e){return JSON.stringify(e).length}function P(e){function t(r){let n=1;if("children"in r&&Array.isArray(r.children))for(const o of r.children)n+=t(o);return n}return e.nodes.reduce((r,n)=>r+t(n),0)}function k(e,t){const r=[];let n=[];for(const o of e){const s={targetNodeId:"test",nodes:[{name:"Test",supertags:[],children:[...n,o]}]},a=JSON.stringify(s).length>t.maxPayloadSize,g=n.length>=t.maxChildrenPerNode;if((a||g)&&n.length>0&&(r.push([...n]),n=[]),"children"in o&&Array.isArray(o.children)&&o.children.length>0)if(JSON.stringify(o).length>t.maxPayloadSize*.8){const h=k(o.children,t);for(let d=0;d<h.length;d++){const l={...o,name:"name"in o?o.name:"Content",children:h[d]},m={targetNodeId:"test",nodes:[{name:"Test",supertags:[],children:[...n,l]}]};JSON.stringify(m).length>t.maxPayloadSize&&n.length>0&&(r.push([...n]),n=[]),n.push(l)}}else n.push(o);else n.push(o)}return n.length>0&&r.push(n),r.length>0?r:[[]]}function C(e,t=x){const r=I(e),n=P(e);if(r<=t.maxPayloadSize&&n<=t.maxNodesPerChunk)return[e];const o=[];for(const s of e.nodes){if(!s.children||s.children.length===0){const i={targetNodeId:e.targetNodeId,nodes:[{...s}]};o.push(i);continue}const u=[],a=[];for(const i of s.children)"type"in i&&i.type==="field"?u.push(i):a.push(i);if(a.length===0){const i={targetNodeId:e.targetNodeId,nodes:[{...s,children:u}]};o.push(i);continue}const g=k(a,t);for(let i=0;i<g.length;i++){const h={...s,name:s.name,children:g[i]},d={targetNodeId:e.targetNodeId,nodes:[h]},l=I(d),m=P(d);(l>t.maxPayloadSize||m>t.maxNodesPerChunk)&&console.warn(`Chunk ${i+1} still exceeds limits: ${l} chars, ${m} nodes`),o.push(d)}}return o.length>0?o:[e]}chrome.runtime.onInstalled.addListener(()=>{console.log("Save to Tana extension installed")});chrome.runtime.onMessage.addListener((e,t,r)=>e.action==="saveToTana"?($(e.data).then(n=>{r(n)}).catch(n=>{r({success:!1,error:n instanceof Error?n.message:"Unknown error occurred"})}),!0):!1);async function $(e){try{console.log("Starting saveToTana with data:",e);const t=await A();console.log("Retrieved configuration from storage:",t),T(t);const r=t.targetNodeId;console.log("Using target node ID:",r);const n=N(e,r,t.supertagId,t.tanaFieldIds);if(console.log("Formatted Tana payload:",n),e.hierarchicalNodes&&e.hierarchicalNodes.length>0&&n.nodes.length>0){const h=e.hierarchicalNodes[0].children.filter(d=>d.children&&Array.isArray(d.children)&&d.children.length>0);n.nodes[0].children.push(...h),console.log("Added hierarchical content nodes:",h.length)}const o=JSON.stringify(n).length;if(!(o>4500))return console.log(`Payload size: ${o} chars - sending as single request`),{success:!0,data:await f(n,t.apiKey)};console.log(`Large content detected (${o} chars). Using hierarchical chunking strategy.`);const u=N(e,r,t.supertagId,t.tanaFieldIds);console.log("Sending main node with metadata...");const a=await f(u,t.apiKey),g=a.children?.[0]?.nodeId;if(!g)throw new Error("Could not get node ID from main node creation response");if(console.log(`Main node created with ID: ${g}`),await new Promise(h=>setTimeout(h,1e3)),e.hierarchicalNodes&&e.hierarchicalNodes.length>0){const h=e.hierarchicalNodes[0].children.filter(c=>c.children&&Array.isArray(c.children)&&c.children.length>0),d={targetNodeId:g,nodes:h.map(c=>({name:("name"in c?c.name:"Content")||"Content",supertags:[],children:c.children||[]}))},l=C(d);console.log(`Chunked content into ${l.length} parts`);const m=[];for(let c=0;c<l.length;c++){const y=l[c];console.log(`Sending content chunk ${c+1}/${l.length} (${JSON.stringify(y).length} chars)`);try{const p=await f(y,t.apiKey);m.push(p),c<l.length-1&&await new Promise(S=>setTimeout(S,1500))}catch(p){throw console.error(`Error sending content chunk ${c+1}:`,p),p instanceof Error&&p.message.includes("429")?new Error(`Rate limit exceeded while sending chunk ${c+1}/${l.length}. Please wait a moment and try again.`):new Error(`Failed to send content chunk ${c+1}/${l.length}: ${p}`)}}return{success:!0,data:{mainNode:a,contentChunks:m.length,responses:[a,...m]}}}return{success:!0,data:{mainNode:a,contentChunks:0,responses:[a]}}}catch(t){throw console.error("Error saving to Tana:",t),t}}async function A(){return new Promise((e,t)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],r=>{try{T(r),e(r)}catch(n){t(n)}})})}function T(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function f(e,t,r=0){console.log(`Sending request to Tana API (attempt ${r+1})...`);try{const s=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(e)});if(console.log("API response status:",s.status),!s.ok){const a=await s.text();if(console.error("API error response:",a),s.status===429&&r<3){const g=2e3*Math.pow(2,r);return console.log(`Rate limited. Retrying in ${g}ms...`),await new Promise(i=>setTimeout(i,g)),f(e,t,r+1)}throw new Error(`API error (${s.status}): ${a}`)}const u=await s.json();return console.log("API success response:",u),u}catch(s){if(r<3&&!(s instanceof Error&&s.message.includes("API error"))){const u=2e3*Math.pow(2,r);return console.log(`Network error. Retrying in ${u}ms...`),await new Promise(a=>setTimeout(a,u)),f(e,t,r+1)}throw s}}
//# sourceMappingURL=background.js.map
