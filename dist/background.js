import{s as w}from"./textUtils-DJNAmfRs.js";import{v as C}from"./validators-DAziD8Az.js";function I(e,n,o,t){if(!e)throw new Error("SaveData is required");if(!n||!n.trim())throw new Error("Valid targetNodeId is required");if(!o||!o.trim())throw new Error("Valid supertagId is required");if(!t)throw new Error("TanaFieldIds is required");const r={name:w(e.title||e.url),supertags:[{id:o}],children:[]};return e.url&&t.URL&&r.children.push({type:"field",attributeId:t.URL,children:[{dataType:"url",name:e.url}]}),e.author&&t.Author&&r.children.push({type:"field",attributeId:t.Author,children:[{name:w(e.author)}]}),e.description&&t.Description&&r.children.push({type:"field",attributeId:t.Description,children:[{name:w(e.description)}]}),{targetNodeId:n,nodes:[r]}}const E={maxPayloadSize:4500,maxNodesPerChunk:90,maxChildrenPerNode:50};function k(e){return JSON.stringify(e).length}function T(e){function n(o){let t=1;if("children"in o&&Array.isArray(o.children))for(const r of o.children)t+=n(r);return t}return e.nodes.reduce((o,t)=>o+n(t),0)}function P(e,n){const o=[];let t=[];for(const r of e){const s={targetNodeId:"test",nodes:[{name:"Test",supertags:[],children:[...t,r]}]},i=JSON.stringify(s).length>n.maxPayloadSize,h=t.length>=n.maxChildrenPerNode;if((i||h)&&t.length>0&&(o.push([...t]),t=[]),"children"in r&&Array.isArray(r.children)&&r.children.length>0)if(JSON.stringify(r).length>n.maxPayloadSize*.8){const u=P(r.children,n);for(let d=0;d<u.length;d++){const c={...r,name:"name"in r?r.name:"Content",children:u[d]},p={targetNodeId:"test",nodes:[{name:"Test",supertags:[],children:[...t,c]}]};JSON.stringify(p).length>n.maxPayloadSize&&t.length>0&&(o.push([...t]),t=[]),t.push(c)}}else t.push(r);else t.push(r)}return t.length>0&&o.push(t),o.length>0?o:[[]]}function $(e,n=E){const o=k(e),t=T(e);if(o<=n.maxPayloadSize&&t<=n.maxNodesPerChunk)return[e];const r=[];for(const s of e.nodes){if(!s.children||s.children.length===0){const a={targetNodeId:e.targetNodeId,nodes:[{...s}]};r.push(a);continue}const l=[],i=[];for(const a of s.children)"type"in a&&a.type==="field"?l.push(a):i.push(a);if(i.length===0){const a={targetNodeId:e.targetNodeId,nodes:[{...s,children:l}]};r.push(a);continue}const h=P(i,n);for(let a=0;a<h.length;a++){const u={...s,name:s.name,children:h[a]},d={targetNodeId:e.targetNodeId,nodes:[u]},c=k(d),p=T(d);(c>n.maxPayloadSize||p>n.maxNodesPerChunk)&&console.warn(`Chunk ${a+1} still exceeds limits: ${c} chars, ${p} nodes`),r.push(d)}}return r.length>0?r:[e]}chrome.runtime.onInstalled.addListener(()=>{console.log("Save to Tana extension installed")});chrome.commands.onCommand.addListener(e=>{switch(console.log("Command received:",e),e){case"reload":z();break;case"open-popup":D();break;default:console.log("Unknown command:",e)}});async function z(){try{console.log("Reloading extension...");const e=await chrome.tabs.query({url:chrome.runtime.getURL("*")});for(const n of e)n.id&&await chrome.tabs.remove(n.id);chrome.runtime.reload()}catch(e){console.error("Error reloading extension:",e)}}async function D(){try{console.log("Opening popup...");const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!e?.id){console.error("No active tab found");return}chrome.action.openPopup()}catch(e){console.error("Error opening popup:",e);try{await chrome.tabs.create({url:chrome.runtime.getURL("popup.html")})}catch(n){console.error("Fallback popup opening failed:",n)}}}chrome.runtime.onMessage.addListener((e,n,o)=>e.action==="saveToTana"?(b(e.data).then(t=>{o(t)}).catch(t=>{o({success:!1,error:t instanceof Error?t.message:"Unknown error occurred"})}),!0):!1);async function b(e){try{console.log("Starting saveToTana with data:",e);const n=await v();console.log("Retrieved configuration from storage:",n),S(n);const o=n.targetNodeId;console.log("Using target node ID:",o);const t=I(e,o,n.supertagId,n.tanaFieldIds);if(console.log("Formatted Tana payload:",t),e.hierarchicalNodes&&e.hierarchicalNodes.length>0&&t.nodes.length>0){const d=(e.hierarchicalNodes[0].children||[]).map(N);t.nodes[0].children.push(...d),console.log("Added content nodes:",d.length)}const r=JSON.stringify(t).length;if(!(r>4500))return console.log(`Payload size: ${r} chars - sending as single request`),{success:!0,data:await y(t,n.apiKey)};console.log(`Large content detected (${r} chars). Using hierarchical chunking strategy.`);const l=I(e,o,n.supertagId,n.tanaFieldIds);console.log("Sending main node with metadata...");const i=await y(l,n.apiKey),h=i.children?.[0]?.nodeId;if(!h)throw new Error("Could not get node ID from main node creation response");if(console.log(`Main node created with ID: ${h}`),await new Promise(u=>setTimeout(u,1e3)),e.hierarchicalNodes&&e.hierarchicalNodes.length>0){const u=e.hierarchicalNodes[0].children||[],d={targetNodeId:h,nodes:u.map(g=>{const f=N(g);return{name:f.name||"Content",supertags:[],children:f.children||[]}})},c=$(d);console.log(`Chunked content into ${c.length} parts`);const p=[];for(let g=0;g<c.length;g++){const f=c[g];console.log(`Sending content chunk ${g+1}/${c.length} (${JSON.stringify(f).length} chars)`);try{const m=await y(f,n.apiKey);p.push(m),g<c.length-1&&await new Promise(x=>setTimeout(x,1500))}catch(m){throw console.error(`Error sending content chunk ${g+1}:`,m),m instanceof Error&&m.message.includes("429")?new Error(`Rate limit exceeded while sending chunk ${g+1}/${c.length}. Please wait a moment and try again.`):new Error(`Failed to send content chunk ${g+1}/${c.length}: ${m}`)}}return{success:!0,data:{mainNode:i,contentChunks:p.length,responses:[i,...p]}}}return{success:!0,data:{mainNode:i,contentChunks:0,responses:[i]}}}catch(n){throw console.error("Error saving to Tana:",n),n}}async function v(){return new Promise((e,n)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],o=>{try{S(o);const t=C(o.targetNodeId);if(!t.success){n(new Error(`Invalid target node ID: ${t.error}`));return}const r={...o,targetNodeId:t.nodeId};e(r)}catch(t){n(t)}})})}function S(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function y(e,n,o=0){console.log(`Sending request to Tana API (attempt ${o+1})...`);try{const s=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`},body:JSON.stringify(e)});if(console.log("API response status:",s.status),!s.ok){const i=await s.text();if(console.error("API error response:",i),s.status===429&&o<3){const h=2e3*Math.pow(2,o);return console.log(`Rate limited. Retrying in ${h}ms...`),await new Promise(a=>setTimeout(a,h)),y(e,n,o+1)}throw new Error(`API error (${s.status}): ${i}`)}const l=await s.json();return console.log("API success response:",l),l}catch(s){if(o<3&&!(s instanceof Error&&s.message.includes("API error"))){const l=2e3*Math.pow(2,o);return console.log(`Network error. Retrying in ${l}ms...`),await new Promise(i=>setTimeout(i,l)),y(e,n,o+1)}throw s}}function N(e){const n={name:w(e.name||"Content")};return e.children&&Array.isArray(e.children)&&(n.children=e.children.map(N)),e.dataType&&(n.dataType=e.dataType),n}
//# sourceMappingURL=background.js.map
