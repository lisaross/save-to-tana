function u(e){return e?e.replace(/\r?\n|\r/g," ").replace(/\s+/g," ").trim():""}function h(e,t){const o=e.split(/\n\n+/),n=[];let r="";for(const s of o)if((r+s).length>t)if(r&&(n.push(r),r=""),s.length>t){const c=s.match(/[^.!?]+[.!?]+/g)||[s];for(const a of c)if(a.length>t)for(let i=0;i<a.length;i+=t)n.push(a.slice(i,i+t));else(r+a).length>t?(n.push(r),r=a):r+=a}else r=s;else r+=(r?`

`:"")+s;return r&&n.push(r),n}function d(e,t,o,n){if(!e)throw new Error("SaveData is required");if(!t||!t.trim())throw new Error("Valid targetNodeId is required");if(!o||!o.trim())throw new Error("Valid supertagId is required");if(!n)throw new Error("TanaFieldIds is required");const r={name:u(e.title||e.url),supertags:[{id:o}],children:[]};if(e.url&&n.URL&&r.children.push({type:"field",attributeId:n.URL,children:[{dataType:"url",name:e.url}]}),e.author&&n.Author&&r.children.push({type:"field",attributeId:n.Author,children:[{name:u(e.author)}]}),e.description&&n.Description&&r.children.push({type:"field",attributeId:n.Description,children:[{name:u(e.description)}]}),e.content&&n.Content){const s=u(e.content),c=4e3;let a=[];s.length>c?a=h(s,c).map(i=>({name:i})):a=[{name:s}],r.children.push({type:"field",attributeId:n.Content,children:a})}return{targetNodeId:t,nodes:[r]}}chrome.runtime.onInstalled.addListener(()=>{console.log("Save to Tana extension installed")});chrome.runtime.onMessage.addListener((e,t,o)=>e.action==="saveToTana"?(p(e.data).then(n=>{o(n)}).catch(n=>{o({success:!1,error:n instanceof Error?n.message:"Unknown error occurred"})}),!0):!1);async function p(e){try{console.log("Starting saveToTana with data:",e);const t=await g();console.log("Retrieved configuration from storage:",t),l(t);const o=t.targetNodeId;console.log("Using target node ID:",o);const n=d(e,o,t.supertagId,t.tanaFieldIds);return console.log("Formatted Tana payload:",n),{success:!0,data:await f(n,t.apiKey)}}catch(t){throw console.error("Error saving to Tana:",t),t}}async function g(){return new Promise((e,t)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],o=>{try{l(o),e(o)}catch(n){t(n)}})})}function l(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function f(e,t){console.log("Sending request to Tana API...");const o=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(e)});if(console.log("API response status:",o.status),!o.ok){const r=await o.text();throw console.error("API error response:",r),new Error(`API error (${o.status}): ${r}`)}const n=await o.json();return console.log("API success response:",n),n}
//# sourceMappingURL=background.js.map
