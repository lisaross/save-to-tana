function d(e){return e?e.replace(/\r?\n|\r/g," ").replace(/\s+/g," ").trim():""}function y(e,r){const t=e.split(/\n\n+/),n=[];let o="";for(const s of t)if((o+s).length>r)if(o&&(n.push(o),o=""),s.length>r){const u=s.match(/[^.!?]+[.!?]+/g)||[s];for(const i of u)if(i.length>r)for(let c=0;c<i.length;c+=r)n.push(i.slice(c,c+r));else(o+i).length>r?(n.push(o),o=i):o+=i}else o=s;else o+=(o?`

`:"")+s;return o&&n.push(o),n}function T(e,r,t,n){if(!e)throw new Error("SaveData is required");if(!r||!r.trim())throw new Error("Valid targetNodeId is required");if(!t||!t.trim())throw new Error("Valid supertagId is required");if(!n)throw new Error("TanaFieldIds is required");const o={name:d(e.title||e.url),supertags:[{id:t}],children:[]};if(e.url&&n.URL&&o.children.push({type:"field",attributeId:n.URL,children:[{dataType:"url",name:e.url}]}),e.author&&n.Author&&o.children.push({type:"field",attributeId:n.Author,children:[{name:d(e.author)}]}),e.description&&n.Description&&o.children.push({type:"field",attributeId:n.Description,children:[{name:d(e.description)}]}),e.content&&n.Content){const s=d(e.content),u=4e3;let i=[];s.length>u?i=y(s,u).map(c=>({name:c})):i=[{name:s}],o.children.push({type:"field",attributeId:n.Content,children:i})}return{targetNodeId:r,nodes:[o]}}chrome.runtime.onInstalled.addListener(async()=>{console.log("Save to Tana extension installed"),await S()});chrome.omnibox.onInputStarted.addListener(()=>{console.log("Omnibox input started for Save to Tana")});chrome.omnibox.onInputChanged.addListener((e,r)=>{const t=[];e.trim()===""?t.push({content:"quick-save",description:"Quick save current page"}):(t.push({content:`save:${e}`,description:`Save current page with title: "${e}"`}),t.push({content:`quick:${e}`,description:"Quick save current page (ignore text)"})),r(t)});chrome.omnibox.onInputEntered.addListener(async(e,r)=>{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(t?.id)if(e==="quick-save"||e.trim()==="")await l(t.id);else if(e.startsWith("save:")){const n=e.substring(5).trim();n?await w(t.id,n):await l(t.id)}else e.startsWith("quick:")?await l(t.id):await w(t.id,e.trim())});chrome.commands.onCommand.addListener(async e=>{console.log(`Command received: ${e}`);const[r]=await chrome.tabs.query({active:!0,currentWindow:!0});if(r?.id)switch(e){case"quick-save":await l(r.id);break;case"save-with-notes":await m(r.id);break;default:console.log(`Unknown command: ${e}`)}});chrome.contextMenus.onClicked.addListener(async(e,r)=>{if(r?.id)switch(e.menuItemId){case"save-page":await l(r.id);break;case"save-with-notes":await m(r.id);break;case"save-selection":e.selectionText&&await E(r.id,e.selectionText);break;default:console.log(`Unknown context menu item: ${e.menuItemId}`)}});chrome.runtime.onMessage.addListener((e,r,t)=>{switch(console.log(`Message received: ${e.action}`,e),e.action){case"saveToTana":return b(e,t),!0;case"extractContent":return console.log("Extract content request forwarded to content script"),!1;case"injectOverlay":return f(e,t),!0;case"quickSave":return C(e,t),!0;case"saveWithNotes":return x(e,t),!0;default:return console.log(`Unknown message action: ${e.action}`),t({success:!1,error:"Unknown action"}),!1}});async function h(e){try{console.log("Starting saveToTana with data:",e);const r=await k();console.log("Retrieved configuration from storage:",r),p(r);const t=r.targetNodeId;console.log("Using target node ID:",t);const n=T(e,t,r.supertagId,r.tanaFieldIds);return console.log("Formatted Tana payload:",n),{success:!0,data:await I(n,r.apiKey)}}catch(r){throw console.error("Error saving to Tana:",r),r}}async function k(){return new Promise((e,r)=>{chrome.storage.sync.get(["apiKey","targetNodeId","supertagId","tanaFieldIds"],t=>{try{p(t),e(t)}catch(n){r(n)}})})}function p(e){if(!e.apiKey)throw new Error("API Token not configured. Please go to extension options and set up your configuration.");if(!e.supertagId)throw new Error("Supertag ID not configured. Please extract and save your Tana schema in options.");if(!e.targetNodeId)throw new Error("Target Node ID is required. Please go to options and specify a target node ID.");if(!e.tanaFieldIds)throw new Error("Field IDs not configured. Please extract and save your Tana schema in options.")}async function I(e,r){console.log("Sending request to Tana API...");const t=await fetch("https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r}`},body:JSON.stringify(e)});if(console.log("API response status:",t.status),!t.ok){const o=await t.text();throw console.error("API error response:",o),new Error(`API error (${t.status}): ${o}`)}const n=await t.json();return console.log("API success response:",n),n}async function S(){try{await chrome.contextMenus.removeAll(),chrome.contextMenus.create({id:"save-page",title:"Save page to Tana",contexts:["page"]}),chrome.contextMenus.create({id:"save-with-notes",title:"Save page to Tana with notes",contexts:["page"]}),chrome.contextMenus.create({id:"save-selection",title:"Save selection to Tana",contexts:["selection"]}),console.log("Context menus created successfully")}catch(e){console.error("Error setting up context menus:",e)}}async function b(e,r){try{const t=await h(e.data);r(t)}catch(t){r({success:!1,error:t instanceof Error?t.message:"Unknown error occurred"})}}async function f(e,r){try{await chrome.scripting.executeScript({target:{tabId:e.tabId},files:["content.js"]}),r({success:!0})}catch(t){console.error("Error injecting overlay:",t),r({success:!1,error:t instanceof Error?t.message:"Failed to inject overlay"})}}async function C(e,r){try{const t=await v(e.tabId);r(t)}catch(t){r({success:!1,error:t instanceof Error?t.message:"Quick save failed"})}}async function x(e,r){try{await f({action:"injectOverlay",tabId:e.tabId},t=>{t.success&&chrome.tabs.sendMessage(e.tabId,{action:"showNotesDialog"})}),r({success:!0})}catch(t){r({success:!1,error:t instanceof Error?t.message:"Save with notes failed"})}}async function l(e){try{const r=await v(e);r.success?a("Page saved to Tana successfully!","success"):a(r.error||"Save failed","error")}catch(r){console.error("Quick save error:",r),a("Quick save failed","error")}}async function m(e){try{await f({action:"injectOverlay",tabId:e},r=>{r.success?chrome.tabs.sendMessage(e,{action:"showNotesDialog"}):a("Failed to open notes dialog","error")})}catch(r){console.error("Save with notes error:",r),a("Failed to open notes dialog","error")}}async function w(e,r){try{const t=await g(e);if(t){t.title=r;const n=await h(t);n.success?a(`Page saved to Tana with title: "${r}"`,"success"):a(n.error||"Save failed","error")}}catch(t){console.error("Save with custom title error:",t),a("Save with custom title failed","error")}}async function E(e,r){try{const t=await g(e,{includeContent:!1});if(t){t.content=r,t.title=`Selection from ${t.title}`;const n=await h(t);n.success?a("Selection saved to Tana successfully!","success"):a(n.error||"Save failed","error")}}catch(t){console.error("Save selection error:",t),a("Save selection failed","error")}}async function v(e){try{const r=await g(e);if(!r)throw new Error("Failed to extract page content");return await h(r)}catch(r){return{success:!1,error:r instanceof Error?r.message:"Quick save failed"}}}async function g(e,r={}){return new Promise(t=>{const n={includeContent:r.includeContent??!0,includeTitle:r.includeTitle??!0};chrome.tabs.sendMessage(e,{action:"extractContent",options:n},o=>{if(chrome.runtime.lastError){console.error("Content extraction error:",chrome.runtime.lastError),t(null);return}o&&!o.error?t({url:o.url,title:o.title,author:o.author,description:o.description,content:o.content}):(console.error("Content extraction failed:",o?.message),t(null))})})}function a(e,r="success"){const t=`tana-${Date.now()}`;chrome.notifications.create(t,{type:"basic",iconUrl:"images/icon48.png",title:"Save to Tana",message:e}),setTimeout(()=>{chrome.notifications.clear(t)},3e3)}
//# sourceMappingURL=background.js.map
