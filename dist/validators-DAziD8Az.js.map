{"version":3,"file":"validators-DAziD8Az.js","sources":["../src/utils/validators.ts"],"sourcesContent":["/**\n * Utility functions for validating and extracting Tana node IDs\n */\n\n/**\n * Extract node ID from a Tana URL or return the input if it's already a node ID\n * @param input - Either a full Tana URL or a node ID\n * @returns The extracted node ID or null if invalid\n */\nexport function extractNodeId(input: string): string | null {\n  if (!input || typeof input !== 'string') {\n    return null;\n  }\n\n  const trimmedInput = input.trim();\n\n  // Check if it's a Tana URL\n  if (trimmedInput.includes('app.tana.inc') || trimmedInput.includes('nodeid=')) {\n    try {\n      const url = new URL(trimmedInput);\n      const nodeId = url.searchParams.get('nodeid');\n      return nodeId && isValidNodeId(nodeId) ? nodeId : null;\n    } catch {\n      // If URL parsing fails, try regex extraction\n      const match = trimmedInput.match(/nodeid=([^&\\s]+)/);\n      if (match && match[1]) {\n        const nodeId = match[1];\n        return isValidNodeId(nodeId) ? nodeId : null;\n      }\n      return null;\n    }\n  }\n\n  // Check if it's already a valid node ID\n  return isValidNodeId(trimmedInput) ? trimmedInput : null;\n}\n\n/**\n * Validate if a string is a valid Tana node ID\n * Based on Tana documentation examples: node IDs are typically alphanumeric with dashes/underscores\n * Examples: z-p8LdQk6I76, d1RDBb0x1IdR_CAPTURE_INBOX, MaaJRCypzJ\n * @param nodeId - The node ID to validate\n * @returns True if valid, false otherwise\n */\nexport function isValidNodeId(nodeId: string): boolean {\n  if (!nodeId || typeof nodeId !== 'string') {\n    return false;\n  }\n\n  const trimmed = nodeId.trim();\n  \n  // Check for special node IDs\n  const specialNodeIds = ['INBOX', 'SCHEMA', 'LIBRARY'];\n  if (specialNodeIds.includes(trimmed)) {\n    return true;\n  }\n\n  // Check for valid node ID pattern based on actual Tana examples:\n  // - Length between 8-30 characters\n  // - Must start with alphanumeric\n  // - Can contain alphanumeric, dashes, and underscores  \n  // - Must end with alphanumeric\n  // - Should look like actual Tana IDs (mix of letters/numbers, may have underscores/dashes)\n  const nodeIdPattern = /^[a-zA-Z0-9][a-zA-Z0-9_-]{6,28}[a-zA-Z0-9]$/;\n  \n  if (!nodeIdPattern.test(trimmed)) {\n    return false;\n  }\n  \n  // Additional validation: reject common invalid patterns\n  // - All lowercase words separated by dashes (likely not a node ID)\n  // - Patterns that look like readable text rather than IDs\n  if (/^[a-z]+(-[a-z]+)+$/.test(trimmed)) {\n    return false; // Patterns like \"not-a-url-or-valid-id\"\n  }\n  \n  // Must contain at least some mixed case or numbers (typical of Tana IDs)\n  const hasMixedCaseOrNumbers = /[A-Z0-9]/.test(trimmed);\n  \n  return hasMixedCaseOrNumbers;\n}\n\n/**\n * Validate and clean a target node ID input\n * @param input - Raw input from user (URL or node ID)\n * @returns Object with success status, cleaned node ID, and error message if any\n */\nexport function validateTargetNodeId(input: string): {\n  success: boolean;\n  nodeId?: string;\n  error?: string;\n} {\n  if (!input || typeof input !== 'string') {\n    return {\n      success: false,\n      error: 'Target Node ID is required'\n    };\n  }\n\n  const extractedNodeId = extractNodeId(input);\n  \n  if (!extractedNodeId) {\n    return {\n      success: false,\n      error: 'Invalid node ID format. Please provide a valid Tana node ID or URL'\n    };\n  }\n\n  return {\n    success: true,\n    nodeId: extractedNodeId\n  };\n} "],"names":["extractNodeId","input","trimmedInput","nodeId","isValidNodeId","match","trimmed","validateTargetNodeId","extractedNodeId"],"mappings":"AASO,SAASA,EAAcC,EAA8B,CAC1D,GAAI,CAACA,GAAS,OAAOA,GAAU,SACtB,OAAA,KAGH,MAAAC,EAAeD,EAAM,KAAK,EAGhC,GAAIC,EAAa,SAAS,cAAc,GAAKA,EAAa,SAAS,SAAS,EACtE,GAAA,CAEF,MAAMC,EADM,IAAI,IAAID,CAAY,EACb,aAAa,IAAI,QAAQ,EAC5C,OAAOC,GAAUC,EAAcD,CAAM,EAAIA,EAAS,IAAA,MAC5C,CAEA,MAAAE,EAAQH,EAAa,MAAM,kBAAkB,EAC/C,GAAAG,GAASA,EAAM,CAAC,EAAG,CACf,MAAAF,EAASE,EAAM,CAAC,EACf,OAAAD,EAAcD,CAAM,EAAIA,EAAS,IAAA,CAEnC,OAAA,IAAA,CAKJ,OAAAC,EAAcF,CAAY,EAAIA,EAAe,IACtD,CASO,SAASE,EAAcD,EAAyB,CACrD,GAAI,CAACA,GAAU,OAAOA,GAAW,SACxB,MAAA,GAGH,MAAAG,EAAUH,EAAO,KAAK,EAIxB,MADmB,CAAC,QAAS,SAAU,SAAS,EACjC,SAASG,CAAO,EAC1B,GAWL,CAFkB,8CAEH,KAAKA,CAAO,GAO3B,qBAAqB,KAAKA,CAAO,EAC5B,GAIqB,WAAW,KAAKA,CAAO,CAGvD,CAOO,SAASC,EAAqBN,EAInC,CACA,GAAI,CAACA,GAAS,OAAOA,GAAU,SACtB,MAAA,CACL,QAAS,GACT,MAAO,4BACT,EAGI,MAAAO,EAAkBR,EAAcC,CAAK,EAE3C,OAAKO,EAOE,CACL,QAAS,GACT,OAAQA,CACV,EATS,CACL,QAAS,GACT,MAAO,oEACT,CAOJ"}