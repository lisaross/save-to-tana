{"version":3,"file":"popup.js","sources":["../src/popup.ts"],"sourcesContent":["import { SaveToTanaRequest } from 'types';\n\n/**\n * Popup controller interfaces\n */\ninterface ExtractOptions {\n  includeContent: boolean;\n  includeTitle: boolean;\n}\n\ninterface StatusMessage {\n  message: string;\n  isError: boolean;\n}\n\n/**\n * Popup controller for the Save to Tana extension\n */\nexport class PopupController {\n  // UI elements\n  private saveButton: HTMLButtonElement;\n  private statusDiv: HTMLDivElement;\n  private openOptionsLink: HTMLAnchorElement;\n  private includeContentCheckbox: HTMLInputElement;\n  private includeTitleCheckbox: HTMLInputElement;\n  private notConfiguredDiv: HTMLDivElement;\n  private progressContainer: HTMLDivElement;\n  private progressFill: HTMLDivElement;\n  private progressText: HTMLDivElement;\n  \n  // Progress tracking\n  private progressInterval: number | null = null;\n\n  /**\n   * Initialize the popup controller\n   */\n  constructor() {\n    // Get UI elements\n    this.saveButton = document.getElementById('save-button') as HTMLButtonElement;\n    this.statusDiv = document.getElementById('status') as HTMLDivElement;\n    this.openOptionsLink = document.getElementById('open-options') as HTMLAnchorElement;\n    this.includeContentCheckbox = document.getElementById('include-content') as HTMLInputElement;\n    this.includeTitleCheckbox = document.getElementById('include-title') as HTMLInputElement;\n    this.notConfiguredDiv = document.getElementById('not-configured') as HTMLDivElement;\n    this.progressContainer = document.getElementById('progress-container') as HTMLDivElement;\n    this.progressFill = document.getElementById('progress-fill') as HTMLDivElement;\n    this.progressText = document.getElementById('progress-text') as HTMLDivElement;\n    \n    // Initialize the popup\n    this.initializePopup();\n  }\n\n  /**\n   * Initialize the popup\n   */\n  private initializePopup(): void {\n    // Check if extension is configured\n    this.checkConfiguration();\n    \n    // Set up event listeners\n    this.openOptionsLink.addEventListener('click', this.openOptions.bind(this));\n    this.saveButton.addEventListener('click', this.saveToTana.bind(this));\n  }\n\n  /**\n   * Check if the extension is configured\n   */\n  private checkConfiguration(): void {\n    chrome.storage.sync.get(\n      ['apiKey', 'supertagId', 'targetNodeId'], \n      (result) => {\n        if (!result.apiKey || !result.supertagId || !result.targetNodeId) {\n          this.saveButton.disabled = true;\n          this.notConfiguredDiv.style.display = 'block';\n        }\n      }\n    );\n  }\n\n  /**\n   * Open the options page\n   */\n  private openOptions(): void {\n    chrome.runtime.openOptionsPage();\n  }\n\n  /**\n   * Save the current page to Tana\n   */\n  private saveToTana(): void {\n    this.saveButton.disabled = true;\n    this.saveButton.textContent = 'Saving...';\n    this.updateStatus({ message: '', isError: false });\n    this.showProgress('Extracting content...');\n    \n    const options: ExtractOptions = {\n      includeContent: this.includeContentCheckbox.checked,\n      includeTitle: this.includeTitleCheckbox.checked\n    };\n    \n    // Get the current tab\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const currentTab = tabs[0];\n      if (!currentTab.id) {\n        this.handleError('Cannot access the current tab.');\n        return;\n      }\n      \n      // Extract content from the page\n      this.extractContentFromPage(currentTab.id, options);\n    });\n  }\n\n  /**\n   * Extract content from the page\n   * @param tabId - ID of the tab to extract content from\n   * @param options - Extraction options\n   */\n  private extractContentFromPage(tabId: number, options: ExtractOptions): void {\n    chrome.tabs.sendMessage(\n      tabId, \n      {\n        action: 'extractContent',\n        options: options\n      }, \n      (response) => {\n        if (chrome.runtime.lastError) {\n          this.handleError('Error communicating with the page: ' + chrome.runtime.lastError.message);\n          return;\n        }\n        \n        if (!response) {\n          this.handleError('No response from the page. Please refresh and try again.');\n          return;\n        }\n        \n        if (response.error) {\n          this.handleError(response.message || 'Error extracting content from the page');\n          return;\n        }\n        \n        // Update progress\n        this.updateProgress(25, 'Content extracted, sending to Tana...');\n        \n        // Send data to background script\n        this.sendToBackground(response);\n      }\n    );\n  }\n\n  /**\n   * Send extracted data to the background script\n   * @param data - Extracted data to send\n   */\n  private sendToBackground(data: any): void {\n    const request: SaveToTanaRequest = {\n      action: 'saveToTana',\n      data: data\n    };\n    \n    // Estimate if this will be chunked based on content size\n    const estimatedSize = JSON.stringify(data).length;\n    const willBeChunked = estimatedSize > 4500;\n    \n    if (willBeChunked) {\n      // For chunked content, show more realistic progress updates\n      this.updateProgress(30, 'Preparing large content for upload...');\n      \n      // Simulate progress updates for chunked content\n      let progressPercent = 30;\n      this.progressInterval = window.setInterval(() => {\n        if (progressPercent < 85) {\n          progressPercent += 5;\n          this.updateProgress(progressPercent, 'Uploading content chunks...');\n        }\n      }, 800); // Update every 800ms\n      \n      chrome.runtime.sendMessage(request, (result) => {\n        this.clearProgressInterval();\n        this.handleBackgroundResponse(result, willBeChunked);\n      });\n    } else {\n      // For simple content, quick progress\n      this.updateProgress(50, 'Uploading to Tana...');\n      \n      chrome.runtime.sendMessage(request, (result) => {\n        this.handleBackgroundResponse(result, willBeChunked);\n      });\n    }\n  }\n\n  /**\n   * Handle response from background script\n   * @param result - Response from background script\n   * @param wasChunked - Whether content was chunked\n   */\n  private handleBackgroundResponse(result: any, wasChunked: boolean): void {\n    this.saveButton.disabled = false;\n    this.saveButton.textContent = 'Save to Tana';\n    \n    if (!result) {\n      this.handleError('No response from the extension. Please try again.');\n      return;\n    }\n    \n    if (!result.success) {\n      this.handleError(result.error || 'Unknown error occurred');\n      return;\n    }\n    \n    // Handle response with chunking information\n    this.updateProgress(100, 'Complete!');\n    \n    let successMessage = 'Saved to Tana successfully!';\n    if (result.data && result.data.contentChunks > 0) {\n      successMessage = `Saved to Tana successfully! (Content split into ${result.data.contentChunks} parts due to size)`;\n    }\n    \n    // Show success after a brief delay to let users see 100% completion\n    setTimeout(() => {\n      this.hideProgress();\n      this.showSuccess(successMessage);\n    }, 500);\n  }\n\n  /**\n   * Handle an error\n   * @param message - Error message\n   */\n  private handleError(message: string): void {\n    this.saveButton.disabled = false;\n    this.saveButton.textContent = 'Save to Tana';\n    this.hideProgress();\n    this.updateStatus({ message, isError: true });\n  }\n\n  /**\n   * Show a success message\n   * @param message - Success message\n   */\n  private showSuccess(message: string): void {\n    this.updateStatus({ message, isError: false });\n    \n    // Clear status after 3 seconds\n    setTimeout(() => {\n      this.updateStatus({ message: '', isError: false });\n    }, 3000);\n  }\n\n  /**\n   * Update the status display\n   * @param status - Status message and type\n   */\n  private updateStatus(status: StatusMessage): void {\n    this.statusDiv.textContent = status.message;\n    this.statusDiv.className = 'status' + (status.isError ? ' error' : status.message ? ' success' : '');\n  }\n\n  /**\n   * Show progress bar\n   * @param text - Progress text to display\n   */\n  private showProgress(text: string = 'Processing...'): void {\n    this.progressContainer.style.display = 'block';\n    this.progressText.textContent = text;\n    this.progressFill.style.width = '0%';\n    this.updateStatus({ message: '', isError: false });\n  }\n\n  /**\n   * Update progress bar\n   * @param progress - Progress percentage (0-100)\n   * @param text - Progress text to display\n   */\n  private updateProgress(progress: number, text: string): void {\n    this.progressFill.style.width = `${Math.min(100, Math.max(0, progress))}%`;\n    this.progressText.textContent = text;\n  }\n\n  /**\n   * Hide progress bar\n   */\n  private hideProgress(): void {\n    this.clearProgressInterval();\n    this.progressContainer.style.display = 'none';\n  }\n\n  /**\n   * Clear progress interval if running\n   */\n  private clearProgressInterval(): void {\n    if (this.progressInterval !== null) {\n      window.clearInterval(this.progressInterval);\n      this.progressInterval = null;\n    }\n  }\n}\n\n// Initialize the popup when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new PopupController();\n});\n"],"names":["PopupController","result","options","tabs","currentTab","tabId","response","data","request","willBeChunked","progressPercent","wasChunked","successMessage","message","status","text","progress"],"mappings":"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"}