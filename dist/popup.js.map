{"version":3,"file":"popup.js","sources":["../src/popup.ts"],"sourcesContent":["import { SaveToTanaRequest } from 'types';\n\n/**\n * Popup controller interfaces\n */\ninterface ExtractOptions {\n  includeContent: boolean;\n  includeTitle: boolean;\n}\n\ninterface StatusMessage {\n  message: string;\n  isError: boolean;\n}\n\n/**\n * Popup controller for the Save to Tana extension\n */\nexport class PopupController {\n  // UI elements\n  private saveButton: HTMLButtonElement;\n  private statusDiv: HTMLDivElement;\n  private openOptionsLink: HTMLAnchorElement;\n  private includeContentCheckbox: HTMLInputElement;\n  private includeTitleCheckbox: HTMLInputElement;\n  private notConfiguredDiv: HTMLDivElement;\n\n  /**\n   * Initialize the popup controller\n   */\n  constructor() {\n    // Get UI elements\n    this.saveButton = document.getElementById('save-button') as HTMLButtonElement;\n    this.statusDiv = document.getElementById('status') as HTMLDivElement;\n    this.openOptionsLink = document.getElementById('open-options') as HTMLAnchorElement;\n    this.includeContentCheckbox = document.getElementById('include-content') as HTMLInputElement;\n    this.includeTitleCheckbox = document.getElementById('include-title') as HTMLInputElement;\n    this.notConfiguredDiv = document.getElementById('not-configured') as HTMLDivElement;\n    \n    // Initialize the popup\n    this.initializePopup();\n  }\n\n  /**\n   * Initialize the popup\n   */\n  private initializePopup(): void {\n    // Check if extension is configured\n    this.checkConfiguration();\n    \n    // Set up event listeners\n    this.openOptionsLink.addEventListener('click', this.openOptions.bind(this));\n    this.saveButton.addEventListener('click', this.saveToTana.bind(this));\n  }\n\n  /**\n   * Check if the extension is configured\n   */\n  private checkConfiguration(): void {\n    chrome.storage.sync.get(\n      ['apiKey', 'supertagId', 'targetNodeId'], \n      (result) => {\n        if (!result.apiKey || !result.supertagId || !result.targetNodeId) {\n          this.saveButton.disabled = true;\n          this.notConfiguredDiv.style.display = 'block';\n        }\n      }\n    );\n  }\n\n  /**\n   * Open the options page\n   */\n  private openOptions(): void {\n    chrome.runtime.openOptionsPage();\n  }\n\n  /**\n   * Save the current page to Tana\n   */\n  private saveToTana(): void {\n    this.saveButton.disabled = true;\n    this.saveButton.textContent = 'Saving...';\n    this.updateStatus({ message: '', isError: false });\n    \n    const options: ExtractOptions = {\n      includeContent: this.includeContentCheckbox.checked,\n      includeTitle: this.includeTitleCheckbox.checked\n    };\n    \n    // Get the current tab\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const currentTab = tabs[0];\n      if (!currentTab.id) {\n        this.handleError('Cannot access the current tab.');\n        return;\n      }\n      \n      // Extract content from the page\n      this.extractContentFromPage(currentTab.id, options);\n    });\n  }\n\n  /**\n   * Extract content from the page\n   * @param tabId - ID of the tab to extract content from\n   * @param options - Extraction options\n   */\n  private extractContentFromPage(tabId: number, options: ExtractOptions): void {\n    chrome.tabs.sendMessage(\n      tabId, \n      {\n        action: 'extractContent',\n        options: options\n      }, \n      (response) => {\n        if (chrome.runtime.lastError) {\n          this.handleError('Error communicating with the page: ' + chrome.runtime.lastError.message);\n          return;\n        }\n        \n        if (!response) {\n          this.handleError('No response from the page. Please refresh and try again.');\n          return;\n        }\n        \n        if (response.error) {\n          this.handleError(response.message || 'Error extracting content from the page');\n          return;\n        }\n        \n        // Send data to background script\n        this.sendToBackground(response);\n      }\n    );\n  }\n\n  /**\n   * Send extracted data to the background script\n   * @param data - Extracted data to send\n   */\n  private sendToBackground(data: any): void {\n    const request: SaveToTanaRequest = {\n      action: 'saveToTana',\n      data: data\n    };\n    \n    chrome.runtime.sendMessage(request, (result) => {\n      this.saveButton.disabled = false;\n      this.saveButton.textContent = 'Save to Tana';\n      \n      if (!result) {\n        this.handleError('No response from the extension. Please try again.');\n        return;\n      }\n      \n      if (!result.success) {\n        this.handleError(result.error || 'Unknown error occurred');\n        return;\n      }\n      \n      // Handle response with chunking information\n      let successMessage = 'Saved to Tana successfully!';\n      if (result.data && result.data.contentChunks > 0) {\n        successMessage = `Saved to Tana successfully! (Content split into ${result.data.contentChunks} parts due to size)`;\n      }\n      \n      this.showSuccess(successMessage);\n    });\n  }\n\n  /**\n   * Handle an error\n   * @param message - Error message\n   */\n  private handleError(message: string): void {\n    this.saveButton.disabled = false;\n    this.saveButton.textContent = 'Save to Tana';\n    this.updateStatus({ message, isError: true });\n  }\n\n  /**\n   * Show a success message\n   * @param message - Success message\n   */\n  private showSuccess(message: string): void {\n    this.updateStatus({ message, isError: false });\n    \n    // Clear status after 3 seconds\n    setTimeout(() => {\n      this.updateStatus({ message: '', isError: false });\n    }, 3000);\n  }\n\n  /**\n   * Update the status display\n   * @param status - Status message and type\n   */\n  private updateStatus(status: StatusMessage): void {\n    this.statusDiv.textContent = status.message;\n    this.statusDiv.className = 'status' + (status.isError ? ' error' : status.message ? ' success' : '');\n  }\n}\n\n// Initialize the popup when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new PopupController();\n});\n"],"names":["PopupController","result","options","tabs","currentTab","tabId","response","data","request","successMessage","message","status"],"mappings":"AAkBO,MAAMA,CAAgB,CAEnB,WACA,UACA,gBACA,uBACA,qBACA,iBAKR,aAAc,CAEP,KAAA,WAAa,SAAS,eAAe,aAAa,EAClD,KAAA,UAAY,SAAS,eAAe,QAAQ,EAC5C,KAAA,gBAAkB,SAAS,eAAe,cAAc,EACxD,KAAA,uBAAyB,SAAS,eAAe,iBAAiB,EAClE,KAAA,qBAAuB,SAAS,eAAe,eAAe,EAC9D,KAAA,iBAAmB,SAAS,eAAe,gBAAgB,EAGhE,KAAK,gBAAgB,CAAA,CAMf,iBAAwB,CAE9B,KAAK,mBAAmB,EAGxB,KAAK,gBAAgB,iBAAiB,QAAS,KAAK,YAAY,KAAK,IAAI,CAAC,EAC1E,KAAK,WAAW,iBAAiB,QAAS,KAAK,WAAW,KAAK,IAAI,CAAC,CAAA,CAM9D,oBAA2B,CACjC,OAAO,QAAQ,KAAK,IAClB,CAAC,SAAU,aAAc,cAAc,EACtCC,GAAW,EACN,CAACA,EAAO,QAAU,CAACA,EAAO,YAAc,CAACA,EAAO,gBAClD,KAAK,WAAW,SAAW,GACtB,KAAA,iBAAiB,MAAM,QAAU,QACxC,CAEJ,CAAA,CAMM,aAAoB,CAC1B,OAAO,QAAQ,gBAAgB,CAAA,CAMzB,YAAmB,CACzB,KAAK,WAAW,SAAW,GAC3B,KAAK,WAAW,YAAc,YAC9B,KAAK,aAAa,CAAE,QAAS,GAAI,QAAS,GAAO,EAEjD,MAAMC,EAA0B,CAC9B,eAAgB,KAAK,uBAAuB,QAC5C,aAAc,KAAK,qBAAqB,OAC1C,EAGO,OAAA,KAAK,MAAM,CAAE,OAAQ,GAAM,cAAe,IAASC,GAAS,CAC3D,MAAAC,EAAaD,EAAK,CAAC,EACrB,GAAA,CAACC,EAAW,GAAI,CAClB,KAAK,YAAY,gCAAgC,EACjD,MAAA,CAIG,KAAA,uBAAuBA,EAAW,GAAIF,CAAO,CAAA,CACnD,CAAA,CAQK,uBAAuBG,EAAeH,EAA+B,CAC3E,OAAO,KAAK,YACVG,EACA,CACE,OAAQ,iBACR,QAAAH,CACF,EACCI,GAAa,CACR,GAAA,OAAO,QAAQ,UAAW,CAC5B,KAAK,YAAY,sCAAwC,OAAO,QAAQ,UAAU,OAAO,EACzF,MAAA,CAGF,GAAI,CAACA,EAAU,CACb,KAAK,YAAY,0DAA0D,EAC3E,MAAA,CAGF,GAAIA,EAAS,MAAO,CACb,KAAA,YAAYA,EAAS,SAAW,wCAAwC,EAC7E,MAAA,CAIF,KAAK,iBAAiBA,CAAQ,CAAA,CAElC,CAAA,CAOM,iBAAiBC,EAAiB,CACxC,MAAMC,EAA6B,CACjC,OAAQ,aACR,KAAAD,CACF,EAEA,OAAO,QAAQ,YAAYC,EAAUP,GAAW,CAI9C,GAHA,KAAK,WAAW,SAAW,GAC3B,KAAK,WAAW,YAAc,eAE1B,CAACA,EAAQ,CACX,KAAK,YAAY,mDAAmD,EACpE,MAAA,CAGE,GAAA,CAACA,EAAO,QAAS,CACd,KAAA,YAAYA,EAAO,OAAS,wBAAwB,EACzD,MAAA,CAIF,IAAIQ,EAAiB,8BACjBR,EAAO,MAAQA,EAAO,KAAK,cAAgB,IAC5BQ,EAAA,mDAAmDR,EAAO,KAAK,aAAa,uBAG/F,KAAK,YAAYQ,CAAc,CAAA,CAChC,CAAA,CAOK,YAAYC,EAAuB,CACzC,KAAK,WAAW,SAAW,GAC3B,KAAK,WAAW,YAAc,eAC9B,KAAK,aAAa,CAAE,QAAAA,EAAS,QAAS,GAAM,CAAA,CAOtC,YAAYA,EAAuB,CACzC,KAAK,aAAa,CAAE,QAAAA,EAAS,QAAS,GAAO,EAG7C,WAAW,IAAM,CACf,KAAK,aAAa,CAAE,QAAS,GAAI,QAAS,GAAO,GAChD,GAAI,CAAA,CAOD,aAAaC,EAA6B,CAC3C,KAAA,UAAU,YAAcA,EAAO,QAC/B,KAAA,UAAU,UAAY,UAAYA,EAAO,QAAU,SAAWA,EAAO,QAAU,WAAa,GAAA,CAErG,CAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,IAAIX,CACN,CAAC"}