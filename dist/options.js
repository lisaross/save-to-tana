import{v as r}from"./validators-DAziD8Az.js";class l{apiKeyInput;targetNodeIdInput;supertagIdInput;saveButton;tanaSchemaInput;extractSchemaButton;extractedFieldsDiv;extractedFieldIdsPre;fieldIdUrlInput;fieldIdAuthorInput;fieldIdDescriptionInput;fieldIdContentInput;schemaErrorDiv;toast=null;constructor(){console.log("OptionsController constructor started"),this.apiKeyInput=document.getElementById("apiKey"),this.targetNodeIdInput=document.getElementById("targetNodeId"),this.supertagIdInput=document.getElementById("supertagId"),this.saveButton=document.getElementById("saveButton"),this.tanaSchemaInput=document.getElementById("tanaSchema"),this.extractSchemaButton=document.getElementById("extractSchemaButton"),this.extractedFieldsDiv=document.getElementById("extractedFields"),this.extractedFieldIdsPre=document.getElementById("extractedFieldIds"),this.fieldIdUrlInput=document.getElementById("fieldIdUrl"),this.fieldIdAuthorInput=document.getElementById("fieldIdAuthor"),this.fieldIdDescriptionInput=document.getElementById("fieldIdDescription"),this.fieldIdContentInput=document.getElementById("fieldIdContent"),this.toast=document.getElementById("toast"),console.log("Extract schema button found:",!!this.extractSchemaButton),console.log("Tana schema textarea found:",!!this.tanaSchemaInput),console.log("All elements found:",{apiKeyInput:!!this.apiKeyInput,targetNodeIdInput:!!this.targetNodeIdInput,supertagIdInput:!!this.supertagIdInput,saveButton:!!this.saveButton,tanaSchemaInput:!!this.tanaSchemaInput,extractSchemaButton:!!this.extractSchemaButton,extractedFieldsDiv:!!this.extractedFieldsDiv,extractedFieldIdsPre:!!this.extractedFieldIdsPre,toast:!!this.toast}),this.schemaErrorDiv=document.createElement("div"),this.schemaErrorDiv.className="status error",this.schemaErrorDiv.style.display="none",this.tanaSchemaInput.parentNode?.insertBefore(this.schemaErrorDiv,this.tanaSchemaInput.nextSibling),this.initializePage()}initializePage(){console.log("Initializing options page..."),this.loadConfiguration(),this.saveButton.addEventListener("click",this.saveConfiguration.bind(this)),this.extractSchemaButton.addEventListener("click",()=>{console.log("Extract schema button clicked!"),this.extractSchemaFromTextarea()}),this.apiKeyInput.addEventListener("input",this.validateForm.bind(this)),this.targetNodeIdInput.addEventListener("input",this.validateForm.bind(this)),this.supertagIdInput.addEventListener("input",this.validateForm.bind(this)),this.fieldIdUrlInput.addEventListener("input",this.validateForm.bind(this)),this.fieldIdAuthorInput.addEventListener("input",this.validateForm.bind(this)),this.fieldIdDescriptionInput.addEventListener("input",this.validateForm.bind(this)),this.fieldIdContentInput.addEventListener("input",this.validateForm.bind(this)),this.initializeExampleJsonToggle(),console.log("Options page initialization complete")}initializeExampleJsonToggle(){const e=document.getElementById("toggleExampleJson"),i=document.getElementById("exampleJsonBlock"),t=document.getElementById("toggleExampleJsonLabel");e&&i&&t&&e.addEventListener("click",()=>{const a=e.getAttribute("aria-expanded")==="true";e.setAttribute("aria-expanded",String(!a)),i.style.display=a?"none":"block",t.textContent=a?"Show Example JSON":"Hide Example JSON"})}loadConfiguration(){chrome.storage.sync.get(["apiKey","supertagId","targetNodeId","tanaFieldIds"],e=>{console.log("Loaded configuration:",e),e.apiKey&&(this.apiKeyInput.value=e.apiKey),e.targetNodeId&&(this.targetNodeIdInput.value=e.targetNodeId),e.supertagId&&(this.supertagIdInput.value=e.supertagId),e.tanaFieldIds&&(this.fieldIdUrlInput.value=e.tanaFieldIds.URL||"",this.fieldIdAuthorInput.value=e.tanaFieldIds.Author||"",this.fieldIdDescriptionInput.value=e.tanaFieldIds.Description||""),this.validateForm()})}saveConfiguration(){const e=this.targetNodeIdInput.value.trim(),i=this.supertagIdInput.value.trim(),t={URL:this.fieldIdUrlInput.value.trim(),Author:this.fieldIdAuthorInput.value.trim(),Description:this.fieldIdDescriptionInput.value.trim()},a=r(e);if(!a.success){this.showToast(a.error||"Invalid target node ID",!0);return}const s=this.apiKeyInput.value.trim(),d=a.nodeId;if(!s){this.showToast("API Token is required",!0);return}if(!i){this.showToast("Save to Tana Supertag ID is required. Please extract schema.",!0);return}if(!t.URL||!t.Author||!t.Description){this.showToast("URL, Author, and Description field IDs are required.",!0);return}chrome.storage.sync.set({apiKey:s,targetNodeId:d,supertagId:i,tanaFieldIds:t},()=>{this.showToast("Configuration saved successfully!")})}validateForm(){const e=this.apiKeyInput.value.trim(),i=this.targetNodeIdInput.value.trim(),t=this.supertagIdInput.value.trim();this.saveButton.disabled=!e||!i||!t}showToast(e,i=!1){this.toast&&(this.toast.textContent=e,this.toast.className="toast"+(i?" error":" success")+" show",setTimeout(()=>{this.toast&&(this.toast.textContent="",this.toast.className="toast")},3e3))}extractSchemaFromTextarea(){console.log("extractSchemaFromTextarea called"),this.schemaErrorDiv.style.display="none",this.schemaErrorDiv.textContent="";const e=this.tanaSchemaInput.value;console.log("Raw textarea value:",e?`${e.length} characters`:"empty");let i;try{i=JSON.parse(e),console.log("JSON parsed successfully:",i)}catch(t){const a=t;console.error("JSON parsing failed:",a),this.schemaErrorDiv.textContent="Could not parse JSON. Please paste the API payload as copied from Tana. Error: "+a.message,this.schemaErrorDiv.style.display="block",this.extractedFieldsDiv.style.display="none";return}try{const t=this.extractSchemaInfo(i);this.supertagIdInput.value=t.supertagId,this.fieldIdUrlInput.value=t.fieldIds.URL||"",this.fieldIdAuthorInput.value=t.fieldIds.Author||"",this.fieldIdDescriptionInput.value=t.fieldIds.Description||"",this.extractedFieldsDiv.style.display="block",this.extractedFieldIdsPre.innerHTML="Supertag ID: "+t.supertagId+`
`+Object.entries(t.fieldIds).map(([n,o])=>`${n} ID: ${o}`).join(`
`);const a=this.apiKeyInput.value.trim(),s=this.targetNodeIdInput.value.trim();let d="";if(s){const n=r(s);if(n.success)d=n.nodeId;else{this.showToast(`Invalid target node ID: ${n.error}`,!0);return}}chrome.storage.sync.get(["apiKey","targetNodeId"],n=>{chrome.storage.sync.set({apiKey:a||n.apiKey||"",targetNodeId:d||n.targetNodeId||"",supertagId:t.supertagId,tanaFieldIds:t.fieldIds},()=>{this.showToast("Schema extracted and saved!")})})}catch(t){const a=t;this.schemaErrorDiv.textContent="Failed to extract schema info: "+a.message,this.schemaErrorDiv.style.display="block",this.extractedFieldsDiv.style.display="none"}}extractSchemaInfo(e){const i=Array.isArray(e.nodes)?e.nodes[0]:null;if(!i)throw new Error("No nodes found in schema payload.");const t=i.supertags?.[0]?.id||"";if(!t)throw new Error("No supertag ID found in schema.");const a={};if(Array.isArray(i.children))for(const s of i.children)s.type==="field"&&s.attributeId&&(s.children?.[0]?.dataType==="url"?a.URL=s.attributeId:a.Author===void 0?a.Author=s.attributeId:a.Description===void 0&&(a.Description=s.attributeId));return{supertagId:t,fieldIds:a}}static cleanSchemaString(e){const i=e.split(`
`);i[0].trim().startsWith("type")&&i.shift(),i[i.length-1].trim().replace(/[;\s]/g,"")==="}"&&i.pop();let t=i.map(a=>a.replace(/\/\*[\s\S]*?\*\//g,"").replace(/\/\/.*$/g,"").replace(/^\s*\w+\??:.*;\s*$/g,"").replace(/;/g,"").replace(/\?/g,"").replace(/'/g,'"').trim()).filter(a=>a.length>0).join(`
`);return t=t.replace(/,\s*([\]\}])/g,"$1"),t=t.replace(/(^|[,{\s])(\w+):/g,'$1"$2":'),t.trim().startsWith("{")||(t="{"+t+"}"),t}}document.addEventListener("DOMContentLoaded",()=>{new l});
//# sourceMappingURL=options.js.map
