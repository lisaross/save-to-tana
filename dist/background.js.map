{"version":3,"file":"background.js","sources":["../src/utils/textUtils.ts","../src/tanaPayloadBuilder.ts","../src/background.ts"],"sourcesContent":["/**\n * Utility functions for text processing\n */\n\n/**\n * Sanitizes text for Tana API by removing newlines and extra spaces\n * @param text - The text to sanitize\n * @returns Sanitized text\n */\nexport function sanitizeText(text: string | undefined): string {\n  if (!text) return '';\n  \n  return text\n    .replace(/\\r?\\n|\\r/g, ' ')  // Replace newlines with spaces\n    .replace(/\\s+/g, ' ')       // Replace multiple spaces with a single space\n    .trim();\n}\n\n/**\n * Splits content into chunks of specified maximum size\n * @param content - The content to split\n * @param maxSize - Maximum size of each chunk\n * @returns Array of content chunks\n */\nexport function splitIntoChunks(content: string, maxSize: number): string[] {\n  const paragraphs = content.split(/\\n\\n+/);\n  const chunks: string[] = [];\n  let currentChunk = '';\n  \n  for (const paragraph of paragraphs) {\n    if ((currentChunk + paragraph).length > maxSize) {\n      if (currentChunk) {\n        chunks.push(currentChunk);\n        currentChunk = '';\n      }\n      \n      if (paragraph.length > maxSize) {\n        const sentences = paragraph.match(/[^.!?]+[.!?]+/g) || [paragraph];\n        \n        for (const sentence of sentences) {\n          if (sentence.length > maxSize) {\n            for (let i = 0; i < sentence.length; i += maxSize) {\n              chunks.push(sentence.slice(i, i + maxSize));\n            }\n          } else {\n            if ((currentChunk + sentence).length > maxSize) {\n              chunks.push(currentChunk);\n              currentChunk = sentence;\n            } else {\n              currentChunk += sentence;\n            }\n          }\n        }\n      } else {\n        currentChunk = paragraph;\n      }\n    } else {\n      currentChunk += (currentChunk ? '\\n\\n' : '') + paragraph;\n    }\n  }\n  \n  if (currentChunk) {\n    chunks.push(currentChunk);\n  }\n  \n  return chunks;\n}\n","import { \n  SaveData, \n  TanaFieldIds, \n  TanaPayload, \n  TanaNode,\n  TanaNodeChildContent\n} from '../types';\nimport { sanitizeText, splitIntoChunks } from './utils/textUtils';\n\n/**\n * Build a Tana API payload using the extracted schema and content data.\n * @param data - The content data (url, title, author, description, content)\n * @param targetNodeId - The Tana node to save under\n * @param supertagId - The supertag ID for the node\n * @param fieldIds - Mapping of field names to attribute IDs\n * @returns Tana API payload\n */\nexport function buildTanaPayload(\n  data: SaveData, \n  targetNodeId: string, \n  supertagId: string, \n  fieldIds: TanaFieldIds\n): TanaPayload {\n  // Validate required parameters\n  if (!data) {\n    throw new Error('SaveData is required');\n  }\n  if (!targetNodeId || !targetNodeId.trim()) {\n    throw new Error('Valid targetNodeId is required');\n  }\n  if (!supertagId || !supertagId.trim()) {\n    throw new Error('Valid supertagId is required');\n  }\n  if (!fieldIds) {\n    throw new Error('TanaFieldIds is required');\n  }\n\n  // Build the main node\n  const mainNode: TanaNode = {\n    name: sanitizeText(data.title || data.url),\n    supertags: [{ id: supertagId }],\n    children: []\n  };\n\n  // Add URL field\n  if (data.url && fieldIds.URL) {\n    mainNode.children.push({\n      type: 'field',\n      attributeId: fieldIds.URL,\n      children: [{ dataType: 'url', name: data.url }]\n    });\n  }\n  \n  // Add Author field\n  if (data.author && fieldIds.Author) {\n    mainNode.children.push({\n      type: 'field',\n      attributeId: fieldIds.Author,\n      children: [{ name: sanitizeText(data.author) }]\n    });\n  }\n  \n  // Add Description field\n  if (data.description && fieldIds.Description) {\n    mainNode.children.push({\n      type: 'field',\n      attributeId: fieldIds.Description,\n      children: [{ name: sanitizeText(data.description) }]\n    });\n  }\n  \n  // Add Content field (chunked if needed)\n  if (data.content && fieldIds.Content) {\n    const sanitizedContent = sanitizeText(data.content);\n    const maxContentLength = 4000;\n    let contentChunks: TanaNodeChildContent[] = [];\n    \n    if (sanitizedContent.length > maxContentLength) {\n      contentChunks = splitIntoChunks(sanitizedContent, maxContentLength)\n        .map(chunk => ({ name: chunk }));\n    } else {\n      contentChunks = [{ name: sanitizedContent }];\n    }\n    \n    mainNode.children.push({\n      type: 'field',\n      attributeId: fieldIds.Content,\n      children: contentChunks\n    });\n  }\n\n  return {\n    targetNodeId,\n    nodes: [mainNode]\n  };\n}\n","import { \n  SaveData, \n  SaveResponse, \n  TanaConfig, \n  SaveToTanaRequest,\n  TanaPayload\n} from '../types';\nimport { buildTanaPayload } from './tanaPayloadBuilder';\n\n/**\n * Background script - handles API communication with Tana\n */\n\n// No context menu needed since we removed the extractor\nchrome.runtime.onInstalled.addListener(() => {\n  console.log('Save to Tana extension installed');\n});\n\n// Handle messages from popup and content scripts\nchrome.runtime.onMessage.addListener((\n  request: SaveToTanaRequest, \n  sender: chrome.runtime.MessageSender, \n  sendResponse: (response: SaveResponse) => void\n) => {\n  if (request.action === 'saveToTana') {\n    saveToTana(request.data)\n      .then(result => {\n        sendResponse(result);\n      })\n      .catch(error => {\n        sendResponse({\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error occurred'\n        });\n      });\n    \n    // Return true to indicate we will send a response asynchronously\n    return true;\n  }\n  return false;\n});\n\n/**\n * Function to save data to Tana\n * @param data - The data to save to Tana\n * @returns Promise resolving to a SaveResponse\n */\nasync function saveToTana(data: SaveData): Promise<SaveResponse> {\n  try {\n    console.log('Starting saveToTana with data:', data);\n    \n    // Get API key, target node ID, and schema info from storage\n    const result = await getStorageConfig();\n    \n    console.log('Retrieved configuration from storage:', result);\n    validateConfig(result);\n    \n    const targetNodeId = result.targetNodeId;\n    console.log('Using target node ID:', targetNodeId);\n    \n    // Build the payload using the schema\n    const tanaPayload = buildTanaPayload(\n      data, \n      targetNodeId, \n      result.supertagId, \n      result.tanaFieldIds\n    );\n    console.log('Formatted Tana payload:', tanaPayload);\n    \n    // Send data to Tana API\n    const responseData = await sendToTanaApi(tanaPayload, result.apiKey);\n    \n    return {\n      success: true,\n      data: responseData\n    };\n  } catch (error) {\n    console.error('Error saving to Tana:', error);\n    throw error;\n  }\n}\n\n/**\n * Get configuration from Chrome storage\n * @returns Promise resolving to TanaConfig\n */\nasync function getStorageConfig(): Promise<TanaConfig> {\n  return new Promise((resolve, reject) => {\n    chrome.storage.sync.get(\n      ['apiKey', 'targetNodeId', 'supertagId', 'tanaFieldIds'], \n      (result) => {\n        try {\n          validateConfig(result);\n          resolve(result as TanaConfig);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    );\n  });\n}\n\n/**\n * Validate the configuration\n * @param config - The configuration to validate\n * @throws Error if configuration is invalid\n */\nfunction validateConfig(config: Partial<TanaConfig>): asserts config is TanaConfig {\n  if (!config.apiKey) {\n    throw new Error('API Token not configured. Please go to extension options and set up your configuration.');\n  }\n  \n  if (!config.supertagId) {\n    throw new Error('Supertag ID not configured. Please extract and save your Tana schema in options.');\n  }\n  \n  if (!config.targetNodeId) {\n    throw new Error('Target Node ID is required. Please go to options and specify a target node ID.');\n  }\n  \n  if (!config.tanaFieldIds) {\n    throw new Error('Field IDs not configured. Please extract and save your Tana schema in options.');\n  }\n}\n\n/**\n * Send payload to Tana API\n * @param payload - The payload to send\n * @param apiKey - The API key for authentication\n * @returns Promise resolving to the API response data\n */\nasync function sendToTanaApi(payload: TanaPayload, apiKey: string): Promise<any> {\n  console.log('Sending request to Tana API...');\n  const response = await fetch('https://europe-west1-tagr-prod.cloudfunctions.net/addToNodeV2', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`\n    },\n    body: JSON.stringify(payload)\n  });\n  \n  console.log('API response status:', response.status);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('API error response:', errorText);\n    throw new Error(`API error (${response.status}): ${errorText}`);\n  }\n  \n  const responseData = await response.json();\n  console.log('API success response:', responseData);\n  return responseData;\n}\n"],"names":["sanitizeText","text","splitIntoChunks","content","maxSize","paragraphs","chunks","currentChunk","paragraph","sentences","sentence","buildTanaPayload","data","targetNodeId","supertagId","fieldIds","mainNode","sanitizedContent","maxContentLength","contentChunks","chunk","request","sender","sendResponse","saveToTana","result","error","getStorageConfig","validateConfig","tanaPayload","sendToTanaApi","resolve","reject","config","payload","apiKey","response","errorText","responseData"],"mappings":"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"}